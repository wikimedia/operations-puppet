cluster: pki
profile::puppet::agent::force_puppet7: true
profile::puppet::agent::dns_alt_names:
  - pki.discovery.wmnet
# in this file all _cert parameteres are passed to the file function
# and all _key paramtetes are passed to the secret function
profile::pki::multirootca::cfssl_httpd_cert: true
profile::pki::multirootca::intermediates:
  debmonitor:
    ocsp_port: 10001
  discovery:
    ocsp_port: 10002
    default_usages:
      - 'digital signature'
      - 'key encipherment'
      - 'server auth'
    profiles:
      k8s_staging:
        # Short expiry for staging to regularly test cert refresh
        expiry: '24h'
        # this is not the actual key but a reference to private puppet:
        # profile::pki::multirootca::default_auth_keys
        auth_key: 'k8s_staging'
      k8s_wikikube:
        # this is not the actual key but a reference to private puppet:
        # profile::pki::multirootca::default_auth_keys
        auth_key: 'k8s_wikikube'
      k8s_mlserve:
        # this is not the actual key but a reference to private puppet:
        # profile::pki::multirootca::default_auth_keys
        auth_key: 'k8s_mlserve'
      k8s_mlstaging:
        # Short expiry for staging to regularly test cert refresh
        expiry: '24h'
        # this is not the actual key but a reference to private puppet:
        # profile::pki::multirootca::default_auth_keys
        auth_key: 'k8s_mlstaging'
      k8s_dse:
        # this is not the actual key but a reference to private puppet:
        # profile::pki::multirootca::default_auth_keys
        auth_key: 'k8s_dse'
      k8s_aux:
        # this is not the actual key but a reference to private puppet:
        # profile::pki::multirootca::default_auth_keys
        auth_key: 'k8s_aux'
  kafka:
    ocsp_port: 10003
    default_usages:
      - 'digital signature'
      - 'key encipherment'
      - 'server auth'
      - 'client auth'
    profiles:
      kafka_11:
        # Kafka 1.1 supports dynamic reload of the TLS keystore (that contains
        # the certificate that the broker uses) but in order to work it needs
        # a different filepath/password
        # (see https://issues.apache.org/jira/browse/KAFKA-7429 and T299409).
        # For the moment the only way to reload the keystore is via a rolling
        # restart of the brokers, that we don't want to do every month or so.
        # Once we migrate to Kafka 2.x we'll be able to remove this constraint.
        expiry: '8760h'
  cloud_wmnet_ca:
    ocsp_port: 10004
    default_usages:
      - 'digital signature'
      - 'key encipherment'
      - 'server auth'
  etcd:
    ocsp_port: 10005
    default_usages:
      - 'digital signature'
      - 'key encipherment'
      - 'server auth'
      - 'client auth'
  cassandra:
    ocsp_port: 10006
    default_usages:
      - 'digital signature'
      - 'key encipherment'
      - 'server auth'
      - 'client auth'
  syslog:
    ocsp_port: 10007
    default_usages:
      - 'digital signature'
      - 'key encipherment'
      - 'server auth'
      - 'client auth'
  # This end point is used to provide ssl termination certificates that are
  # compatible with golang T350118
  puppet_rsa:
    ocsp_port: 10008
    default_usages:
      - 'digital signature'
      - 'key encipherment'
      - 'server auth'
    profiles:
      mtls:
        usages:
        - 'digital signature'
        - 'key encipherment'
        - 'client auth'
  wikikube:
    # Main CA for the wikikube kubernetes cluster
    # https://v1-23.docs.kubernetes.io/docs/setup/best-practices/certificates/#all-certificates
    ocsp_port: 20010
    profiles:
      # Keys with this profile are used to sign/verify service account tokens so
      # there is no need for server or client auth.
      service-account-management:
        usages:
          - 'digital signature'
          - 'key encipherment'
      # Temporary profile for longer Prometheus certs expiration
      # https://phabricator.wikimedia.org/T343529
      prometheus:
        expiry: '8760h' # 1 year
        usages:
          - 'digital signature'
          - 'key encipherment'
          - 'client auth'
  wikikube_front_proxy:
    # Separate CA for the front proxy, using the same as for client-auth won't work:
    # https://v1-23.docs.kubernetes.io/docs/tasks/extend-kubernetes/configure-aggregation-layer/#ca-reusage-and-conflicts
    # Kubernetes will only use the default profile for client auth certs
    ocsp_port: 20011
  wikikube_staging:
    # Main CA for the wikikube staging kubernetes cluster
    # https://v1-23.docs.kubernetes.io/docs/setup/best-practices/certificates/#all-certificates
    ocsp_port: 20020
    # Short expiry for staging
    default_expiry: '72h'
    profiles:
      # Override the default profile "server" (used to issue certs for HTTPS) with a shorter expiry.
      server:
        expiry: '72h'
        usages:
          - 'digital signature'
          - 'key encipherment'
          - 'server auth'
      # Keys with this profile are used to sign/verify service account tokens so
      # there is no need for server or client auth.
      service-account-management:
        # Short expiry for staging
        expiry: '72h'
        usages:
          - 'digital signature'
          - 'key encipherment'
      # Temporary profile for longer Prometheus certs expiration
      # https://phabricator.wikimedia.org/T343529
      prometheus:
        expiry: '8760h' # 1 year
        usages:
          - 'digital signature'
          - 'key encipherment'
          - 'client auth'
  wikikube_staging_front_proxy:
    # Separate CA for the front proxy, using the same as for client-auth won't work:
    # https://v1-23.docs.kubernetes.io/docs/tasks/extend-kubernetes/configure-aggregation-layer/#ca-reusage-and-conflicts
    # Kubernetes will only use the default profile for client auth certs
    ocsp_port: 20021
    # Short expiry for staging
    default_expiry: '72h'
  mlserve:
    # Main CA for the mlserve kubernetes cluster
    # https://v1-23.docs.kubernetes.io/docs/setup/best-practices/certificates/#all-certificates
    ocsp_port: 20030
    profiles:
      # Keys with this profile are used to sign/verify service account tokens so
      # there is no need for server or client auth.
      service-account-management:
        usages:
          - 'digital signature'
          - 'key encipherment'
      # Temporary profile for longer Prometheus certs expiration
      # https://phabricator.wikimedia.org/T343529
      prometheus:
        expiry: '8760h' # 1 year
        usages:
          - 'digital signature'
          - 'key encipherment'
          - 'client auth'
  mlserve_front_proxy:
    # Separate CA for the front proxy, using the same as for client-auth won't work:
    # https://v1-23.docs.kubernetes.io/docs/tasks/extend-kubernetes/configure-aggregation-layer/#ca-reusage-and-conflicts
    # Kubernetes will only use the default profile for client auth certs
    ocsp_port: 20031
  mlserve_staging:
    # Main CA for the mlserve staging kubernetes cluster
    # https://v1-23.docs.kubernetes.io/docs/setup/best-practices/certificates/#all-certificates
    ocsp_port: 20040
    # Short expiry for staging
    default_expiry: '72h'
    profiles:
      # Override the default profile "server" (used to issue certs for HTTPS) with a shorter expiry.
      server:
        expiry: '72h'
        usages:
          - 'digital signature'
          - 'key encipherment'
          - 'server auth'
      # Keys with this profile are used to sign/verify service account tokens so
      # there is no need for server or client auth.
      service-account-management:
        # Short expiry for staging
        expiry: '72h'
        usages:
          - 'digital signature'
          - 'key encipherment'
      # Temporary profile for longer Prometheus certs expiration
      # https://phabricator.wikimedia.org/T343529
      prometheus:
        expiry: '8760h' # 1 year
        usages:
          - 'digital signature'
          - 'key encipherment'
          - 'client auth'
  mlserve_staging_front_proxy:
    # Separate CA for the front proxy, using the same as for client-auth won't work:
    # https://v1-23.docs.kubernetes.io/docs/tasks/extend-kubernetes/configure-aggregation-layer/#ca-reusage-and-conflicts
    # Kubernetes will only use the default profile for client auth certs
    ocsp_port: 20041
    # Short expiry for staging
    default_expiry: '72h'
  aux:
    # Main CA for the aux kubernetes cluster
    # https://v1-23.docs.kubernetes.io/docs/setup/best-practices/certificates/#all-certificates
    ocsp_port: 20050
    profiles:
      # Keys with this profile are used to sign/verify service account tokens so
      # there is no need for server or client auth.
      service-account-management:
        usages:
          - 'digital signature'
          - 'key encipherment'
      # Temporary profile for longer Prometheus certs expiration
      # https://phabricator.wikimedia.org/T343529
      prometheus:
        expiry: '8760h' # 1 year
        usages:
          - 'digital signature'
          - 'key encipherment'
          - 'client auth'
  aux_front_proxy:
    # Separate CA for the front proxy, using the same as for client-auth won't work:
    # https://v1-23.docs.kubernetes.io/docs/tasks/extend-kubernetes/configure-aggregation-layer/#ca-reusage-and-conflicts
    # Kubernetes will only use the default profile for client auth certs
    ocsp_port: 20051
  dse:
    # Main CA for the DSE kubernetes cluster
    # https://v1-23.docs.kubernetes.io/docs/setup/best-practices/certificates/#all-certificates
    ocsp_port: 20061
    profiles:
      # Keys with this profile are used to sign/verify service account tokens so
      # there is no need for server or client auth.
      service-account-management:
        usages:
          - 'digital signature'
          - 'key encipherment'
      # Temporary profile for longer Prometheus certs expiration
      # https://phabricator.wikimedia.org/T343529
      prometheus:
        expiry: '8760h' # 1 year
        usages:
          - 'digital signature'
          - 'key encipherment'
          - 'client auth'
  dse_front_proxy:
    # Separate CA for the front proxy, using the same as for client-auth won't work:
    # https://v1-23.docs.kubernetes.io/docs/tasks/extend-kubernetes/configure-aggregation-layer/#ca-reusage-and-conflicts
    # Kubernetes will only use the default profile for client auth certs
    ocsp_port: 20062
  network_devices:
    ocsp_port: 20063
    default_expiry: '8760h'  # 1 year
    default_usages:
      - 'digital signature'
      - 'key encipherment'
      - 'server auth'
# This is the vhost used for the ocsp/crl responder
profile::pki::multirootca::vhost: 'pki.discovery.wmnet'
profile::pki::multirootca::db_host: 'm1-master.eqiad.wmnet'
profile::contacts::role_contacts: ['Infrastructure Foundations']
profile::base::production::role_description: 'PKI server'
