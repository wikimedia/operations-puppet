profile::resolving::domain_search:
  - wikimedia.org
  - eqiad.wmnet
  - codfw.wmnet
cluster: misc
# Needed for docker
profile::base::overlayfs: true
profile::admin::groups:
  - deployment
  - deploy-ml-service
  - wdqs-admins
  - airflow-search-admins
  - eventlogging-admins
  - aqs-admins
  - deploy-aqs
  - deploy-design
  - deploy-phabricator
  - analytics-deployers
  - gerrit-deployers
  - zuul-deployers
  - deployment-ci-admins
  - deployment-jenkins
  - deployment-docker
  - research-deployers
  - platform-eng-deployers
  - airflow-analytics-product-admins
  - airflow-wmde-admins

# We still don't enable fpm here
profile::mediawiki::php::enable_fpm: false

# Default scap server configuration.  This is used in production.
# If you are setting up a scap server in labs, these will be used
# unless you override them for your labs project.
# See the overrides in hieradata/labs/deployment-prep/common.yaml
# for an example.

# keyholder::agent declarations.  These are created
# by the profile::keyholder::server class.  Each agent listed here
# will be present and useable by scap on the scap deploy server.
# NOTE: since labs
profile::keyholder::server::agents:
  mwdeploy:
    trusted_groups:
      - wikidev
      - mwdeploy
      - mwbuilder

  phabricator:
    trusted_groups:
      - deploy-phabricator

  gerrit:
    trusted_groups:
      - gerrit-deployers

  eventlogging:
    trusted_groups:
      - eventlogging-admins

  deploy-service:
    trusted_groups:
      - aqs-admins
      - deploy-aqs
      - deployment

  dumpsdeploy:
    trusted_groups:
      - ops

  analytics_deploy:
    trusted_groups:
      - analytics-deployers

  deploy-librenms:
    trusted_groups:
      - ops

  deploy-debmonitor:
    trusted_groups:
      - ops

  apache2modsec:
    trusted_groups:
      - ops
      - gerrit-admin

  netbox:
    trusted_groups:
      - ops

  deploy-homer:
    trusted_groups:
      - ops

  deploy-ci-docroot:
    trusted_groups:
      - deployment-ci-admins

  deploy-zuul:
    trusted_groups:
      - zuul-deployers

  deploy-jenkins:
    trusted_groups:
      - deployment-jenkins

  deploy-design:
    trusted_groups:
      - deploy-design

  # Shared deploy ssh key for Data Platform maintained
  # Airflow instances. For now, all admins of Airflow instances
  # can deploy any Airflow instance.
  deploy_airflow:
    trusted_groups:
      - analytics-deployers
      - research-deployers
      - platform-eng-deployers
      - airflow-search-admins
      - airflow-analytics-product-admins
      - airflow-wmde-admins

  scap:
    trusted_groups:
      - deployment

  # Shared ssh key for Release Engineering's Train-related
  # Gerrit patches (T310620)
  trainbranchbot:
    trusted_groups:
      - deployment

profile::mediawiki::scap_client::is_master: true
# T329857
profile::mediawiki::scap_client::deployment_dir_linked_to_staging_dir: true

# scap::source declarations.  These are created
# by the profile::mediawiki::deployment::server class.
# Each source listed here will be cloned on the scap deploy server.
scap::sources:

  # airflow-dags is a shared airflow repository for the various
  # Data Engineering maintained airflow instances.
  # Each instance (used by a team), gets its own
  # scap deployment source and target. Each
  # of these uses the same source repo, but an
  # instances specific scap repo.
  # See: https://wikitech.wikimedia.org/wiki/Analytics/Systems/Airflow
  airflow-dags/analytics:
    repository: data-engineering/airflow-dags
    scap_repository: data-engineering/airflow-dags-scap-analytics
    origin: gitlab
  airflow-dags/analytics_test:
    repository: data-engineering/airflow-dags
    scap_repository: data-engineering/airflow-dags-scap-analytics_test
    origin: gitlab
  airflow-dags/research:
    repository: data-engineering/airflow-dags
    scap_repository: data-engineering/airflow-dags-scap-research
    origin: gitlab
  airflow-dags/platform_eng:
    repository: data-engineering/airflow-dags
    scap_repository: data-engineering/airflow-dags-scap-platform_eng
    origin: gitlab
  airflow-dags/search:
    repository: data-engineering/airflow-dags
    scap_repository: data-engineering/airflow-dags-scap-search
    origin: gitlab
  airflow-dags/analytics_product:
    repository: data-engineering/airflow-dags
    scap_repository: data-engineering/airflow-dags-scap-analytics_product
    origin: gitlab
  airflow-dags/wmde:
    repository: data-engineering/airflow-dags
    scap_repository: data-engineering/airflow-dags-scap-wmde
    origin: gitlab

  analytics/refinery:
    scap_repository: analytics/refinery/scap
  analytics/hdfs-tools/deploy: {}
  dumps/dumps:
    repository: operations/dumps
    scap_repository: operations/dumps/scap
  eventlogging/analytics:
    repository: eventlogging
    scap_repository: eventlogging/scap/analytics
  # Public EventStreams service
  eventstreams/deploy:
    repository: mediawiki/services/eventstreams/deploy
  gerrit/gerrit:
    repository: operations/software/gerrit
  gervert/deploy:
    repository: operations/software/gerrit/tools/gervert/deploy
  integration/docroot: {}
  kartotherian/deploy:
    repository: maps/kartotherian/deploy
  #    lvs_service: kartotherian
  logstash/plugins:
    repository: operations/software/logstash/plugins
  analytics/turnilo/deploy: {}
  phabricator/deployment:
    repository: phabricator/deployment
    origin: gitlab
  restbase/deploy:
    repository: mediawiki/services/restbase/deploy
  horizon/deploy:
    repository: openstack/horizon/deploy
  tilerator/deploy:
    repository: maps/tilerator/deploy
  #    lvs_service: tilerator
  wikimedia/discovery/analytics:
    repository: wikimedia/discovery/analytics
  wdqs/wdqs:
    repository: wikidata/query/deploy
  #    lvs_service: wdqs
  # Cassandra logback encoder for Logstash
  cassandra/logstash-logback-encoder:
    repository: operations/software/logstash-logback-encoder
  homer/deploy:
    repository: operations/software/homer/deploy
  zuul/deploy:
    repository: integration/zuul/deploy
  # Librenms software
  librenms/librenms:
    repository: operations/software/librenms
  # Netbox software
  netbox/deploy:
    repository: operations/software/netbox-deploy
  # Netbox software (dev)
  netbox-dev/deploy:
    repository: operations/software/netbox-deploy
  search/mjolnir/deploy:
    repository: search-platform/mjolnir-deploy
    origin: gitlab
  statsv/statsv:
    repository: analytics/statsv
  performance/arc-lamp: {}
  performance/asoranking: {}
  performance/navtiming: {}
  docker-pkg/deploy:
    repository: operations/docker-images/docker-pkg/deploy
  debmonitor/deploy:
    repository: operations/software/debmonitor/deploy
  releng/phatality: {}
  design/style-guide: {}
  search/airflow: {}
  releng/jenkins-deploy:
    repository: releng/jenkins-deploy
    origin: gitlab

# Options for mw-on-k8s deployments for scap
scap::k8s_deployments:
  clusters:
    - eqiad
    - codfw
  file: /etc/helmfile-defaults/mediawiki-deployments.yaml
  releases_dir: /etc/helmfile-defaults/mediawiki/release

# List of kubernetes deployments of MediaWiki.
profile::kubernetes::deployment_server::mediawiki::release::mw_releases:
  - namespace: mw-debug
    release: pinkunicorn
    canary: ~
    mw_flavour: "publish"
    web_flavour: "webserver"
    debug: true
  - namespace: mw-web
    release: main
    canary: canary
    mw_flavour: "publish"
    web_flavour: "webserver"
    debug: false
  - namespace: mw-api-int
    release: main
    canary: canary
    mw_flavour: "publish"
    web_flavour: "webserver"
    debug: false
  - namespace: mw-api-ext
    release: main
    canary: canary
    mw_flavour: "publish"
    web_flavour: "webserver"
    debug: false
  - namespace: mw-jobrunner
    release: main
    canary: canary
    mw_flavour: "publish"
    web_flavour: "webserver"
    debug: false
  - namespace: mw-parsoid
    release: main
    canary: canary
    mw_flavour: "publish"
    web_flavour: "webserver"
    debug: false
  - namespace: mw-misc
    release: main
    canary: ~
    mw_flavour: "publish"
    web_flavour: "webserver"
    debug: true
  - namespace: mw-wikifunctions
    release: main
    canary: ~
    mw_flavour: "publish"
    web_flavour: "webserver"
    debug: false
profile::kubernetes::deployment_server::include_admin: true
# Default and environment specific generic values go here.
# default:
#   ..
# eqiad:
#   ..
profile::kubernetes::deployment_server::general:
  default:
    # envoy
    mesh:
      image_version: 1.23.10-3
      telemetry:
        enabled: true
    # prometheus-statsd-exporter
    monitoring:
      image_version: 0.0.10
    # common sidecar images versions
    # TODO: autogenerate this from the registry.
    common_images:
      httpd:
        exporter: prometheus-apache-exporter:0.0.4-20240623
      mcrouter:
        mcrouter: mcrouter:2023.07.17.00-1-20240714
        exporter: prometheus-mcrouter-exporter:0.0.1-3-20240714
      nutcracker:
        nutcracker: nutcracker:0.0.5-20240825
        exporter: prometheus-nutcracker-exporter:0.0.2-20211010
      rsyslogd: rsyslog:8.2102.0-3
      statsd:
        exporter: prometheus-statsd-exporter:0.26.1-20240610
      postgresql:
        "15": 2024-08-22-120749-5140e19dc982a8e46881204ad5f4c72f63195373@sha256:3059375b0143624877f1d485eb7ef0abaded989b477ecaf820be117cc98609e6
  eqiad:
    mesh:
      certmanager: &certmanager_eqiad
        enabled: true
        domains:
          - discovery.wmnet
          - svc.eqiad.wmnet
  codfw:
    mesh:
      certmanager: &certmanager_codfw
        enabled: true
        domains:
          - discovery.wmnet
          - svc.codfw.wmnet
  staging-eqiad:
    mesh:
      certmanager: &wikikube_staging_certmanager
        enabled: true
        # We have a wildcard DNS entry for *.k8s-staging.discovery.wmnet
        # used for ingress, but we can reuse that for NodePort services as well.
        domains:
          - k8s-staging.discovery.wmnet
        # Staging used a generic cergen cert with the following SAN
        # so we keep them for backwards compatibility.
        extraFQDNs:
          - staging.svc.eqiad.wmnet
  staging-codfw:
    mesh:
      certmanager:
        <<: *wikikube_staging_certmanager
        extraFQDNs:
          - staging.svc.codfw.wmnet
  ml-serve-eqiad:
    mesh:
      certmanager:
        <<: *certmanager_eqiad
  ml-serve-codfw:
    mesh:
      certmanager:
        <<: *certmanager_codfw
  ml-staging-codfw:
    mesh:
      certmanager:
        enabled: true
        # We have a wildcard DNS entry for *.k8s-ml-staging.discovery.wmnet
        # used for ingress, but we can reuse that for NodePort services as well.
        domains:
          - k8s-ml-staging.discovery.wmnet
        # Staging used a generic cergen cert with the following SAN
        # so we keep them for backwards compatibility.
        extraFQDNs:
          - ml-staging.svc.eqiad.wmnet
          - ml-staging.svc.eqiad.wmnet
  dse-k8s-eqiad:
    mesh:
      certmanager:
        <<: *certmanager_eqiad
  aux-k8s-eqiad:
    mesh:
      certmanager:
        <<: *certmanager_eqiad

# Enable icu67 component - T345561
profile::mediawiki::php::icu67: true
profile::mediawiki::deployment::server::rsync_host: "deployment.%{::site}.wmnet"
profile::mediawiki::apc_shm_size: 128M

profile::contacts::role_contacts: ["ServiceOps"]

# enable docker with the desired settings
profile::docker::engine::declare_service: false
profile::docker::engine::settings:
  data-root: "/srv/docker"
  live-restore: true
  iptables: false
  storage-driver: "overlay2"
profile::ci::pipeline::publisher::docker_registry_user: "ci-restricted"

profile::monitoring::nrpe_check_disk_options: -w 10% -c 5% -W 6% -K 3% -l -e -A -i '/(var/lib|run)/(docker|kubelet)/*' --exclude-type=tracefs

# The deployment group for mediawiki is called "deployment".
# See T303857
deployment_group: "deployment"

# T310395
profile::mediawiki::deployment::server::enable_auto_deploy: true
# See https://releases-jenkins.wikimedia.org/job/Automatic%20branch%20cut/configure for the schedule
# of the branch cut job that auto deployment relies on.
profile::mediawiki::deployment::server::auto_deploy_interval: Mon *-*-* 20:00:00 America/Los_Angeles
profile::mediawiki::deployment::server::auto_clean_interval: Mon *-*-* 21:00:00 America/Los_Angeles
