cluster: etcd

profile::etcd::v3::cluster_name: "v3.%{::domain}"
profile::etcd::v3::cluster_bootstrap: true
profile::etcd::v3::discovery: "dns:v3.%{::domain}"
profile::etcd::v3::use_client_certs: false
profile::etcd::v3::allow_from: "$DOMAIN_NETWORKS"
profile::etcd::v3::max_latency: 10
# This cert is generated using puppet-ecdsacert, and includes
# all the hostnames for the etcd machines in the SANs
# Will need to be regenerated if we add servers to the cluster.
profile::etcd::tlsproxy::cert_name: "etcd.%{::domain}"
profile::etcd::tlsproxy::acls: { /: ["root"], /conftool: ["root", "conftool"], /eventlogging: []}
# This should come from the private hieradata
#profile::etcd::tlsproxy::salt
profile::etcd::tlsproxy::read_only: false
profile::etcd::tlsproxy::listen_port: 4001
profile::etcd::tlsproxy::upstream_port: 2379
profile::etcd::tlsproxy::tls_upstream: true

profile::zookeeper::cluster_name: "main-%{::site}"
# To avoid version conflics with Cloudera zookeeper package, this
# class manually specifies which debian package version should be installed.
profile::zookeeper::zookeeper_version: '3.4.5+dfsg-2+deb8u2'
profile::zookeeper::firewall::srange: '(($HADOOP_MASTERS $KAFKA_BROKERS_ANALYTICS $KAFKA_BROKERS_JUMBO $KAFKA_BROKERS_MAIN $ZOOKEEPER_HOSTS_MAIN @resolve(kafkamon1001.eqiad.wmnet) @resolve(kafkamon2001.codfw.wmnet)))'
profile::zookeeper::monitoring_enabled: true
# Page if a zookeeper server in this cluster goes down.
# Temporary disabled to avoid unnecessary pages during the migration
# profile::zookeeper::is_critical: true