cluster: dnsbox

prometheus::node_exporter::collectors_extra:
  - 'ntp'

prometheus::haproxy_exporter::endpoint: 'http://127.0.0.1:8404/?stats;csv'

# This is used to generate .ssh/config for the DNS hosts themselves so that
# they can reach other directly with the IP address _and_ for the ferm rules
# for these hosts. It servers no other purpose and should not be used for
# anything else.
profile::dns::auth::authdns_servers_ips:
  'dns1004.wikimedia.org': 208.80.154.6
  'dns1005.wikimedia.org': 208.80.154.153
  'dns1006.wikimedia.org': 208.80.154.77
  'dns2004.wikimedia.org': 208.80.153.48
  'dns2005.wikimedia.org': 208.80.153.74
  'dns2006.wikimedia.org': 208.80.153.107
  'dns3003.wikimedia.org': 185.15.59.34
  'dns3004.wikimedia.org': 185.15.59.2
  'dns4003.wikimedia.org': 198.35.26.7
  'dns4004.wikimedia.org': 198.35.26.8
  'dns5003.wikimedia.org': 103.102.166.10
  'dns5004.wikimedia.org': 103.102.166.8
  'dns6001.wikimedia.org': 185.15.58.5
  'dns6002.wikimedia.org': 185.15.58.37
  'dns7001.wikimedia.org': 195.200.68.5
  'dns7002.wikimedia.org': 195.200.68.37

# When adding a new VIP here, make sure that check_cmd follows this format:
#   /usr/local/bin/check_{service_type}_state <actual check command>
# This is because we generate the check script template based on the service name in dns/auth/update.pp
# The name of the script should match the service_type. For authdns-ns2, the script is check_authdns_ns2_state
profile::bird::advertise_vips:
  recdns.anycast.wmnet:
    address: 10.3.0.1 # VIP to advertise (limited to a /32)
    check_cmd: '/usr/local/bin/check_recdns_state /usr/lib/nagios/plugins/check_dns_query -H 10.3.0.1 -l -d www.wikipedia.org -t 1'
    ensure: present
    service_type: recdns
  ns2.wikimedia.org:
    address: 198.35.27.27 # VIP to advertise (limited to a /32)
    check_cmd: '/usr/local/bin/check_authdns_ns2_state /usr/lib/nagios/plugins/check_dns_query -H 198.35.27.27 -a -l -d www.wikipedia.org -t 1'
    ensure: present
    service_type: authdns-ns2
  ntp.anycast.wmnet:
    address: 10.3.0.2 # VIP to advertise (limited to a /32)
    check_cmd: '/usr/local/bin/check_ntp_state /usr/lib/nagios/plugins/check_ntp_peer -H 127.0.0.1 -w 0.05 -c 0.1'
    ensure: present
    service_type: ntp

# These are the anycast NTP VIPs that are announced from various DNS boxes. The
# logic here is simple: we have three addresses ntp-[abc].anycast.wmnet. In the
# core sites, we advertise one each from the three DNS boxes (ntp-[abc]). In
# the edge sites, we just do ntp-a and ntp-b.
#
# If you are adding a new site, simply create a per-host override for the new
# DNS boxes. See the existing hieradata per-host overrides; for example for
# dns7001 and dns7002 (magru): dns7001 is advertising ntp-a while dns7002 is
# advertising ntp-b.

profile::dns::auth::ntp_check: '/usr/lib/nagios/plugins/check_ntp_peer -H 127.0.0.1 -w 0.05 -c 0.1'

profile::dns::auth::anycast_ntp_a:
  ntp-a.anycast.wmnet:
    address: 10.3.0.5 # ntp-a VIP /32
    check_cmd: "/usr/local/bin/check_ntp_a_state %{lookup('profile::dns::auth::ntp_check')}"
    ensure: present
    service_type: ntp-a

profile::dns::auth::anycast_ntp_b:
  ntp-b.anycast.wmnet:
    address: 10.3.0.6 # ntp-b VIP /32
    check_cmd: "/usr/local/bin/check_ntp_b_state %{lookup('profile::dns::auth::ntp_check')}"
    ensure: present
    service_type: ntp-b

profile::dns::auth::anycast_ntp_c:
  ntp-c.anycast.wmnet:
    address: 10.3.0.7 # ntp-c VIP /32
    check_cmd: "/usr/local/bin/check_ntp_c_state %{lookup('profile::dns::auth::ntp_check')}"
    ensure: present
    service_type: ntp-c

profile::dns::auth::acmechief_target::acmechief_hosts:
- acmechief1001.eqiad.wmnet
- acmechief2001.codfw.wmnet
- acmechief2002.codfw.wmnet
- acmechief-test1001.eqiad.wmnet
- acmechief-test2001.codfw.wmnet
profile::dns::auth::gitrepo: 'https://gerrit.wikimedia.org/r/operations/dns.git'

profile::systemd::timesyncd::ensure: absent
profile::contacts::role_contacts: ['Traffic']
profile::base::production::role_description: 'DNS auth/recursor and NTP site infra server'

# Copied over from dns::auth T330670.
profile::admin::groups:
 - dns-admins
 - fr-tech-admins

profile::dns::recursor::bind_service: 'gdnsd.service'

# we want to pass a custom nameserver list so will call this profile with that
# instead of it being called automatically when base::production is called.
profile::base::manage_resolvconf: false

profile::puppet::agent::force_puppet7: true
acmechief_host: acmechief2002.codfw.wmnet
