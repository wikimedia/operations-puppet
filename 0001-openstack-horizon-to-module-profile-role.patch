From 8f173f5ccebfe1a675c10d5d02b45e86f4a0af64 Mon Sep 17 00:00:00 2001
From: cpettet <rush@wikimedia.org>
Date: Fri, 13 Oct 2017 15:21:33 +0000
Subject: [PATCH] openstack: horizon to module/profile/role

Bug: T171494
Change-Id: Ia4c51b9610e12a4fdff52ff073bd95ea279e4d22
---
 .../codfw/profile/openstack/labtest/horizon.yaml   |   1 +
 .../eqiad/profile/openstack/main/horizon.yaml      |   1 +
 .../role/codfw/wmcs/openstack/labtest/web.yaml     |   5 +
 hieradata/role/common/horizon.yaml                 |   5 -
 manifests/site.pp                                  |   6 +-
 .../180px-Wikimedia_labs_dashboard_splash.png      | Bin 12130 -> 0 bytes
 .../216px-Wikimedia_labs_dashboard_logo.png        | Bin 3186 -> 0 bytes
 modules/openstack/files/horizon/Wikimedia_labs.ico | Bin 15086 -> 0 bytes
 .../files/mitaka/horizon/disabled_policy.json      |   4 -
 .../files/mitaka/horizon/glance_policy.json        |  52 --
 .../launch-instance-workflow.service.js            |  74 ---
 .../files/mitaka/horizon/keystone_policy.json      | 183 -------
 .../files/mitaka/horizon/nova_policy.json          | 138 ------
 .../files/mitaka/horizon/openstack_auth/backend.py | 321 ------------
 .../files/mitaka/horizon/openstack_auth/forms.py   | 160 ------
 .../files/mitaka/horizon/openstack_auth/wmtotp.py  |  47 --
 .../openstack/files/mitaka/horizon/overrides.py    | 180 -------
 .../files/mitaka/horizon/proxy/__init__.py         |   0
 .../openstack/files/mitaka/horizon/proxy/panel.py  |  20 -
 .../horizon/proxy/templates/proxy/_create.html     |  12 -
 .../horizon/proxy/templates/proxy/create.html      |   8 -
 .../horizon/proxy/templates/proxy/index.html       |  13 -
 .../openstack/files/mitaka/horizon/proxy/urls.py   |  21 -
 .../openstack/files/mitaka/horizon/proxy/views.py  | 307 ------------
 .../openstack/files/mitaka/horizon/proxy_enable.py |   4 -
 .../files/mitaka/horizon/puppet_group_add.py       |   6 -
 .../mitaka/horizon/puppet_prefix_tab_enable.py     |   5 -
 .../files/mitaka/horizon/puppet_tab_enable.py      |   7 -
 .../files/mitaka/horizon/puppettab/__init__.py     |   0
 .../horizon/puppettab/prefixpanel/__init__.py      |   0
 .../horizon/puppettab/prefixpanel/plustab.py       |  64 ---
 .../horizon/puppettab/prefixpanel/prefixpanel.py   |  91 ----
 .../mitaka/horizon/puppettab/prefixpanel/urls.py   |  38 --
 .../files/mitaka/horizon/puppettab/projectpanel.py |  63 ---
 .../mitaka/horizon/puppettab/puppet_config.py      | 208 --------
 .../files/mitaka/horizon/puppettab/puppet_roles.py | 144 ------
 .../mitaka/horizon/puppettab/puppet_tables.py      | 137 -----
 .../puppettab/static/dashboard/puppet/puppet.scss  |   1 -
 .../files/mitaka/horizon/puppettab/tab.py          | 140 ------
 .../horizon/puppettab/templates/puppet/_apply.html |  25 -
 .../puppettab/templates/puppet/_detail_puppet.html |  17 -
 .../puppettab/templates/puppet/_edithiera.html     |   4 -
 .../templates/puppet/_editotherclasses.html        |   3 -
 .../horizon/puppettab/templates/puppet/_hiera.html |  10 -
 .../puppettab/templates/puppet/_other_classes.html |   9 -
 .../puppettab/templates/puppet/_remove.html        |  22 -
 .../puppettab/templates/puppet/_removeprefix.html  |  15 -
 .../horizon/puppettab/templates/puppet/apply.html  |   8 -
 .../puppettab/templates/puppet/edithiera.html      |   6 -
 .../templates/puppet/editotherclasses.html         |   5 -
 .../puppettab/templates/puppet/plus_tab.html       |  15 -
 .../puppettab/templates/puppet/prefix_panel.html   |  14 -
 .../puppettab/templates/puppet/project_panel.html  |  14 -
 .../horizon/puppettab/templates/puppet/remove.html |   8 -
 .../puppettab/templates/puppet/removeprefix.html   |   8 -
 .../files/mitaka/horizon/puppettab/urls.py         |  38 --
 .../files/mitaka/horizon/puppettab/views.py        | 319 ------------
 .../files/mitaka/horizon/sudo/__init__.py          |   0
 .../openstack/files/mitaka/horizon/sudo/panel.py   |  28 --
 .../files/mitaka/horizon/sudo/sudorules.py         | 217 --------
 .../templates/sudo/_common_horizontal_form.html    |   3 -
 .../mitaka/horizon/sudo/templates/sudo/index.html  |  13 -
 .../openstack/files/mitaka/horizon/sudo/urls.py    |  26 -
 .../openstack/files/mitaka/horizon/sudo/views.py   | 138 ------
 .../files/mitaka/horizon/sudo/workflows.py         | 291 -----------
 .../openstack/files/mitaka/horizon/sudo_enable.py  |   6 -
 .../files/mitaka/horizon/sudo_group_add.py         |   6 -
 modules/openstack/manifests/horizon/puppetpanel.pp |  39 --
 modules/openstack/manifests/horizon/service.pp     | 287 -----------
 .../180px-Wikimedia_labs_dashboard_splash.png      | Bin 0 -> 12130 bytes
 .../216px-Wikimedia_labs_dashboard_logo.png        | Bin 0 -> 3186 bytes
 .../openstack2/files/horizon/Wikimedia_labs.ico    | Bin 0 -> 15086 bytes
 .../designate/dashboard/_70_dns_add_group.py       |  20 +
 .../mitaka/designate/dashboard/_71_dns_project.py  |  32 ++
 .../files/mitaka/designate/dashboard/__init__.py   |   0
 .../openstack2/files/mitaka/designate/policy.json  | 104 ++++
 .../files/mitaka/horizon/disabled_policy.json      |   4 +
 .../files/mitaka/horizon/glance_policy.json        |  52 ++
 .../launch-instance-workflow.service.js            |  74 +++
 .../files/mitaka/horizon/keystone_policy.json      | 183 +++++++
 .../files/mitaka/horizon/nova_policy.json          | 138 ++++++
 .../files/mitaka/horizon/openstack_auth/backend.py | 321 ++++++++++++
 .../files/mitaka/horizon/openstack_auth/forms.py   | 160 ++++++
 .../files/mitaka/horizon/openstack_auth/wmtotp.py  |  47 ++
 .../openstack2/files/mitaka/horizon/overrides.py   | 180 +++++++
 .../files/mitaka/horizon/proxy/__init__.py         |   0
 .../openstack2/files/mitaka/horizon/proxy/panel.py |  20 +
 .../horizon/proxy/templates/proxy/_create.html     |  12 +
 .../horizon/proxy/templates/proxy/create.html      |   8 +
 .../horizon/proxy/templates/proxy/index.html       |  13 +
 .../openstack2/files/mitaka/horizon/proxy/urls.py  |  21 +
 .../openstack2/files/mitaka/horizon/proxy/views.py | 307 ++++++++++++
 .../files/mitaka/horizon/proxy_enable.py           |   4 +
 .../files/mitaka/horizon/puppet_group_add.py       |   6 +
 .../mitaka/horizon/puppet_prefix_tab_enable.py     |   5 +
 .../files/mitaka/horizon/puppet_tab_enable.py      |   7 +
 .../files/mitaka/horizon/puppettab/__init__.py     |   0
 .../horizon/puppettab/prefixpanel/__init__.py      |   0
 .../horizon/puppettab/prefixpanel/plustab.py       |  64 +++
 .../horizon/puppettab/prefixpanel/prefixpanel.py   |  91 ++++
 .../mitaka/horizon/puppettab/prefixpanel/urls.py   |  38 ++
 .../files/mitaka/horizon/puppettab/projectpanel.py |  63 +++
 .../mitaka/horizon/puppettab/puppet_config.py      | 208 ++++++++
 .../files/mitaka/horizon/puppettab/puppet_roles.py | 144 ++++++
 .../mitaka/horizon/puppettab/puppet_tables.py      | 137 +++++
 .../puppettab/static/dashboard/puppet/puppet.scss  |   1 +
 .../files/mitaka/horizon/puppettab/tab.py          | 140 ++++++
 .../horizon/puppettab/templates/puppet/_apply.html |  25 +
 .../puppettab/templates/puppet/_detail_puppet.html |  17 +
 .../puppettab/templates/puppet/_edithiera.html     |   4 +
 .../templates/puppet/_editotherclasses.html        |   3 +
 .../horizon/puppettab/templates/puppet/_hiera.html |  10 +
 .../puppettab/templates/puppet/_other_classes.html |   9 +
 .../puppettab/templates/puppet/_remove.html        |  22 +
 .../puppettab/templates/puppet/_removeprefix.html  |  15 +
 .../horizon/puppettab/templates/puppet/apply.html  |   8 +
 .../puppettab/templates/puppet/edithiera.html      |   6 +
 .../templates/puppet/editotherclasses.html         |   5 +
 .../puppettab/templates/puppet/plus_tab.html       |  15 +
 .../puppettab/templates/puppet/prefix_panel.html   |  14 +
 .../puppettab/templates/puppet/project_panel.html  |  14 +
 .../horizon/puppettab/templates/puppet/remove.html |   8 +
 .../puppettab/templates/puppet/removeprefix.html   |   8 +
 .../files/mitaka/horizon/puppettab/urls.py         |  38 ++
 .../files/mitaka/horizon/puppettab/views.py        | 319 ++++++++++++
 .../files/mitaka/horizon/sudo/__init__.py          |   0
 .../openstack2/files/mitaka/horizon/sudo/panel.py  |  28 ++
 .../files/mitaka/horizon/sudo/sudorules.py         | 217 ++++++++
 .../templates/sudo/_common_horizontal_form.html    |   3 +
 .../mitaka/horizon/sudo/templates/sudo/index.html  |  13 +
 .../openstack2/files/mitaka/horizon/sudo/urls.py   |  26 +
 .../openstack2/files/mitaka/horizon/sudo/views.py  | 138 ++++++
 .../files/mitaka/horizon/sudo/workflows.py         | 291 +++++++++++
 .../openstack2/files/mitaka/horizon/sudo_enable.py |   6 +
 .../files/mitaka/horizon/sudo_group_add.py         |   6 +
 .../files/mitaka/keystoneclient/__init__.py        |  34 ++
 .../files/mitaka/keystoneclient/wmtotp.py          | 113 +++++
 .../openstack2/manifests/horizon/puppetpanel.pp    |  42 ++
 modules/openstack2/manifests/horizon/service.pp    | 303 ++++++++++++
 .../mitaka/horizon/horizon.wikimedia.org.erb       |  24 +
 .../horizon/labtesthorizon.wikimedia.org.erb       |  24 +
 .../templates/mitaka/horizon/local_settings.py.erb | 550 +++++++++++++++++++++
 .../manifests/openstack/base/horizon/dashboard.pp  |  32 ++
 .../openstack/labtest/horizon/dashboard.pp         |  21 +
 .../manifests/openstack/main/horizon/dashboard.pp  |  21 +
 modules/role/manifests/horizon.pp                  |  19 -
 .../role/manifests/wmcs/openstack/labtest/web.pp   |   1 +
 .../role/manifests/wmcs/openstack/main/horizon.pp  |   5 +-
 148 files changed, 5048 insertions(+), 4073 deletions(-)
 create mode 100644 hieradata/codfw/profile/openstack/labtest/horizon.yaml
 create mode 100644 hieradata/eqiad/profile/openstack/main/horizon.yaml
 create mode 100644 hieradata/role/codfw/wmcs/openstack/labtest/web.yaml
 delete mode 100644 hieradata/role/common/horizon.yaml
 delete mode 100644 modules/openstack/files/horizon/180px-Wikimedia_labs_dashboard_splash.png
 delete mode 100644 modules/openstack/files/horizon/216px-Wikimedia_labs_dashboard_logo.png
 delete mode 100644 modules/openstack/files/horizon/Wikimedia_labs.ico
 delete mode 100644 modules/openstack/files/mitaka/horizon/disabled_policy.json
 delete mode 100644 modules/openstack/files/mitaka/horizon/glance_policy.json
 delete mode 100644 modules/openstack/files/mitaka/horizon/jsoverrides/launch-instance-workflow.service.js
 delete mode 100644 modules/openstack/files/mitaka/horizon/keystone_policy.json
 delete mode 100644 modules/openstack/files/mitaka/horizon/nova_policy.json
 delete mode 100644 modules/openstack/files/mitaka/horizon/openstack_auth/backend.py
 delete mode 100644 modules/openstack/files/mitaka/horizon/openstack_auth/forms.py
 delete mode 100644 modules/openstack/files/mitaka/horizon/openstack_auth/wmtotp.py
 delete mode 100644 modules/openstack/files/mitaka/horizon/overrides.py
 delete mode 100644 modules/openstack/files/mitaka/horizon/proxy/__init__.py
 delete mode 100644 modules/openstack/files/mitaka/horizon/proxy/panel.py
 delete mode 100644 modules/openstack/files/mitaka/horizon/proxy/templates/proxy/_create.html
 delete mode 100644 modules/openstack/files/mitaka/horizon/proxy/templates/proxy/create.html
 delete mode 100644 modules/openstack/files/mitaka/horizon/proxy/templates/proxy/index.html
 delete mode 100644 modules/openstack/files/mitaka/horizon/proxy/urls.py
 delete mode 100644 modules/openstack/files/mitaka/horizon/proxy/views.py
 delete mode 100644 modules/openstack/files/mitaka/horizon/proxy_enable.py
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppet_group_add.py
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppet_prefix_tab_enable.py
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppet_tab_enable.py
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppettab/__init__.py
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppettab/prefixpanel/__init__.py
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppettab/prefixpanel/plustab.py
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppettab/prefixpanel/prefixpanel.py
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppettab/prefixpanel/urls.py
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppettab/projectpanel.py
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppettab/puppet_config.py
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppettab/puppet_roles.py
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppettab/puppet_tables.py
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppettab/static/dashboard/puppet/puppet.scss
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppettab/tab.py
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_apply.html
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_detail_puppet.html
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_edithiera.html
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_editotherclasses.html
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_hiera.html
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_other_classes.html
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_remove.html
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_removeprefix.html
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/apply.html
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/edithiera.html
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/editotherclasses.html
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/plus_tab.html
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/prefix_panel.html
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/project_panel.html
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/remove.html
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/removeprefix.html
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppettab/urls.py
 delete mode 100644 modules/openstack/files/mitaka/horizon/puppettab/views.py
 delete mode 100644 modules/openstack/files/mitaka/horizon/sudo/__init__.py
 delete mode 100644 modules/openstack/files/mitaka/horizon/sudo/panel.py
 delete mode 100644 modules/openstack/files/mitaka/horizon/sudo/sudorules.py
 delete mode 100644 modules/openstack/files/mitaka/horizon/sudo/templates/sudo/_common_horizontal_form.html
 delete mode 100644 modules/openstack/files/mitaka/horizon/sudo/templates/sudo/index.html
 delete mode 100644 modules/openstack/files/mitaka/horizon/sudo/urls.py
 delete mode 100644 modules/openstack/files/mitaka/horizon/sudo/views.py
 delete mode 100644 modules/openstack/files/mitaka/horizon/sudo/workflows.py
 delete mode 100644 modules/openstack/files/mitaka/horizon/sudo_enable.py
 delete mode 100644 modules/openstack/files/mitaka/horizon/sudo_group_add.py
 delete mode 100644 modules/openstack/manifests/horizon/puppetpanel.pp
 delete mode 100644 modules/openstack/manifests/horizon/service.pp
 create mode 100644 modules/openstack2/files/horizon/180px-Wikimedia_labs_dashboard_splash.png
 create mode 100644 modules/openstack2/files/horizon/216px-Wikimedia_labs_dashboard_logo.png
 create mode 100644 modules/openstack2/files/horizon/Wikimedia_labs.ico
 create mode 100644 modules/openstack2/files/mitaka/designate/dashboard/_70_dns_add_group.py
 create mode 100644 modules/openstack2/files/mitaka/designate/dashboard/_71_dns_project.py
 create mode 100644 modules/openstack2/files/mitaka/designate/dashboard/__init__.py
 create mode 100644 modules/openstack2/files/mitaka/designate/policy.json
 create mode 100644 modules/openstack2/files/mitaka/horizon/disabled_policy.json
 create mode 100644 modules/openstack2/files/mitaka/horizon/glance_policy.json
 create mode 100644 modules/openstack2/files/mitaka/horizon/jsoverrides/launch-instance-workflow.service.js
 create mode 100644 modules/openstack2/files/mitaka/horizon/keystone_policy.json
 create mode 100644 modules/openstack2/files/mitaka/horizon/nova_policy.json
 create mode 100644 modules/openstack2/files/mitaka/horizon/openstack_auth/backend.py
 create mode 100644 modules/openstack2/files/mitaka/horizon/openstack_auth/forms.py
 create mode 100644 modules/openstack2/files/mitaka/horizon/openstack_auth/wmtotp.py
 create mode 100644 modules/openstack2/files/mitaka/horizon/overrides.py
 create mode 100644 modules/openstack2/files/mitaka/horizon/proxy/__init__.py
 create mode 100644 modules/openstack2/files/mitaka/horizon/proxy/panel.py
 create mode 100644 modules/openstack2/files/mitaka/horizon/proxy/templates/proxy/_create.html
 create mode 100644 modules/openstack2/files/mitaka/horizon/proxy/templates/proxy/create.html
 create mode 100644 modules/openstack2/files/mitaka/horizon/proxy/templates/proxy/index.html
 create mode 100644 modules/openstack2/files/mitaka/horizon/proxy/urls.py
 create mode 100644 modules/openstack2/files/mitaka/horizon/proxy/views.py
 create mode 100644 modules/openstack2/files/mitaka/horizon/proxy_enable.py
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppet_group_add.py
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppet_prefix_tab_enable.py
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppet_tab_enable.py
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppettab/__init__.py
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppettab/prefixpanel/__init__.py
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppettab/prefixpanel/plustab.py
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppettab/prefixpanel/prefixpanel.py
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppettab/prefixpanel/urls.py
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppettab/projectpanel.py
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppettab/puppet_config.py
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppettab/puppet_roles.py
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppettab/puppet_tables.py
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppettab/static/dashboard/puppet/puppet.scss
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppettab/tab.py
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_apply.html
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_detail_puppet.html
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_edithiera.html
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_editotherclasses.html
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_hiera.html
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_other_classes.html
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_remove.html
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_removeprefix.html
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/apply.html
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/edithiera.html
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/editotherclasses.html
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/plus_tab.html
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/prefix_panel.html
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/project_panel.html
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/remove.html
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/removeprefix.html
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppettab/urls.py
 create mode 100644 modules/openstack2/files/mitaka/horizon/puppettab/views.py
 create mode 100644 modules/openstack2/files/mitaka/horizon/sudo/__init__.py
 create mode 100644 modules/openstack2/files/mitaka/horizon/sudo/panel.py
 create mode 100644 modules/openstack2/files/mitaka/horizon/sudo/sudorules.py
 create mode 100644 modules/openstack2/files/mitaka/horizon/sudo/templates/sudo/_common_horizontal_form.html
 create mode 100644 modules/openstack2/files/mitaka/horizon/sudo/templates/sudo/index.html
 create mode 100644 modules/openstack2/files/mitaka/horizon/sudo/urls.py
 create mode 100644 modules/openstack2/files/mitaka/horizon/sudo/views.py
 create mode 100644 modules/openstack2/files/mitaka/horizon/sudo/workflows.py
 create mode 100644 modules/openstack2/files/mitaka/horizon/sudo_enable.py
 create mode 100644 modules/openstack2/files/mitaka/horizon/sudo_group_add.py
 create mode 100644 modules/openstack2/files/mitaka/keystoneclient/__init__.py
 create mode 100644 modules/openstack2/files/mitaka/keystoneclient/wmtotp.py
 create mode 100644 modules/openstack2/manifests/horizon/puppetpanel.pp
 create mode 100644 modules/openstack2/manifests/horizon/service.pp
 create mode 100644 modules/openstack2/templates/mitaka/horizon/horizon.wikimedia.org.erb
 create mode 100644 modules/openstack2/templates/mitaka/horizon/labtesthorizon.wikimedia.org.erb
 create mode 100644 modules/openstack2/templates/mitaka/horizon/local_settings.py.erb
 create mode 100644 modules/profile/manifests/openstack/base/horizon/dashboard.pp
 create mode 100644 modules/profile/manifests/openstack/labtest/horizon/dashboard.pp
 create mode 100644 modules/profile/manifests/openstack/main/horizon/dashboard.pp
 delete mode 100644 modules/role/manifests/horizon.pp

diff --git a/hieradata/codfw/profile/openstack/labtest/horizon.yaml b/hieradata/codfw/profile/openstack/labtest/horizon.yaml
new file mode 100644
index 0000000..9be7719
--- /dev/null
+++ b/hieradata/codfw/profile/openstack/labtest/horizon.yaml
@@ -0,0 +1 @@
+profile::openstack::labtest::horizon::webserver_hostname: 'labtesthorizon.wikimedia.org'
diff --git a/hieradata/eqiad/profile/openstack/main/horizon.yaml b/hieradata/eqiad/profile/openstack/main/horizon.yaml
new file mode 100644
index 0000000..7ce5e4c
--- /dev/null
+++ b/hieradata/eqiad/profile/openstack/main/horizon.yaml
@@ -0,0 +1 @@
+profile::openstack::main::horizon::webserver_hostname: 'horizon.wikimedia.org'
diff --git a/hieradata/role/codfw/wmcs/openstack/labtest/web.yaml b/hieradata/role/codfw/wmcs/openstack/labtest/web.yaml
new file mode 100644
index 0000000..3c41dbb
--- /dev/null
+++ b/hieradata/role/codfw/wmcs/openstack/labtest/web.yaml
@@ -0,0 +1,5 @@
+---
+memcached::ip: 127.0.0.1
+
+admin::groups:
+  - wmcs-roots
diff --git a/hieradata/role/common/horizon.yaml b/hieradata/role/common/horizon.yaml
deleted file mode 100644
index 3c41dbb..0000000
--- a/hieradata/role/common/horizon.yaml
+++ /dev/null
@@ -1,5 +0,0 @@
----
-memcached::ip: 127.0.0.1
-
-admin::groups:
-  - wmcs-roots
diff --git a/manifests/site.pp b/manifests/site.pp
index baf61a1..ab2ef1f 100644
--- a/manifests/site.pp
+++ b/manifests/site.pp
@@ -156,12 +156,10 @@ node 'bromine.eqiad.wmnet' {
 #  It's proxied by the misc-web varnishes
 node 'californium.wikimedia.org' {
     role(wmcs::openstack::main::horizon,
-          horizon,
           striker::web,
           labs::instance_info_dumper)
     include ::standard
     include ::base::firewall
-    include ::openstack::horizon::puppetpanel
     include ::ldap::role::client::labs
 
     interface::add_ip6_mapped { 'main': }
@@ -1288,11 +1286,9 @@ node 'labcontrol1002.wikimedia.org' {
 node 'labtestweb2001.wikimedia.org' {
     role(wmcs::openstack::labtest::web,
           labs::openstack::nova::manager,
-          mariadb::wikitech,
-          horizon)
+          mariadb::wikitech)
     include ::base::firewall
     include ::standard
-    include ::openstack::horizon::puppetpanel
     include ::ldap::role::client::labs
 
     interface::add_ip6_mapped { 'main': }
diff --git a/modules/openstack/files/horizon/180px-Wikimedia_labs_dashboard_splash.png b/modules/openstack/files/horizon/180px-Wikimedia_labs_dashboard_splash.png
deleted file mode 100644
index 77b4671c248d275b66ea0fb7a95a0aec49c9046f..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 12130
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

diff --git a/modules/openstack/files/horizon/216px-Wikimedia_labs_dashboard_logo.png b/modules/openstack/files/horizon/216px-Wikimedia_labs_dashboard_logo.png
deleted file mode 100644
index 8125f16c73b639cf4480da4bf4b17dc6f5620c48..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 3186
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
Y2d-(H8+r|SUH||907*qoM6N<$g5;<N8~^|S

diff --git a/modules/openstack/files/horizon/Wikimedia_labs.ico b/modules/openstack/files/horizon/Wikimedia_labs.ico
deleted file mode 100644
index 962750c0cd69f73ffe7e178aa5ad150667381653..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 15086
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

diff --git a/modules/openstack/files/mitaka/horizon/disabled_policy.json b/modules/openstack/files/mitaka/horizon/disabled_policy.json
deleted file mode 100644
index 92503af..0000000
--- a/modules/openstack/files/mitaka/horizon/disabled_policy.json
+++ /dev/null
@@ -1,4 +0,0 @@
-{
-    "context_is_admin":  "!",
-    "default": "!"
-}
diff --git a/modules/openstack/files/mitaka/horizon/glance_policy.json b/modules/openstack/files/mitaka/horizon/glance_policy.json
deleted file mode 100644
index ce70040..0000000
--- a/modules/openstack/files/mitaka/horizon/glance_policy.json
+++ /dev/null
@@ -1,52 +0,0 @@
-{
-    "context_is_admin":  "role:admin",
-    "admin_or_owner":  "is_admin:True or project_id:%(project_id)s",
-    "default": "role:admin",
-
-    "add_image": "role:admin",
-    "delete_image": "role:admin",
-    "get_image": "",
-    "get_images": "",
-    "modify_image": "role:admin",
-    "publicize_image": "role:admin",
-    "copy_from": "role:admin",
-
-    "download_image": "",
-    "upload_image": "role:admin",
-
-    "delete_image_location": "role:admin",
-    "get_image_location": "",
-    "set_image_location": "role:admin",
-
-    "add_member": "role:admin",
-    "delete_member": "role:admin",
-    "get_member": "",
-    "get_members": "",
-    "modify_member": "role:admin",
-
-    "manage_image_cache": "role:admin",
-
-    "get_task": "",
-    "get_tasks": "",
-    "add_task": "role:admin",
-    "modify_task": "role:admin",
-
-    "get_metadef_namespace": "",
-    "get_metadef_namespaces":"",
-    "modify_metadef_namespace":"role:admin",
-    "add_metadef_namespace":"role:admin",
-    "delete_metadef_namespace":"role:admin",
-
-    "get_metadef_object":"",
-    "get_metadef_objects":"",
-    "modify_metadef_object":"role:admin",
-    "add_metadef_object":"role:admin",
-
-    "list_metadef_resource_types":"rule:admin_or_owner",
-    "add_metadef_resource_type_association":"",
-
-    "get_metadef_property":"",
-    "get_metadef_properties":"",
-    "modify_metadef_property":"role:admin",
-    "add_metadef_property":"role:admin"
-}
diff --git a/modules/openstack/files/mitaka/horizon/jsoverrides/launch-instance-workflow.service.js b/modules/openstack/files/mitaka/horizon/jsoverrides/launch-instance-workflow.service.js
deleted file mode 100644
index 9802f1e..0000000
--- a/modules/openstack/files/mitaka/horizon/jsoverrides/launch-instance-workflow.service.js
+++ /dev/null
@@ -1,74 +0,0 @@
-/*
- *    (c) Copyright 2015 Hewlett-Packard Development Company, L.P.
- *
- * Licensed under the Apache License, Version 2.0 (the 'License');
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an 'AS IS' BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-(function () {
-  'use strict';
-
-  angular
-    .module('horizon.dashboard.project.workflow.launch-instance')
-    .factory('horizon.dashboard.project.workflow.launch-instance.workflow', launchInstanceWorkflow);
-
-  launchInstanceWorkflow.$inject = [
-    'horizon.dashboard.project.workflow.launch-instance.basePath',
-    'horizon.app.core.workflow.factory'
-  ];
-
-  function launchInstanceWorkflow(basePath, dashboardWorkflow) {
-    return dashboardWorkflow({
-      title: gettext('Launch Instance'),
-
-      /* WMF Hack:  Several unneeded steps have been removed here.  */
-      steps: [
-        {
-          id: 'details',
-          title: gettext('Details'),
-          templateUrl: basePath + 'details/details.html',
-          helpUrl: basePath + 'details/details.help.html',
-          formName: 'launchInstanceDetailsForm'
-        },
-        {
-          id: 'source',
-          title: gettext('Source'),
-          templateUrl: basePath + 'source/source.html',
-          helpUrl: basePath + 'source/source.help.html',
-          formName: 'launchInstanceSourceForm'
-        },
-        {
-          id: 'flavor',
-          title: gettext('Flavor'),
-          templateUrl: basePath + 'flavor/flavor.html',
-          helpUrl: basePath + 'flavor/flavor.help.html',
-          formName: 'launchInstanceFlavorForm'
-        },
-        {
-          id: 'secgroups',
-          title: gettext('Security Groups'),
-          templateUrl: basePath + 'security-groups/security-groups.html',
-          helpUrl: basePath + 'security-groups/security-groups.help.html',
-          formName: 'launchInstanceAccessAndSecurityForm'
-        },
-      ],
-
-      btnText: {
-        finish: gettext('Launch Instance')
-      },
-
-      btnIcon: {
-        finish: 'fa fa-cloud-upload'
-      }
-    });
-  }
-
-})();
diff --git a/modules/openstack/files/mitaka/horizon/keystone_policy.json b/modules/openstack/files/mitaka/horizon/keystone_policy.json
deleted file mode 100644
index 0bd9546..0000000
--- a/modules/openstack/files/mitaka/horizon/keystone_policy.json
+++ /dev/null
@@ -1,183 +0,0 @@
-{
-    "admin_required": "role:admin or is_admin:1",
-    "service_role": "role:service",
-    "service_or_admin": "rule:admin_required or rule:service_role",
-    "owner" : "user_id:%(user_id)s",
-    "admin_or_owner": "rule:admin_required or rule:owner",
-    "token_subject": "user_id:%(target.token.user_id)s",
-    "admin_or_token_subject": "rule:admin_required or rule:token_subject",
- 
-    "default": "rule:admin_required",
- 
-    "identity:get_region": "",
-    "identity:list_regions": "rule:admin_required",
-    "identity:create_region": "rule:admin_required",
-    "identity:update_region": "rule:admin_required",
-    "identity:delete_region": "rule:admin_required",
- 
-    "identity:get_service": "",
-    "identity:list_services": "",
-    "identity:create_service": "rule:admin_required",
-    "identity:update_service": "rule:admin_required",
-    "identity:delete_service": "rule:admin_required",
- 
-    "identity:get_endpoint": "",
-    "identity:list_endpoints": "",
-    "identity:create_endpoint": "rule:admin_required",
-    "identity:update_endpoint": "rule:admin_required",
-    "identity:delete_endpoint": "rule:admin_required",
- 
-    "identity:get_domain": "rule:admin_required",
-    "identity:list_domains": "rule:admin_required",
-    "identity:create_domain": "rule:admin_required",
-    "identity:update_domain": "rule:admin_required",
-    "identity:delete_domain": "rule:admin_required",
- 
-    "identity:get_project": "rule:admin_required",
-    "identity:list_projects": "role:admin_required",
-    "identity:list_user_projects": "",
-    "identity:create_project": "rule:admin_required",
-    "identity:update_project": "rule:admin_required",
-    "identity:delete_project": "rule:admin_required",
- 
-    "identity:get_user": "rule:admin_required",
-    "identity:list_users": "rule:admin_required",
-    "identity:create_user": "rule:admin_required",
-    "identity:update_user": "rule:admin_required",
-    "identity:delete_user": "rule:admin_required",
-    "identity:change_password": "rule:admin_or_owner",
- 
-    "identity:get_group": "rule:admin_required",
-    "identity:list_groups": "rule:admin_required",
-    "identity:list_groups_for_user": "rule:admin_or_owner",
-    "identity:create_group": "rule:admin_required",
-    "identity:update_group": "rule:admin_required",
-    "identity:delete_group": "rule:admin_required",
-    "identity:list_users_in_group": "rule:admin_required",
-    "identity:remove_user_from_group": "rule:admin_required",
-    "identity:check_user_in_group": "rule:admin_required",
-    "identity:add_user_to_group": "rule:admin_required",
- 
-    "identity:get_credential": "rule:admin_required",
-    "identity:list_credentials": "rule:admin_required",
-    "identity:create_credential": "rule:admin_required",
-    "identity:update_credential": "rule:admin_required",
-    "identity:delete_credential": "rule:admin_required",
- 
-    "identity:ec2_get_credential": "rule:admin_required or (rule:owner and user_id:%(target.credential.user_id)s)",
-    "identity:ec2_list_credentials": "rule:admin_or_owner",
-    "identity:ec2_create_credential": "rule:admin_or_owner",
-    "identity:ec2_delete_credential": "rule:admin_required or (rule:owner and user_id:%(target.credential.user_id)s)",
- 
-    "identity:get_role": "",
-    "identity:list_roles": "rule:admin_required",
-    "identity:create_role": "rule:admin_required",
-    "identity:update_role": "rule:admin_required",
-    "identity:delete_role": "rule:admin_required",
- 
-    "identity:check_grant": "rule:admin_required",
-    "identity:list_grants": "rule:admin_required",
-    "identity:create_grant": "rule:admin_required",
-    "identity:revoke_grant": "rule:admin_required",
- 
-    "identity:list_role_assignments": "rule:admin_required",
- 
-    "identity:get_policy": "rule:admin_required",
-    "identity:list_policies": "rule:admin_required",
-    "identity:create_policy": "rule:admin_required",
-    "identity:update_policy": "rule:admin_required",
-    "identity:delete_policy": "rule:admin_required",
- 
-    "identity:check_token": "rule:admin_or_token_subject",
-    "identity:validate_token": "rule:service_admin_or_token_subject",
-    "identity:validate_token_head": "rule:service_or_admin",
-    "identity:revocation_list": "rule:service_or_admin",
-    "identity:revoke_token": "rule:admin_or_token_subject",
- 
-    "identity:create_trust": "user_id:%(trust.trustor_user_id)s",
-    "identity:list_trusts": "rule:admin_required",
-    "identity:list_roles_for_trust": "",
-    "identity:get_role_for_trust": "",
-    "identity:delete_trust": "",
- 
-    "identity:create_consumer": "rule:admin_required",
-    "identity:get_consumer": "rule:admin_required",
-    "identity:list_consumers": "rule:admin_required",
-    "identity:delete_consumer": "rule:admin_required",
-    "identity:update_consumer": "rule:admin_required",
- 
-    "identity:authorize_request_token": "rule:admin_required",
-    "identity:list_access_token_roles": "rule:admin_required",
-    "identity:get_access_token_role": "rule:admin_required",
-    "identity:list_access_tokens": "rule:admin_required",
-    "identity:get_access_token": "rule:admin_required",
-    "identity:delete_access_token": "rule:admin_required",
- 
-    "identity:list_projects_for_endpoint": "rule:admin_required",
-    "identity:add_endpoint_to_project": "rule:admin_required",
-    "identity:check_endpoint_in_project": "rule:admin_required",
-    "identity:list_endpoints_for_project": "rule:admin_required",
-    "identity:remove_endpoint_from_project": "rule:admin_required",
- 
-    "identity:create_endpoint_group": "rule:admin_required",
-    "identity:list_endpoint_groups": "rule:admin_required",
-    "identity:get_endpoint_group": "rule:admin_required",
-    "identity:update_endpoint_group": "rule:admin_required",
-    "identity:delete_endpoint_group": "rule:admin_required",
-    "identity:list_projects_associated_with_endpoint_group": "rule:admin_required",
-    "identity:list_endpoints_associated_with_endpoint_group": "rule:admin_required",
-    "identity:get_endpoint_group_in_project": "rule:admin_required",
-    "identity:list_endpoint_groups_for_project": "rule:admin_required",
-    "identity:add_endpoint_group_to_project": "rule:admin_required",
-    "identity:remove_endpoint_group_from_project": "rule:admin_required",
- 
-    "identity:create_identity_provider": "rule:admin_required",
-    "identity:list_identity_providers": "rule:admin_required",
-    "identity:get_identity_providers": "rule:admin_required",
-    "identity:update_identity_provider": "rule:admin_required",
-    "identity:delete_identity_provider": "rule:admin_required",
- 
-    "identity:create_protocol": "rule:admin_required",
-    "identity:update_protocol": "rule:admin_required",
-    "identity:get_protocol": "rule:admin_required",
-    "identity:list_protocols": "rule:admin_required",
-    "identity:delete_protocol": "rule:admin_required",
- 
-    "identity:create_mapping": "rule:admin_required",
-    "identity:get_mapping": "rule:admin_required",
-    "identity:list_mappings": "rule:admin_required",
-    "identity:delete_mapping": "rule:admin_required",
-    "identity:update_mapping": "rule:admin_required",
- 
-    "identity:create_service_provider": "rule:admin_required",
-    "identity:list_service_providers": "rule:admin_required",
-    "identity:get_service_provider": "rule:admin_required",
-    "identity:update_service_provider": "rule:admin_required",
-    "identity:delete_service_provider": "rule:admin_required",
- 
-    "identity:get_auth_catalog": "",
-    "identity:get_auth_projects": "",
-    "identity:get_auth_domains": "",
- 
-    "identity:list_projects_for_groups": "",
-    "identity:list_domains_for_groups": "",
- 
-    "identity:list_revoke_events": "",
- 
-    "identity:create_policy_association_for_endpoint": "rule:admin_required",
-    "identity:check_policy_association_for_endpoint": "rule:admin_required",
-    "identity:delete_policy_association_for_endpoint": "rule:admin_required",
-    "identity:create_policy_association_for_service": "rule:admin_required",
-    "identity:check_policy_association_for_service": "rule:admin_required",
-    "identity:delete_policy_association_for_service": "rule:admin_required",
-    "identity:create_policy_association_for_region_and_service": "rule:admin_required",
-    "identity:check_policy_association_for_region_and_service": "rule:admin_required",
-    "identity:delete_policy_association_for_region_and_service": "rule:admin_required",
-    "identity:get_policy_for_endpoint": "rule:admin_required",
-    "identity:list_endpoints_for_policy": "rule:admin_required",
- 
-    "identity:create_domain_config": "rule:admin_required",
-    "identity:get_domain_config": "rule:admin_required",
-    "identity:update_domain_config": "rule:admin_required",
-    "identity:delete_domain_config": "rule:admin_required"
-}
diff --git a/modules/openstack/files/mitaka/horizon/nova_policy.json b/modules/openstack/files/mitaka/horizon/nova_policy.json
deleted file mode 100644
index 92ff69d..0000000
--- a/modules/openstack/files/mitaka/horizon/nova_policy.json
+++ /dev/null
@@ -1,138 +0,0 @@
-{
-    "context_is_admin":  [["role:admin"]],
-    "admin_or_member":  [["is_admin:True"], ["project_id:%(project_id)s"]],
-    "admin_or_projectadmin":  [["is_admin:True"], ["role:projectadmin"]],
-    "default": [["rule:admin_or_projectadmin"]],
-
-    "compute:create": "rule:admin_or_projectadmin",
-    "compute:delete": "rule:admin_or_projectadmin",
-    "compute:create:attach_network": "role:admin",
-    "compute:create:attach_volume": "role:admin",
-    "compute:rebuild": "!",
-    "compute:start": "rule:admin_or_projectadmin",
-    "compute:stop": "rule:admin_or_projectadmin",
-    "compute:snapshot": "!",
-    "compute:get_all": [],
-    "compute:get_console_output": "rule:admin_or_member",
-
-    "sudorule:list": "",
-    "sudorule:delete": "rule:admin_or_projectadmin",
-    "sudorule:create": "rule:admin_or_projectadmin",
-    "sudorule:modify": "rule:admin_or_projectadmin",
-
-    "admin_api": [["is_admin:True"]],
-    "compute_extension:accounts": [["rule:admin_api"]],
-    "compute_extension:admin_actions": [["rule:admin_api"]],
-    "compute_extension:admin_actions:pause": [["rule:admin_or_projectadmin"]],
-    "compute_extension:admin_actions:unpause": [["rule:admin_or_projectadmin"]],
-    "compute_extension:admin_actions:suspend": "!",
-    "compute_extension:shelve": "!",
-    "compute_extension:admin_actions:resume": [["rule:admin_or_projectadmin"]],
-    "compute_extension:admin_actions:lock": [["rule:admin_api"]],
-    "compute_extension:admin_actions:unlock": [["rule:admin_api"]],
-    "compute_extension:admin_actions:resetNetwork": [["rule:admin_api"]],
-    "compute_extension:admin_actions:injectNetworkInfo": [["rule:admin_api"]],
-    "compute_extension:admin_actions:createBackup": [["role:admin"]],
-    "compute_extension:admin_actions:migrateLive": [["rule:admin_api"]],
-    "compute_extension:admin_actions:resetState": [["rule:admin_api"]],
-    "compute_extension:admin_actions:migrate": [["rule:admin_api"]],
-    "compute_extension:aggregates": [["rule:admin_api"]],
-    "compute_extension:certificates": [],
-    "compute_extension:cloudpipe": [["rule:admin_api"]],
-    "compute_extension:console_output": [["rule:admin_or_projectadmin"]],
-    "compute_extension:consoles": [["rule:admin_api"]],
-    "compute_extension:createserverext": [["rule:admin_or_projectadmin"]],
-    "compute_extension:deferred_delete": [["rule:admin_or_projectadmin"]],
-    "compute_extension:disk_config": [["rule:admin_or_projectadmin"]],
-    "compute_extension:extended_server_attributes": [],
-    "compute_extension:extended_status": [],
-    "compute_extension:flavor_access": [],
-    "compute_extension:flavor_disabled": [],
-    "compute_extension:flavor_rxtx": [],
-    "compute_extension:flavor_swap": [],
-    "compute_extension:flavorextradata": [],
-    "compute_extension:flavorextraspecs": [],
-    "compute_extension:flavormanage": [["rule:admin_api"]],
-    "compute_extension:floating_ip_dns": [["rule:admin_or_projectadmin"]],
-    "compute_extension:floating_ip_pools": [["rule:admin_or_projectadmin"]],
-    "compute_extension:floating_ips": [["rule:admin_or_projectadmin"]],
-    "compute_extension:hosts": [["rule:admin_api"]],
-    "compute_extension:hypervisors": [["rule:admin_api"]],
-    "compute_extension:instance_usage_audit_log": [["rule:admin_api"]],
-    "compute_extension:keypairs": "!",
-    "compute_extension:keypairs:create": "!",
-    "compute_extension:multinic": [["rule:admin_or_projectadmin"]],
-    "compute_extension:networks": [],
-    "compute_extension:networks:view": [],
-    "compute_extension:quotas:show": [["rule:admin_or_member"]],
-    "compute_extension:quotas:update": [["rule:admin_api"]],
-    "compute_extension:quota_classes": [["rule:admin_or_projectadmin"]],
-    "compute_extension:rescue": [["rule:admin_or_projectadmin"]],
-    "compute_extension:security_groups": [["rule:admin_or_projectadmin"]],
-    "compute_extension:server_diagnostics": [["rule:admin_api"]],
-    "compute_extension:simple_tenant_usage:show": [["rule:admin_or_member"]],
-    "compute_extension:simple_tenant_usage:list": [["rule:admin_api"]],
-    "compute_extension:users": [["rule:admin_api"]],
-    "compute_extension:virtual_interfaces": [["rule:admin_or_projectadmin"]],
-    "compute_extension:virtual_storage_arrays": [["rule:admin_or_projectadmin"]],
-    "compute_extension:volumes": [["rule:admin_or_projectadmin"]],
-    "compute_extension:volumetypes": [["rule:admin_or_projectadmin"]],
-
-    "compute:volume_snapshot_create": "!",
-    "compute:volume_snapshot_delete": "!",
-    "compute:resize": "!",
-    "compute:confirm_resize": "!",
-    "compute:revert_resize": "!",
-
-    "volume:create": [["rule:admin_or_projectadmin"]],
-    "volume:get_all": [],
-    "volume:get_volume_metadata": [],
-    "volume:get_snapshot": "!",
-    "volume:get_all_snapshots": "!",
-    "volume:create_snapshot": "!",
-
-
-    "volume_extension:types_manage": [["rule:admin_api"]],
-    "volume_extension:types_extra_specs": [["rule:admin_api"]],
-    "volume_extension:volume_admin_actions:reset_status": [["rule:admin_api"]],
-    "volume_extension:snapshot_admin_actions:reset_status": [["rule:admin_api"]],
-    "volume_extension:volume_admin_actions:force_delete": [["rule:admin_api"]],
-
-
-    "network:get_all_networks": [],
-    "network:get_network": [],
-    "network:delete_network": [["rule:admin_api"]],
-    "network:disassociate_network": [["rule:admin_or_projectadmin"]],
-    "network:get_vifs_by_instance": [],
-    "network:allocate_for_instance": [["rule:admin_or_projectadmin"]],
-    "network:deallocate_for_instance": [["rule:admin_or_projectadmin"]],
-    "network:validate_networks": [],
-    "network:get_instance_uuids_by_ip_filter": [],
-
-    "network:get_floating_ip": [],
-    "network:get_floating_ip_pools": [],
-    "network:get_floating_ip_by_address": [],
-    "network:get_floating_ips_by_project": [],
-    "network:get_floating_ips_by_fixed_address": [],
-    "network:allocate_floating_ip": [["rule:admin_or_projectadmin"]],
-    "network:deallocate_floating_ip": [["rule:admin_or_projectadmin"]],
-    "network:associate_floating_ip": [["rule:admin_or_projectadmin"]],
-    "network:disassociate_floating_ip": [["rule:admin_or_projectadmin"]],
-
-    "network:get_fixed_ip": [],
-    "network:get_fixed_ip_by_address": [],
-    "network:add_fixed_ip_to_instance": [["rule:admin_or_projectadmin"]],
-    "network:remove_fixed_ip_from_instance": [["rule:admin_or_projectadmin"]],
-    "network:add_network_to_project": [["rule:admin_or_projectadmin"]],
-    "network:get_instance_nw_info": [],
-
-    "network:get_dns_domains": [],
-    "network:add_dns_entry": [["rule:admin_or_projectadmin"]],
-    "network:modify_dns_entry": [["rule:admin_or_projectadmin"]],
-    "network:delete_dns_entry": [["rule:admin_or_projectadmin"]],
-    "network:get_dns_entries_by_address": [],
-    "network:get_dns_entries_by_name": [],
-    "network:create_private_dns_domain": [["rule:admin_or_projectadmin"]],
-    "network:create_public_dns_domain": [["rule:admin_or_projectadmin"]],
-    "network:delete_dns_domain": [["rule:admin_or_projectadmin"]]
-}
diff --git a/modules/openstack/files/mitaka/horizon/openstack_auth/backend.py b/modules/openstack/files/mitaka/horizon/openstack_auth/backend.py
deleted file mode 100644
index d8f8346..0000000
--- a/modules/openstack/files/mitaka/horizon/openstack_auth/backend.py
+++ /dev/null
@@ -1,321 +0,0 @@
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#    http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
-# implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-""" Module defining the Django auth backend class for the Keystone API. """
-
-import datetime
-import logging
-import pytz
-
-from django.conf import settings
-from django.utils.module_loading import import_string  # noqa
-from django.utils.translation import ugettext_lazy as _
-from keystoneauth1 import exceptions as keystone_exceptions
-
-from openstack_auth import exceptions
-from openstack_auth import user as auth_user
-from openstack_auth import utils
-
-
-LOG = logging.getLogger(__name__)
-
-
-KEYSTONE_CLIENT_ATTR = "_keystoneclient"
-
-
-class KeystoneBackend(object):
-    """Django authentication backend for use with ``django.contrib.auth``."""
-
-    def __init__(self):
-        self._auth_plugins = None
-
-    @property
-    def auth_plugins(self):
-        if self._auth_plugins is None:
-            plugins = getattr(
-                settings,
-                'AUTHENTICATION_PLUGINS',
-                ['openstack_auth.plugin.password.PasswordPlugin',
-                 'openstack_auth.plugin.token.TokenPlugin'])
-
-            self._auth_plugins = [import_string(p)() for p in plugins]
-
-        return self._auth_plugins
-
-    def check_auth_expiry(self, auth_ref, margin=None):
-        if not utils.is_token_valid(auth_ref, margin):
-            msg = _("The authentication token issued by the Identity service "
-                    "has expired.")
-            LOG.warning("The authentication token issued by the Identity "
-                        "service appears to have expired before it was "
-                        "issued. This may indicate a problem with either your "
-                        "server or client configuration.")
-            raise exceptions.KeystoneAuthException(msg)
-        return True
-
-    def get_user(self, user_id):
-        """Returns the current user from the session data.
-
-        If authenticated, this return the user object based on the user ID
-        and session data.
-
-        Note: this required monkey-patching the ``contrib.auth`` middleware
-        to make the ``request`` object available to the auth backend class.
-        """
-        if (hasattr(self, 'request') and
-                user_id == self.request.session["user_id"]):
-            token = self.request.session['token']
-            endpoint = self.request.session['region_endpoint']
-            services_region = self.request.session['services_region']
-            user = auth_user.create_user_from_token(self.request, token,
-                                                    endpoint, services_region)
-            return user
-        else:
-            return None
-
-    def authenticate(self, auth_url=None, **kwargs):
-        """Authenticates a user via the Keystone Identity API."""
-        LOG.debug('Beginning user authentication')
-
-        if not auth_url:
-            auth_url = settings.OPENSTACK_KEYSTONE_URL
-
-        auth_url = utils.fix_auth_url_version(auth_url)
-
-        for plugin in self.auth_plugins:
-            unscoped_auth = plugin.get_plugin(auth_url=auth_url, **kwargs)
-
-            if unscoped_auth:
-                break
-        else:
-            msg = _('No authentication backend could be determined to '
-                    'handle the provided credentials.')
-            LOG.warn('No authentication backend could be determined to '
-                     'handle the provided credentials. This is likely a '
-                     'configuration error that should be addressed.')
-            raise exceptions.KeystoneAuthException(msg)
-
-        session = utils.get_session()
-        keystone_client_class = utils.get_keystone_client().Client
-
-        try:
-            unscoped_auth_ref = unscoped_auth.get_access(session)
-        except keystone_exceptions.ConnectFailure as exc:
-            LOG.error(str(exc))
-            msg = _('Unable to establish connection to keystone endpoint.')
-            raise exceptions.KeystoneAuthException(msg)
-        except (keystone_exceptions.Unauthorized,
-                keystone_exceptions.Forbidden,
-                keystone_exceptions.NotFound) as exc:
-            LOG.debug(str(exc))
-            raise exceptions.KeystoneAuthException(_('Invalid credentials.'))
-        except (keystone_exceptions.ClientException,
-                keystone_exceptions.AuthorizationFailure) as exc:
-            msg = _("An error occurred authenticating. "
-                    "Please try again later.")
-            LOG.debug(str(exc))
-            raise exceptions.KeystoneAuthException(msg)
-
-        # Check expiry for our unscoped auth ref.
-        self.check_auth_expiry(unscoped_auth_ref)
-
-        # domain support can require domain scoped tokens to perform
-        # identity operations depending on the policy files being used
-        # for keystone.
-        domain_auth = None
-        domain_auth_ref = None
-        if utils.get_keystone_version() >= 3 and 'user_domain_name' in kwargs:
-            try:
-                token = unscoped_auth_ref.auth_token
-                domain_auth = utils.get_token_auth_plugin(
-                    auth_url,
-                    token,
-                    domain_name=kwargs['user_domain_name'])
-                domain_auth_ref = domain_auth.get_access(session)
-            except Exception:
-                LOG.debug('Error getting domain scoped token.', exc_info=True)
-
-        projects = plugin.list_projects(session,
-                                        unscoped_auth,
-                                        unscoped_auth_ref)
-        # Attempt to scope only to enabled projects
-        projects = [project for project in projects if project.enabled]
-
-        # Abort if there are no projects for this user and a valid domain
-        # token has not been obtained
-        #
-        # The valid use cases for a user login are:
-        #    Keystone v2: user must have a role on a project and be able
-        #                 to obtain a project scoped token
-        #    Keystone v3: 1) user can obtain a domain scoped token (user
-        #                    has a role on the domain they authenticated to),
-        #                    only, no roles on a project
-        #                 2) user can obtain a domain scoped token and has
-        #                    a role on a project in the domain they
-        #                    authenticated to (and can obtain a project scoped
-        #                    token)
-        #                 3) user cannot obtain a domain scoped token, but can
-        #                    obtain a project scoped token
-        if not projects and not domain_auth_ref:
-            msg = _('You are not authorized for any projects.')
-            if utils.get_keystone_version() >= 3:
-                msg = _('You are not authorized for any projects or domains.')
-            raise exceptions.KeystoneAuthException(msg)
-
-        # the recent project id a user might have set in a cookie
-        recent_project = None
-        request = kwargs.get('request')
-
-        if request:
-            # Grab recent_project found in the cookie, try to scope
-            # to the last project used.
-            recent_project = request.COOKIES.get('recent_project')
-
-        # if a most recent project was found, try using it first
-        if recent_project:
-            for pos, project in enumerate(projects):
-                if project.id == recent_project:
-                    # move recent project to the beginning
-                    projects.pop(pos)
-                    projects.insert(0, project)
-                    break
-
-        for project in projects:
-            token = unscoped_auth_ref.auth_token
-            scoped_auth = utils.get_token_auth_plugin(auth_url,
-                                                      token=token,
-                                                      project_id=project.id)
-
-            try:
-                scoped_auth_ref = scoped_auth.get_access(session)
-            except (keystone_exceptions.ClientException,
-                    keystone_exceptions.AuthorizationFailure):
-                pass
-            else:
-                break
-        else:
-            # if the user can't obtain a project scoped token, set the scoped
-            # token to be the domain token, if valid
-            if domain_auth_ref:
-                scoped_auth = domain_auth
-                scoped_auth_ref = domain_auth_ref
-            else:
-                # if no domain or project token for user, abort
-                msg = _("Unable to authenticate to any available projects.")
-                raise exceptions.KeystoneAuthException(msg)
-
-        # Check expiry for our new scoped token.
-        self.check_auth_expiry(scoped_auth_ref)
-
-        interface = getattr(settings, 'OPENSTACK_ENDPOINT_TYPE', 'public')
-
-        # If we made it here we succeeded. Create our User!
-        unscoped_token = unscoped_auth_ref.auth_token
-        user = auth_user.create_user_from_token(
-            request,
-            auth_user.Token(scoped_auth_ref, unscoped_token=unscoped_token),
-            scoped_auth_ref.service_catalog.url_for(service_type='identity',
-                                                    interface=interface))
-
-        if request is not None:
-            request.session['unscoped_token'] = unscoped_token
-            if domain_auth_ref:
-                # check django session engine, if using cookies, this will not
-                # work, as it will overflow the cookie so don't add domain
-                # scoped token to the session and put error in the log
-                if utils.using_cookie_backed_sessions():
-                    LOG.error('Using signed cookies as SESSION_ENGINE with '
-                              'OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT is '
-                              'enabled. This disables the ability to '
-                              'perform identity operations due to cookie size '
-                              'constraints.')
-                else:
-                    request.session['domain_token'] = domain_auth_ref
-
-            request.user = user
-
-            # Custom hack for WMF:
-            if 'extended_session' in kwargs and kwargs['extended_session']:
-                timeout = getattr(settings, "SESSION_TIMEOUT", 86400)
-            else:
-                timeout = getattr(settings, "SESSION_SHORT_TIMEOUT", 1800)
-
-            token_life = user.token.expires - datetime.datetime.now(pytz.utc)
-
-            # Fix for https://bugs.launchpad.net/django-openstack-auth/+bug/1562452:
-            session_time = min(timeout, int(token_life.total_seconds()))
-
-            request.session.set_expiry(session_time)
-
-            scoped_client = keystone_client_class(session=session,
-                                                  auth=scoped_auth)
-
-            # Support client caching to save on auth calls.
-            setattr(request, KEYSTONE_CLIENT_ATTR, scoped_client)
-
-        LOG.debug('Authentication completed.')
-        return user
-
-    def get_group_permissions(self, user, obj=None):
-        """Returns an empty set since Keystone doesn't support "groups"."""
-        # Keystone V3 added "groups". The Auth token response includes the
-        # roles from the user's Group assignment. It should be fine just
-        # returning an empty set here.
-        return set()
-
-    def get_all_permissions(self, user, obj=None):
-        """Returns a set of permission strings that the user has.
-
-        This permission available to the user is derived from the user's
-        Keystone "roles".
-
-        The permissions are returned as ``"openstack.{{ role.name }}"``.
-        """
-        if user.is_anonymous() or obj is not None:
-            return set()
-        # TODO(gabrielhurley): Integrate policy-driven RBAC
-        #                      when supported by Keystone.
-        role_perms = {"openstack.roles.%s" % role['name'].lower()
-                      for role in user.roles}
-
-        services = []
-        for service in user.service_catalog:
-            try:
-                service_type = service['type']
-            except KeyError:
-                continue
-            service_regions = [utils.get_endpoint_region(endpoint) for endpoint
-                               in service.get('endpoints', [])]
-            if user.services_region in service_regions:
-                services.append(service_type.lower())
-        service_perms = {"openstack.services.%s" % service
-                         for service in services}
-        return role_perms | service_perms
-
-    def has_perm(self, user, perm, obj=None):
-        """Returns True if the given user has the specified permission."""
-        if not user.is_active:
-            return False
-        return perm in self.get_all_permissions(user, obj)
-
-    def has_module_perms(self, user, app_label):
-        """Returns True if user has any permissions in the given app_label.
-
-        Currently this matches for the app_label ``"openstack"``.
-        """
-        if not user.is_active:
-            return False
-        for perm in self.get_all_permissions(user):
-            if perm[:perm.index('.')] == app_label:
-                return True
-        return False
diff --git a/modules/openstack/files/mitaka/horizon/openstack_auth/forms.py b/modules/openstack/files/mitaka/horizon/openstack_auth/forms.py
deleted file mode 100644
index af9c0da..0000000
--- a/modules/openstack/files/mitaka/horizon/openstack_auth/forms.py
+++ /dev/null
@@ -1,160 +0,0 @@
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#    http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
-# implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-import collections
-import logging
-
-import django
-from django.conf import settings
-from django.contrib.auth import authenticate  # noqa
-from django.contrib.auth import forms as django_auth_forms
-from django import forms
-from django.utils.translation import ugettext_lazy as _
-from django.views.decorators.debug import sensitive_variables  # noqa
-
-from openstack_auth import exceptions
-from openstack_auth import utils
-
-
-LOG = logging.getLogger(__name__)
-
-
-class Login(django_auth_forms.AuthenticationForm):
-    """Form used for logging in a user.
-
-    Handles authentication with Keystone by providing the domain name, username
-    and password. A scoped token is fetched after successful authentication.
-
-    A domain name is required if authenticating with Keystone V3 running
-    multi-domain configuration.
-
-    If the user authenticated has a default project set, the token will be
-    automatically scoped to their default project.
-
-    If the user authenticated has no default project set, the authentication
-    backend will try to scope to the projects returned from the user's assigned
-    projects. The first successful project scoped will be returned.
-
-    Inherits from the base ``django.contrib.auth.forms.AuthenticationForm``
-    class for added security features.
-    """
-    region = forms.ChoiceField(label=_("Region"), required=False)
-    username = forms.CharField(
-        label=_("User Name"),
-        widget=forms.TextInput(attrs={"autofocus": "autofocus"}),
-        help_text="This username and password are the same as those used "
-                  "to log in at wikitech.wikimedia.org.")
-    password = forms.CharField(label=_("Password"),
-                               widget=forms.PasswordInput(render_value=False))
-    totptoken = forms.CharField(label=_("Two-factor authentication code"),
-                                widget=forms.TextInput(),
-                                help_text="Login requires two-factor "
-                                          "authentication.  To enable it, "
-                                          "visit Preferences->User "
-                                          "Profile in your Wikitech account")
-    rememberme = forms.BooleanField(label=_("Remember me"),
-                                    help_text="Stay logged in for up to 7 "
-                                              "days of inactivity.",
-                                    required=False)
-
-    def __init__(self, *args, **kwargs):
-        super(Login, self).__init__(*args, **kwargs)
-        fields_ordering = ['username', 'password', 'totptoken', 'rememberme', 'region']
-        if getattr(settings,
-                   'OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT',
-                   False):
-            last_domain = self.request.COOKIES.get('login_domain', None)
-            self.fields['domain'] = forms.CharField(
-                initial=last_domain,
-                label=_("Domain"),
-                required=True,
-                widget=forms.TextInput(attrs={"autofocus": "autofocus"}))
-            self.fields['username'].widget = forms.widgets.TextInput()
-            fields_ordering = ['domain', 'username', 'password',
-                               'totptoken', 'rememberme', 'region']
-        self.fields['region'].choices = self.get_region_choices()
-        if len(self.fields['region'].choices) == 1:
-            self.fields['region'].initial = self.fields['region'].choices[0][0]
-            self.fields['region'].widget = forms.widgets.HiddenInput()
-        elif len(self.fields['region'].choices) > 1:
-            self.fields['region'].initial = self.request.COOKIES.get(
-                'login_region')
-
-        # if websso is enabled and keystone version supported
-        # prepend the websso_choices select input to the form
-        if utils.is_websso_enabled():
-            initial = getattr(settings, 'WEBSSO_INITIAL_CHOICE', 'credentials')
-            self.fields['auth_type'] = forms.ChoiceField(
-                label=_("Authenticate using"),
-                choices=getattr(settings, 'WEBSSO_CHOICES', ()),
-                required=False,
-                initial=initial)
-            # add auth_type to the top of the list
-            fields_ordering.insert(0, 'auth_type')
-
-        # websso is enabled, but keystone version is not supported
-        elif getattr(settings, 'WEBSSO_ENABLED', False):
-            msg = ("Websso is enabled but horizon is not configured to work " +
-                   "with keystone version 3 or above.")
-            LOG.warning(msg)
-        # Starting from 1.7 Django uses OrderedDict for fields and keyOrder
-        # no longer works for it
-        if django.VERSION >= (1, 7):
-            self.fields = collections.OrderedDict(
-                (key, self.fields[key]) for key in fields_ordering)
-        else:
-            self.fields.keyOrder = fields_ordering
-
-    @staticmethod
-    def get_region_choices():
-        default_region = (settings.OPENSTACK_KEYSTONE_URL, "Default Region")
-        regions = getattr(settings, 'AVAILABLE_REGIONS', [])
-        if not regions:
-            regions = [default_region]
-        return regions
-
-    @sensitive_variables()
-    def clean(self):
-        default_domain = getattr(settings,
-                                 'OPENSTACK_KEYSTONE_DEFAULT_DOMAIN',
-                                 'Default')
-        username = self.cleaned_data.get('username')
-        password = self.cleaned_data.get('password')
-        token = self.cleaned_data.get('totptoken')
-        remember = self.cleaned_data.get('rememberme')
-        region = self.cleaned_data.get('region')
-        domain = self.cleaned_data.get('domain', default_domain)
-
-        if not (username and password and token):
-            # Don't authenticate, just let the other validators handle it.
-            return self.cleaned_data
-
-        try:
-            self.user_cache = authenticate(request=self.request,
-                                           username=username,
-                                           password=password,
-                                           totp=token,
-                                           extended_session=remember,
-                                           user_domain_name=domain,
-                                           auth_url=region)
-            msg = 'Login successful for user "%(username)s".' % \
-                {'username': username}
-            LOG.info(msg)
-        except exceptions.KeystoneAuthException as exc:
-            msg = 'Login failed for user "%(username)s".' % \
-                {'username': username}
-            LOG.warning(msg)
-            raise forms.ValidationError(exc)
-        if hasattr(self, 'check_for_test_cookie'):  # Dropped in django 1.7
-            self.check_for_test_cookie()
-        return self.cleaned_data
diff --git a/modules/openstack/files/mitaka/horizon/openstack_auth/wmtotp.py b/modules/openstack/files/mitaka/horizon/openstack_auth/wmtotp.py
deleted file mode 100644
index ee53cf6..0000000
--- a/modules/openstack/files/mitaka/horizon/openstack_auth/wmtotp.py
+++ /dev/null
@@ -1,47 +0,0 @@
-# Licensed under the Apache License, Version 2.0 (the "License"); you may
-# not use this file except in compliance with the License. You may obtain
-# a copy of the License at
-#
-#      http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-# License for the specific language governing permissions and limitations
-# under the License.
-
-import logging
-
-from keystoneclient.auth.identity import v3 as v3_auth
-
-from openstack_auth.plugin import base
-from openstack_auth import exceptions
-from openstack_auth import utils
-
-LOG = logging.getLogger(__name__)
-
-__all__ = ['WmtotpPlugin']
-
-
-class WmtotpPlugin(base.BasePlugin):
-    """Authenticate against keystone given a username, password, totp token.
-    """
-
-    def get_plugin(self, auth_url=None, username=None, password=None,
-                   user_domain_name=None, totp=None, **kwargs):
-        if not all((auth_url, username, password, totp)):
-            return None
-
-        LOG.debug('Attempting to authenticate for %s', username)
-
-        if utils.get_keystone_version() >= 3:
-            return v3_auth.Wmtotp(auth_url=auth_url,
-                                  username=username,
-                                  password=password,
-                                  totp=totp,
-                                  user_domain_name=user_domain_name,
-                                  unscoped=True)
-
-        else:
-            msg = "Totp authentication requires the keystone v3 api."
-            raise exceptions.KeystoneAuthException(msg)
diff --git a/modules/openstack/files/mitaka/horizon/overrides.py b/modules/openstack/files/mitaka/horizon/overrides.py
deleted file mode 100644
index 91df1ef..0000000
--- a/modules/openstack/files/mitaka/horizon/overrides.py
+++ /dev/null
@@ -1,180 +0,0 @@
-import socket
-from urlparse import urlparse
-
-from designatedashboard.dashboards.project.dns_domains import tables as ddtables
-from django.utils.translation import ugettext_lazy as _  # noqa
-from django.conf import settings
-from horizon import tables
-from openstack_dashboard.api import keystone
-
-#  --  Tidy up the instance creation panel  --
-
-from openstack_dashboard.dashboards.project.instances.workflows import create_instance
-#  Remove a couple of unwanted tabs from the instance creation panel:
-#   PostCreationStep just provides confusing competition with puppet.
-#   SetAdvanced provides broken features like configdrive and partitioning.
-
-create_instance.LaunchInstance.default_steps = (create_instance.SelectProjectUser,
-                                                create_instance.SetInstanceDetails,
-                                                create_instance.SetAccessControls,
-                                                create_instance.SetNetwork)
-
-
-# Disable the UpdateInstanceInfo tab.  All that supports is instance renaming, which is
-#  risky and breaks compatibility with wikitech.
-from openstack_dashboard.dashboards.project.instances.workflows import update_instance
-# Previously (UpdateInstanceInfo, UpdateInstanceSecurityGroups)
-update_instance.UpdateInstance.default_steps = (update_instance.UpdateInstanceSecurityGroups,)
-
-#  --  Support proxy records in the designate dashboard  --
-
-
-# In the designate dashboard, we have some records that are special
-#  and maanged by the proxy dashboard.  We need to remove the edit/delete
-#  buttons for those records and instead add a button that jumps to
-#  the proxy panel.
-
-PROXYIP = None
-
-
-def recordIsProxy(request, record):
-    global PROXYIP
-    if not PROXYIP:
-        # Leap of faith:  Assume the proxy-api host is also the proxy host.
-        #  So, get the proxy endpoint from keystone, convert to an IP,
-        #  and compare to 'record'
-
-        client = keystone.keystoneclient(request)
-        services = client.services.list()
-
-        proxyservices = [service for service in services if service.name == 'proxy']
-        endpoints = client.endpoints.list(service=proxyservices[0].id)
-        proxyurl = endpoints[0].url
-
-        parsed_uri = urlparse(proxyurl)
-        domain = parsed_uri.hostname
-        PROXYIP = socket.gethostbyname_ex(domain)[2][0]
-
-    return record.data == PROXYIP
-
-
-# Disable the 'edit' and 'delete' button for proxies...
-class EditRecord(ddtables.EditRecord):
-
-    def allowed(self, request, record=None):
-        if recordIsProxy(request, record):
-            return False
-        else:
-            return record.type in ddtables.EDITABLE_RECORD_TYPES
-
-
-class DeleteRecord(ddtables.DeleteRecord):
-
-    def allowed(self, request, record=None):
-        if recordIsProxy(request, record):
-            return False
-        else:
-            return record.type in ddtables.EDITABLE_RECORD_TYPES
-
-
-# And put an 'edit proxies' button in their place
-class EditProxies(tables.LinkAction):
-    '''Link action for a record created by the dynamic proxy panel.'''
-    name = "edit_proxies"
-    verbose_name = _("Edit Proxies")
-    classes = ("btn-edit")
-    policy_rules = (("dns", "update_record"),)
-
-    def get_link_url(self, datum=None):
-        return "/project/proxy"
-
-    def allowed(self, request, record=None):
-        return recordIsProxy(request, record)
-
-
-class RecordsTableWithProxies(ddtables.RecordsTable):
-
-    class Meta(object):
-        name = "records"
-        verbose_name = _("Records")
-        table_actions = (ddtables.CreateRecord,)
-        row_actions = (EditRecord, DeleteRecord, EditProxies)
-        multi_select = False
-
-
-ddtables.RecordsTable = RecordsTableWithProxies
-
-
-#  --  Fix a bug in quota calculations, T142379 --
-from openstack_dashboard.api import base
-from openstack_dashboard.api import nova
-from horizon import exceptions
-
-
-def _get_tenant_compute_usages_fixed(request, usages, disabled_quotas, tenant_id):
-    # Unlike the other services it can be the case that nova is enabled but
-    # doesn't support quotas, in which case we still want to get usage info,
-    # so don't rely on '"instances" in disabled_quotas' as elsewhere
-    if not base.is_service_enabled(request, 'compute'):
-        return
-
-    if tenant_id:
-        # determine if the user has permission to view across projects
-        # there are cases where an administrator wants to check the quotas
-        # on a project they are not scoped to
-        instances, has_more = nova.server_list(
-            request, search_opts={'tenant_id': tenant_id})
-    else:
-        instances, has_more = nova.server_list(request)
-
-    # Fetch deleted flavors if necessary.
-    flavors = dict([(f.id, f) for f in nova.flavor_list(request)])
-    missing_flavors = [instance.flavor['id'] for instance in instances
-                       if instance.flavor['id'] not in flavors]
-    for missing in missing_flavors:
-        if missing not in flavors:
-            try:
-                flavors[missing] = nova.flavor_get(request, missing)
-            except Exception:
-                flavors[missing] = {}
-                exceptions.handle(request, ignore=True)
-
-    usages.tally('instances', len(instances))
-
-    # Sum our usage based on the flavors of the instances.
-    for flavor in [flavors[instance.flavor['id']] for instance in instances]:
-        usages.tally('cores', getattr(flavor, 'vcpus', None))
-        usages.tally('ram', getattr(flavor, 'ram', None))
-
-    # Initialize the tally if no instances have been launched yet
-    if len(instances) == 0:
-        usages.tally('cores', 0)
-        usages.tally('ram', 0)
-
-
-from openstack_dashboard.usage import quotas
-quotas._get_tenant_compute_usages = _get_tenant_compute_usages_fixed
-
-
-# Backport a fix which evaulates policy rules improperly
-# https://bugs.launchpad.net/horizon/+bug/1653792
-def _can_access_fixed(self, request):
-    policy_check = getattr(settings, "POLICY_CHECK_FUNCTION", None)
-
-    # this check is an OR check rather than an AND check that is the
-    # default in the policy engine, so calling each rule individually
-    if policy_check and self.policy_rules:
-        for rule in self.policy_rules:
-            rule_param = rule
-            if not any(isinstance(r, (list, tuple)) for r in rule):
-                rule_param = (rule,)
-            if policy_check(rule_param, request):
-                return True
-        return False
-
-    # default to allowed
-    return True
-
-
-from horizon import base as horizonbase
-horizonbase.HorizonComponent._can_access = _can_access_fixed
diff --git a/modules/openstack/files/mitaka/horizon/proxy/__init__.py b/modules/openstack/files/mitaka/horizon/proxy/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/modules/openstack/files/mitaka/horizon/proxy/panel.py b/modules/openstack/files/mitaka/horizon/proxy/panel.py
deleted file mode 100644
index b128a67..0000000
--- a/modules/openstack/files/mitaka/horizon/proxy/panel.py
+++ /dev/null
@@ -1,20 +0,0 @@
-# Licensed under the Apache License, Version 2.0 (the "License"); you may
-# not use this file except in compliance with the License. You may obtain
-# a copy of the License at
-#
-#      http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-# License for the specific language governing permissions and limitations
-# under the License.
-
-from django.utils.translation import ugettext_lazy as _
-import horizon
-
-
-class Proxy(horizon.Panel):
-    name = _("Web Proxies")
-    slug = "proxy"
-    policy_rules = (("dns", "get_records"),)
diff --git a/modules/openstack/files/mitaka/horizon/proxy/templates/proxy/_create.html b/modules/openstack/files/mitaka/horizon/proxy/templates/proxy/_create.html
deleted file mode 100644
index cb8b11a..0000000
--- a/modules/openstack/files/mitaka/horizon/proxy/templates/proxy/_create.html
+++ /dev/null
@@ -1,12 +0,0 @@
-{% extends "horizon/common/_modal_form.html" %}
-{% load i18n %}
-
-{% block form_attrs %}enctype="multipart/form-data"{% endblock %}
-
-
-{% block modal-body-right %}
-  <h3>{% trans "Description:" %}</h3>
-  <p>
-     {% trans "A <a href='https://wikitech.wikimedia.org/wiki/Help:Proxy'>web proxy</a> will relay web traffic from the specified hostname to the backend instance.  The proxy will also provide ssl termination." %}
-  </p>
-{% endblock %}
diff --git a/modules/openstack/files/mitaka/horizon/proxy/templates/proxy/create.html b/modules/openstack/files/mitaka/horizon/proxy/templates/proxy/create.html
deleted file mode 100644
index 52c987d..0000000
--- a/modules/openstack/files/mitaka/horizon/proxy/templates/proxy/create.html
+++ /dev/null
@@ -1,8 +0,0 @@
-{% extends 'base.html' %}
-{% load i18n %}
-{% block title %}{% trans "Create A Proxy" %}{% endblock %}
-
-{% block main %}
-  {% include 'project/proxy/_create.html' %}
-{% endblock %}
-
diff --git a/modules/openstack/files/mitaka/horizon/proxy/templates/proxy/index.html b/modules/openstack/files/mitaka/horizon/proxy/templates/proxy/index.html
deleted file mode 100644
index 788a093..0000000
--- a/modules/openstack/files/mitaka/horizon/proxy/templates/proxy/index.html
+++ /dev/null
@@ -1,13 +0,0 @@
-{% extends 'base.html' %}
-{% load i18n %}
-{% block title %}{% trans "Proxy" %}{% endblock %}
-
-{% block page_header %}
-  {% include "horizon/common/_page_header.html" with title=_("Proxy") %}
-{% endblock page_header %}
-
-{% block main %}
-  {{ table.render }}
-{% endblock %}
-
-
diff --git a/modules/openstack/files/mitaka/horizon/proxy/urls.py b/modules/openstack/files/mitaka/horizon/proxy/urls.py
deleted file mode 100644
index e39bfa8..0000000
--- a/modules/openstack/files/mitaka/horizon/proxy/urls.py
+++ /dev/null
@@ -1,21 +0,0 @@
-# Licensed under the Apache License, Version 2.0 (the "License"); you may
-# not use this file except in compliance with the License. You may obtain
-# a copy of the License at
-#
-#      http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-# License for the specific language governing permissions and limitations
-# under the License.
-
-from django.conf.urls import url
-
-from wikimediaproxydashboard import views
-
-
-urlpatterns = [
-    url(r'^$', views.IndexView.as_view(), name='index'),
-    url(r'^create/$', views.CreateView.as_view(), name='create'),
-]
diff --git a/modules/openstack/files/mitaka/horizon/proxy/views.py b/modules/openstack/files/mitaka/horizon/proxy/views.py
deleted file mode 100644
index d308a41..0000000
--- a/modules/openstack/files/mitaka/horizon/proxy/views.py
+++ /dev/null
@@ -1,307 +0,0 @@
-# Licensed under the Apache License, Version 2.0 (the "License"); you may
-# not use this file except in compliance with the License. You may obtain
-# a copy of the License at
-#
-#      http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-# License for the specific language governing permissions and limitations
-# under the License.
-
-import logging
-
-from django.conf import settings
-from django.core.urlresolvers import reverse_lazy
-from django.utils.translation import ungettext_lazy
-from django.utils.translation import ugettext_lazy as _
-
-from django.forms import TextInput
-
-from horizon import exceptions
-from horizon import forms
-from horizon import tables
-
-from openstack_dashboard.api import base, nova
-
-# Designate v1 API, for normal use
-import designatedashboard.api.designate as designateapi
-from designateclient.v1.records import Record
-
-# Designate v2 API, currently only for wmflabs.org
-from keystoneclient.auth.identity import generic as identity_generic
-from keystoneclient import session as keystone_session
-from designateclient.v2 import client as designateclientv2
-
-import json
-import requests
-import socket
-import urlparse
-
-LOG = logging.getLogger(__name__)
-
-
-class CreateProxy(tables.LinkAction):
-    name = "create"
-    verbose_name = _("Create Proxy")
-    url = "horizon:project:proxy:create"
-    classes = ("ajax-modal",)
-    icon = "plus"
-    policy_rules = (("dns", "create_record"),)
-
-
-class DeleteProxy(tables.DeleteAction):
-
-    @staticmethod
-    def action_present(count):
-        return ungettext_lazy(u"Delete Proxy", u"Delete Proxies", count)
-
-    @staticmethod
-    def action_past(count):
-        return ungettext_lazy(u"Deleted Proxy", u"Deleted Proxies", count)
-
-    policy_rules = (("dns", "delete_record"),)
-
-    def delete(self, request, obj_id):
-        record = obj_id[:obj_id.find('.')]
-        domain = obj_id[obj_id.find('.') + 1:]
-        if not domain.endswith('.'):
-            domain += '.'
-
-        # First let's make sure that this proxy is really ours to delete.
-        existing_domains = [proxy.domain for proxy in get_proxy_list(request)]
-        if obj_id not in existing_domains:
-            raise Exception(
-                "Proxy \'%s\' is to be deleted but is not owned by this view." % obj_id)
-
-        if domain == 'wmflabs.org.':
-            auth = identity_generic.Password(
-                auth_url=base.url_for(request, 'identity'),
-                username=getattr(settings, "WMFLABSDOTORG_ADMIN_USERNAME", ''),
-                password=getattr(settings, "WMFLABSDOTORG_ADMIN_PASSWORD", ''),
-                tenant_name='wmflabsdotorg',
-                user_domain_id='default',
-                project_domain_id='default'
-            )
-            c = designateclientv2.Client(session=keystone_session.Session(auth=auth))
-
-            # Delete the record from the wmflabsdotorg project. This is needed
-            # since wmflabs.org lives in that project and designate (quite
-            # reasonably) prevents subdomain deletion elsewhere.
-            zoneid = None
-            for zone in c.zones.list():
-                if zone['name'] == 'wmflabs.org.':
-                    zoneid = zone['id']
-                    break
-            else:
-                raise Exception("No zone ID")
-            recordsetid = None
-            for recordset in c.recordsets.list(zoneid):
-                if recordset['type'] == 'A' and recordset['name'] == record + '.' + domain:
-                    recordsetid = recordset['id']
-                    break
-            else:
-                raise Exception("No recordset ID")
-            c.recordsets.delete(zoneid, recordsetid)
-        else:
-            c = designateapi.designateclient(request)
-            domainid = None
-            for d in c.domains.list():
-                if d.name == domain:
-                    domainid = d.id
-                    break
-            else:
-                LOG.warn('Woops! Failed domain ID for domain ' + domain)
-                raise Exception("No domain ID")
-            recordid = None
-            for r in c.records.list(domainid):
-                if r.name == obj_id and r.type == 'A':
-                    recordid = r.id
-                    break
-            else:
-                LOG.warn('Woops! Failed record ID for record ' + record)
-                raise Exception("No record ID")
-
-            c.records.delete(domainid, recordid)
-
-        resp = requests.delete(base.url_for(request, 'proxy') + '/mapping/' + obj_id)
-        if not resp:
-            raise Exception("Got status " + resp.status_code)
-
-
-def get_proxy_backends(proxy):
-    return ', '.join(proxy.backends)
-
-
-class ProxyTable(tables.DataTable):
-    domain = tables.Column("domain", verbose_name=_("DNS Hostname"),)
-    backends = tables.Column(get_proxy_backends, verbose_name=_("Backends"))
-
-    class Meta(object):
-        name = "proxies"
-        verbose_name = _("Proxies")
-        table_actions = (CreateProxy,)
-        row_actions = (DeleteProxy,)
-
-
-class Proxy():
-
-    def __init__(self, domain, backends):
-        self.id = self.domain = domain
-        self.backends = backends
-
-
-def get_proxy_list(request):
-    try:
-        url = base.url_for(request, 'proxy') + '/mapping'
-        resp = requests.get(url)
-        if resp.status_code == 400 and resp.text == 'No such project':
-            proxies = []
-        elif not resp:
-            raise Exception("Got status " + str(resp.status_code))
-        else:
-            proxies = [
-                Proxy(route['domain'], route['backends'])
-                for route in resp.json()['routes']]
-    except Exception:
-        proxies = []
-        exceptions.handle(request, _("Unable to retrieve proxies from %s") % url)
-    return proxies
-
-
-class IndexView(tables.DataTableView):
-    table_class = ProxyTable
-    template_name = 'project/proxy/index.html'
-    page_title = _("Proxies")
-
-    def get_data(self):
-        return get_proxy_list(self.request)
-
-
-class CreateProxyForm(forms.SelfHandlingForm):
-    record = forms.RegexField(
-        max_length=255, label=_("Hostname"),
-        regex="^([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])$",
-        error_messages={
-            "invalid": "This must be a simple hostname without dots or special characters."
-        })
-    domain = forms.ChoiceField(widget=forms.Select(), label=_("Domain"))
-    backendInstance = forms.ChoiceField(widget=forms.Select(), label=_("Backend instance"))
-    backendPort = forms.CharField(
-        widget=TextInput(
-            attrs={
-                'type': 'number'}),
-        label=_("Backend port"))
-
-    def __init__(self, request, *args, **kwargs):
-        kwargs['initial']['backendPort'] = 80
-        super(CreateProxyForm, self).__init__(request, *args, **kwargs)
-        self.fields['backendInstance'].choices = self.populate_instances(request)
-        self.fields['domain'].choices = self.populate_domains(request)
-
-    def populate_instances(self, request):
-        results = [(None, 'Select an instance')]
-        for server in nova.novaclient(request).servers.list():
-            results.append((server.networks['public'][0], server.name))
-        return results
-
-    def populate_domains(self, request):
-        results = [('wmflabs.org.', 'wmflabs.org.')]
-        # results = [(None, 'Select a domain'), ('wmflabs.org.', 'wmflabs.org.')]
-        # for domain in designateapi.designateclient(request).domains.list():
-        # results.append((domain.name, domain.name))
-        return results
-
-    def clean(self):
-        cleaned_data = super(CreateProxyForm, self).clean()
-
-        # TODO: More useful error if domain is invalid? Currently we rely on
-        # designate schema check failing
-
-        if not cleaned_data['backendPort'].isdigit() or int(cleaned_data['backendPort']) > 65535:
-            self._errors['backendPort'] = self.error_class([_('Enter a valid port')])
-
-        return cleaned_data
-
-    def handle(self, request, data):
-        proxyip = socket.gethostbyname(urlparse.urlparse(base.url_for(request, 'proxy')).hostname)
-        if data.get('domain') == 'wmflabs.org.':
-            auth = identity_generic.Password(
-                auth_url=base.url_for(request, 'identity'),
-                username=getattr(settings, "WMFLABSDOTORG_ADMIN_USERNAME", ''),
-                password=getattr(settings, "WMFLABSDOTORG_ADMIN_PASSWORD", ''),
-                tenant_name='wmflabsdotorg',
-                user_domain_id='default',
-                project_domain_id='default'
-            )
-            c = designateclientv2.Client(session=keystone_session.Session(auth=auth))
-
-            LOG.warn('Got create client')
-            # Create the record in the wmflabsdotorg project. This is needed
-            # since wmflabs.org lives in that project and designate prevents
-            # subdomain creation elsewhere.
-            zoneid = None
-            for zone in c.zones.list():
-                if zone['name'] == 'wmflabs.org.':
-                    zoneid = zone['id']
-                    break
-            else:
-                raise Exception("No zone ID")
-            LOG.warn('Got zone ID')
-            c.recordsets.create(zoneid, data.get('record') + '.wmflabs.org.', 'A', [proxyip])
-        else:
-            # TODO: Move this to designate v2 API, reuse some code
-            c = designateapi.designateclient(request)
-            domainid = None
-            for domain in c.domains.list():
-                if domain.name == data.get('domain'):
-                    domainid = domain.id
-                    break
-            else:
-                raise Exception("No domain ID")
-            record = Record(
-                name=data.get('record') +
-                '.' +
-                data.get('domain'),
-                type='A',
-                data=proxyip)
-            c.records.create(domainid, record)
-
-        d = {
-            "backends": ['http://%s:%s' % (
-                data.get('backendInstance'),
-                data.get('backendPort')
-            )],
-            "domain": data.get('record') + '.' + data.get('domain').rstrip('.')
-        }
-
-        try:
-            resp = requests.put(base.url_for(request, 'proxy') + '/mapping', data=json.dumps(d))
-            if resp:
-                return True
-            else:
-                raise Exception("Got status: " + resp.status_code)
-        except Exception:
-            exceptions.handle(self.request, _("Unable to create proxy: " + resp.text))
-            return False
-
-
-class CreateView(forms.ModalFormView):
-    form_class = CreateProxyForm
-    form_id = "create_proxy_form"
-    modal_header = _("Create a Proxy")
-    submit_label = _("Create Proxy")
-    submit_url = reverse_lazy('horizon:project:proxy:create')
-    template_name = 'project/proxy/create.html'
-    context_object_name = 'proxy'
-    success_url = reverse_lazy("horizon:project:proxy:index")
-    page_title = _("Create a Proxy")
-
-    def get_initial(self):
-        initial = {}
-        for name in ['record', 'domain', 'backendInstance', 'backendPort']:
-            tmp = self.request.GET.get(name)
-            if tmp:
-                initial[name] = tmp
-        return initial
diff --git a/modules/openstack/files/mitaka/horizon/proxy_enable.py b/modules/openstack/files/mitaka/horizon/proxy_enable.py
deleted file mode 100644
index 4bed1d3..0000000
--- a/modules/openstack/files/mitaka/horizon/proxy_enable.py
+++ /dev/null
@@ -1,4 +0,0 @@
-PANEL = 'proxy'
-PANEL_GROUP = 'dns'
-PANEL_DASHBOARD = 'project'
-ADD_PANEL = ('wikimediaproxydashboard.panel.Proxy')
diff --git a/modules/openstack/files/mitaka/horizon/puppet_group_add.py b/modules/openstack/files/mitaka/horizon/puppet_group_add.py
deleted file mode 100644
index 67f27b7..0000000
--- a/modules/openstack/files/mitaka/horizon/puppet_group_add.py
+++ /dev/null
@@ -1,6 +0,0 @@
-# The name of the panel group to be added to HORIZON_CONFIG. Required.
-PANEL_GROUP = 'puppet'
-# The display name of the PANEL_GROUP. Required.
-PANEL_GROUP_NAME = 'Puppet'
-# The name of the dashboard the PANEL_GROUP associated with. Required.
-PANEL_GROUP_DASHBOARD = 'project'
diff --git a/modules/openstack/files/mitaka/horizon/puppet_prefix_tab_enable.py b/modules/openstack/files/mitaka/horizon/puppet_prefix_tab_enable.py
deleted file mode 100644
index 4764131..0000000
--- a/modules/openstack/files/mitaka/horizon/puppet_prefix_tab_enable.py
+++ /dev/null
@@ -1,5 +0,0 @@
-PANEL = 'prefixpuppetpanel'
-PANEL_GROUP = 'puppet'
-PANEL_DASHBOARD = 'project'
-ADD_PANEL = ('wikimediapuppettab.prefixpanel.prefixpanel.PrefixPuppetPanel')
-AUTO_DISCOVER_STATIC_FILES = True
diff --git a/modules/openstack/files/mitaka/horizon/puppet_tab_enable.py b/modules/openstack/files/mitaka/horizon/puppet_tab_enable.py
deleted file mode 100644
index a2d62ed..0000000
--- a/modules/openstack/files/mitaka/horizon/puppet_tab_enable.py
+++ /dev/null
@@ -1,7 +0,0 @@
-PANEL = 'projectpuppetpanel'
-PANEL_GROUP = 'puppet'
-PANEL_DASHBOARD = 'project'
-ADD_PANEL = ('wikimediapuppettab.projectpanel.ProjectPuppetPanel')
-ADD_INSTALLED_APPS = ['wikimediapuppettab']
-AUTO_DISCOVER_STATIC_FILES = True
-ADD_SCSS_FILES = ['dashboard/puppet/puppet.scss']
diff --git a/modules/openstack/files/mitaka/horizon/puppettab/__init__.py b/modules/openstack/files/mitaka/horizon/puppettab/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/modules/openstack/files/mitaka/horizon/puppettab/prefixpanel/__init__.py b/modules/openstack/files/mitaka/horizon/puppettab/prefixpanel/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/modules/openstack/files/mitaka/horizon/puppettab/prefixpanel/plustab.py b/modules/openstack/files/mitaka/horizon/puppettab/prefixpanel/plustab.py
deleted file mode 100644
index 73b1776..0000000
--- a/modules/openstack/files/mitaka/horizon/puppettab/prefixpanel/plustab.py
+++ /dev/null
@@ -1,64 +0,0 @@
-# Copyright (c) 2016 Andrew Bogott for Wikimedia Foundation
-# All Rights Reserved.
-#
-#    Licensed under the Apache License, Version 2.0 (the "License"); you may
-#    not use this file except in compliance with the License. You may obtain
-#    a copy of the License at
-#
-#         http://www.apache.org/licenses/LICENSE-2.0
-#
-#    Unless required by applicable law or agreed to in writing, software
-#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-#    License for the specific language governing permissions and limitations
-#    under the License.
-
-import logging
-import re
-
-from django import template
-from django.template.loader import render_to_string
-from django.utils.translation import ugettext_lazy as _
-
-from wikimediapuppettab.puppet_config import puppet_config
-
-from horizon import exceptions
-from horizon import tabs
-
-logging.basicConfig()
-LOG = logging.getLogger(__name__)
-
-
-class PlusTab(tabs.Tab):
-    name = _("+")
-    slug = "puppetprefixplus"
-    template_name = "project/puppet/plus_tab.html"
-    prefix_name = False
-
-    def __init__(self, *args, **kwargs):
-        if 'tenant_id' in kwargs:
-            self.tenant_id = kwargs['tenant_id']
-            del kwargs['tenant_id']
-
-        super(PlusTab, self).__init__(*args, **kwargs)
-
-    def render(self):
-        context = template.RequestContext(self.request)
-        context['prefix_name'] = self.prefix_name
-        return render_to_string(self.get_template_name(self.request),
-                                self.data, context_instance=context)
-
-    def post(self, request, *args, **kwargs):
-
-        pattern = re.compile("^[A-Za-z][A-Za-z0-9_-]*$")
-        if not pattern.match(request.POST["prefix_name"]):
-            raise exceptions.BadRequest('Prefix must begin with a '
-                                        'letter and contain only letters, '
-                                        'numbers, _ or -.')
-
-        self.prefix_name = request.POST["prefix_name"]
-
-        # set an empty role list for this prefix, to force a
-        #  record creation on the back end.
-        config = puppet_config(self.prefix_name, self.tenant_id)
-        config.set_role_list([])
diff --git a/modules/openstack/files/mitaka/horizon/puppettab/prefixpanel/prefixpanel.py b/modules/openstack/files/mitaka/horizon/puppettab/prefixpanel/prefixpanel.py
deleted file mode 100644
index 40b2fd6..0000000
--- a/modules/openstack/files/mitaka/horizon/puppettab/prefixpanel/prefixpanel.py
+++ /dev/null
@@ -1,91 +0,0 @@
-# Copyright (c) 2016 Andrew Bogott for Wikimedia Foundation
-# All Rights Reserved.
-#
-#    Licensed under the Apache License, Version 2.0 (the "License"); you may
-#    not use this file except in compliance with the License. You may obtain
-#    a copy of the License at
-#
-#         http://www.apache.org/licenses/LICENSE-2.0
-#
-#    Unless required by applicable law or agreed to in writing, software
-#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-#    License for the specific language governing permissions and limitations
-#    under the License.
-
-
-from collections import OrderedDict
-from django.utils.translation import ugettext_lazy as _
-import horizon
-import logging
-
-from horizon import tabs
-from horizon.tabs import TabGroup
-
-from wikimediapuppettab.tab import PuppetTab
-from wikimediapuppettab.prefixpanel.plustab import PlusTab
-from wikimediapuppettab.puppet_config import puppet_config
-
-logging.basicConfig()
-LOG = logging.getLogger(__name__)
-
-
-class PrefixPuppetPanel(horizon.Panel):
-    name = _("Prefix Puppet")
-    slug = "prefixpuppet"
-
-
-class PrefixTabs(tabs.TabGroup):
-    slug = "prefix_puppet"
-    sticky = False
-
-    def __init__(self, request, **kwargs):
-        super(TabGroup, self).__init__()
-
-        self.request = request
-        self.kwargs = kwargs
-        self._data = None
-        self.request = request
-
-        self.tenant_id = self.request.user.tenant_id
-        self._tabs = OrderedDict(self.get_dynamic_tab_list())
-        if self.sticky:
-            self.attrs['data-sticky-tabs'] = 'sticky'
-        if not self._set_active_tab():
-            self.tabs_not_available()
-
-    def get_dynamic_tab_list(self):
-        prefixlist = puppet_config.get_prefixes(self.tenant_id)
-        LOG.warning("prefixlist: %s" % prefixlist)
-
-        tab_instances = []
-        # One tab per prefix
-        for prefix in prefixlist:
-            # exclude anything with a '.' as those are instance names
-            #  handled on a different UI
-            if '.' in prefix:
-                continue
-            if prefix == '_':
-                continue
-            tab_instances.append(("puppet-%s" % prefix,
-                                  PuppetTab(self,
-                                            self.request,
-                                            prefix=prefix,
-                                            tenant_id=self.tenant_id)))
-
-        # + tab
-        tab_instances.append(('puppetprefixplus',
-                              PlusTab(self, self.request,
-                                      tenant_id=self.tenant_id)))
-        return tab_instances
-
-    def load_tab_data(self):
-        # This ensures that the tab list is updated without
-        #  having to rebuild the whole object.
-        self._tabs = OrderedDict(self.get_dynamic_tab_list())
-
-
-class IndexView(tabs.TabbedTableView):
-    tab_group_class = PrefixTabs
-    template_name = 'project/puppet/prefix_panel.html'
-    page_title = _("Prefix Puppet")
diff --git a/modules/openstack/files/mitaka/horizon/puppettab/prefixpanel/urls.py b/modules/openstack/files/mitaka/horizon/puppettab/prefixpanel/urls.py
deleted file mode 100644
index 7786188..0000000
--- a/modules/openstack/files/mitaka/horizon/puppettab/prefixpanel/urls.py
+++ /dev/null
@@ -1,38 +0,0 @@
-# Copyright (c) 2016 Andrew Bogott for Wikimedia Foundation
-# All Rights Reserved.
-#
-#    Licensed under the Apache License, Version 2.0 (the "License"); you may
-#    not use this file except in compliance with the License. You may obtain
-#    a copy of the License at
-#
-#         http://www.apache.org/licenses/LICENSE-2.0
-#
-#    Unless required by applicable law or agreed to in writing, software
-#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-#    License for the specific language governing permissions and limitations
-#    under the License.
-from django.conf.urls import url, patterns
-
-from wikimediapuppettab.prefixpanel import prefixpanel
-from wikimediapuppettab import views
-
-urlpatterns = patterns(
-    '',
-    url(r'^$', prefixpanel.IndexView.as_view(), name='index'),
-    url(r'^(?P<prefix>[^/]+)/(?P<tenantid>[^/]+)/'
-        '(?P<roleid>[^/]+)/applypuppetrole$',
-        views.ApplyRoleView.as_view(), name='applypuppetrole'),
-    url(r'^(?P<prefix>[^/]+)/(?P<tenantid>[^/]+)/'
-        '(?P<roleid>[^/]+)/removepuppetrole$',
-        views.RemoveRoleView.as_view(), name='removepuppetrole'),
-    url(r'^(?P<prefix>[^/]+)/(?P<tenantid>[^/]+)/'
-        'edithiera$',
-        views.EditHieraView.as_view(), name='edithiera'),
-    url(r'^(?P<tenantid>[^/]+)/'
-        'newprefix$',
-        prefixpanel.IndexView.as_view(), name='newprefix'),
-    url(r'^(?P<prefix>[^/]+)/(?P<tenantid>[^/]+)/'
-        'removepuppetprefix$',
-        views.RemovePrefixView.as_view(), name='removepuppetprefix'),
-)
diff --git a/modules/openstack/files/mitaka/horizon/puppettab/projectpanel.py b/modules/openstack/files/mitaka/horizon/puppettab/projectpanel.py
deleted file mode 100644
index 97cca49..0000000
--- a/modules/openstack/files/mitaka/horizon/puppettab/projectpanel.py
+++ /dev/null
@@ -1,63 +0,0 @@
-# Copyright (c) 2016 Andrew Bogott for Wikimedia Foundation
-# All Rights Reserved.
-#
-#    Licensed under the Apache License, Version 2.0 (the "License"); you may
-#    not use this file except in compliance with the License. You may obtain
-#    a copy of the License at
-#
-#         http://www.apache.org/licenses/LICENSE-2.0
-#
-#    Unless required by applicable law or agreed to in writing, software
-#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-#    License for the specific language governing permissions and limitations
-#    under the License.
-
-import logging
-
-from django.utils.translation import ugettext_lazy as _
-import horizon
-
-from horizon import tabs
-
-import openstack_dashboard.dashboards.project.instances.tabs as instancetabs
-from wikimediapuppettab.tab import PuppetTab
-
-logging.basicConfig()
-LOG = logging.getLogger(__name__)
-
-
-class ProjectPuppetPanel(horizon.Panel):
-    name = _("Project Puppet")
-    slug = "puppet"
-
-    @staticmethod
-    def can_register():
-        # Hacky hook
-        #  While we're here, add tabs to the instance detail view as well
-        instancetabs.InstanceDetailTabs.tabs += (PuppetTab,)
-        return True
-
-
-class ProjectTabs(tabs.TabGroup):
-    slug = "project_puppet"
-    tabs = (PuppetTab, )
-    sticky = True
-
-
-class IndexView(tabs.TabbedTableView):
-    tab_group_class = ProjectTabs
-    template_name = 'project/puppet/project_panel.html'
-    page_title = _("Project Puppet")
-
-    def get_tabs(self, request, *args, **kwargs):
-        if self._tab_group is None:
-            tenant_id = self.request.user.tenant_id
-            caption = _("These puppet settings will affect all VMs"
-                        " in the %s project.") % tenant_id
-            self._tab_group = self.tab_group_class(request,
-                                                   prefix='_',
-                                                   caption=caption,
-                                                   tenant_id=tenant_id,
-                                                   **kwargs)
-        return self._tab_group
diff --git a/modules/openstack/files/mitaka/horizon/puppettab/puppet_config.py b/modules/openstack/files/mitaka/horizon/puppettab/puppet_config.py
deleted file mode 100644
index 7e2c5ca..0000000
--- a/modules/openstack/files/mitaka/horizon/puppettab/puppet_config.py
+++ /dev/null
@@ -1,208 +0,0 @@
-# Copyright (c) 2016 Andrew Bogott for Wikimedia Foundation
-# All Rights Reserved.
-#
-#    Licensed under the Apache License, Version 2.0 (the "License"); you may
-#    not use this file except in compliance with the License. You may obtain
-#    a copy of the License at
-#
-#         http://www.apache.org/licenses/LICENSE-2.0
-#
-#    Unless required by applicable law or agreed to in writing, software
-#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-#    License for the specific language governing permissions and limitations
-#    under the License.
-
-import logging
-import requests
-import puppet_roles
-import yaml
-
-from django.conf import settings
-
-logging.basicConfig()
-LOG = logging.getLogger(__name__)
-
-
-# Get/set puppet config for a given instance.
-#
-# This class manages all communication with the home-made puppet REST backend
-class puppet_config():
-    def __init__(self, prefix, tenant_id):
-        self.prefix = prefix
-        self.tenant_id = tenant_id
-        self.apiurl = getattr(settings,
-                              "PUPPET_CONFIG_BACKEND",
-                              "http://labcontrol1001.wikimedia.org:8101/v1"
-                              )
-        self.refresh()
-
-    def refresh(self):
-        classesurl = "%s/%s/prefix/%s/roles" % (self.apiurl,
-                                                self.tenant_id,
-                                                self.prefix)
-        req = requests.get(classesurl, verify=False)
-        if req.status_code == 404:
-            self.roles = []
-        else:
-            req.raise_for_status()
-            self.roles = yaml.safe_load(req.text)['roles']
-
-        hieraurl = "%s/%s/prefix/%s/hiera" % (self.apiurl,
-                                              self.tenant_id,
-                                              self.prefix)
-        req = requests.get(hieraurl, verify=False)
-        if req.status_code == 404:
-            # Missing is the same as empty
-            self.hiera_raw = "{}"
-        else:
-            req.raise_for_status()
-            self.hiera_raw = yaml.safe_load(req.text)['hiera']
-
-        hiera_yaml = yaml.safe_load(self.hiera_raw)
-        if not hiera_yaml:
-            hiera_yaml = {}
-        self.role_dict = {}
-
-        self.allroles = puppet_roles.available_roles()
-        allrole_dict = {role.name: role for role in self.allroles}
-
-        # other_classes is a list of roles that weren't enumerated by the puppet API.
-        #  These could be roles from a locally hacked puppet repo, or roles that have been
-        #  deleted from the puppet repo but still appear in the instance config.
-        self.other_classes = []
-
-        # Find the hiera lines that assign params to applied and known roles.
-        #  these lines are removed from the hiera text and added as
-        #  structured data to the role records instead.
-        for role in list(self.roles):
-            if role in allrole_dict:
-                self.role_dict[role] = {}
-                for key in hiera_yaml.keys():
-                    if key.startswith(role):
-                        # (len(role)+2) is the length of the rolename plus the ::,
-                        # getting us the raw param name
-                        argname = key[(len(role)+2):]
-                        if hiera_yaml[key]:
-                            self.role_dict[role][argname] = hiera_yaml[key]
-                            del hiera_yaml[key]
-                allrole_dict[role].mark_applied(self.role_dict[role])
-            elif role:
-                # This is an unknown role. Don't try to structure anything, just
-                #  add the rolename to the list and let hiera take care of the
-                #  params.
-                self.other_classes.append(role)
-                self.roles.remove(role)
-            else:
-                # Sometimes we get empty strings from crappy parsing
-                self.roles.remove(role)
-
-        self.other_classes_text = "\n".join(self.other_classes)
-
-        # Move the applied roles to the top for UI clarity
-        self.allroles.sort(key=lambda x: x.applied, reverse=True)
-
-        self.hiera = yaml.safe_dump(hiera_yaml, default_flow_style=False)
-
-    def remove_role(self, role):
-        if not self.roles:
-            LOG.error("Internal role list is empty, cannot remove")
-            # TODO throw an exception
-            return False
-
-        roles = self.roles
-
-        # Remove this role from our role list
-        roles.remove(role.name)
-
-        # Remove all related role args from hiera
-        hiera_yaml = yaml.safe_load(self.hiera_raw)
-        if hiera_yaml:
-            for key in hiera_yaml.keys():
-                if key.startswith("%s::" % role.name):
-                    del hiera_yaml[key]
-
-        self.set_role_list(roles)
-        self.set_hiera(hiera_yaml)
-
-    def apply_role(self, role, params):
-        if not self.roles:
-            # this is the first role, so build a fresh list
-            roles = [role.name]
-        else:
-            roles = list(self.roles)
-            if role.name not in roles:
-                roles.append(role.name)
-
-        # Translate the structured params and values
-        # into hiera yaml
-        hiera = yaml.safe_load(self.hiera_raw)
-        for param in params.keys():
-            fullparam = "%s::%s" % (role.name, param)
-            if fullparam in hiera:
-                if params[param]:
-                    hiera[fullparam] = params[param]
-                else:
-                    del hiera[fullparam]
-            else:
-                if params[param]:
-                    hiera[fullparam] = params[param]
-
-        self.set_role_list(roles)
-        self.set_hiera(hiera)
-
-    def set_roles(self, roles):
-        list_dump = yaml.safe_dump(roles, default_flow_style=False)
-        roleurl = "%s/%s/prefix/%s/roles" % (self.apiurl,
-                                             self.tenant_id,
-                                             self.prefix)
-        req = requests.post(roleurl,
-                            verify=False,
-                            data=list_dump,
-                            headers={'Content-Type': 'application/x-yaml'})
-        req.raise_for_status()
-        self.refresh()
-
-    def set_other_class_list(self, other_class_list):
-        self.set_roles(other_class_list + self.roles)
-
-    def set_role_list(self, role_list):
-        self.set_roles(role_list + self.other_classes)
-
-    def set_hiera(self, hiera_yaml):
-        if not hiera_yaml:
-            # The user probably cleared the field.  That's fine, we'll just
-            #  convert that to {}
-            hiera_yaml = {}
-        hiera_dump = yaml.safe_dump(hiera_yaml, default_flow_style=False)
-        hieraurl = "%s/%s/prefix/%s/hiera" % (self.apiurl,
-                                              self.tenant_id,
-                                              self.prefix)
-        req = requests.post(hieraurl,
-                            verify=False,
-                            data=hiera_dump,
-                            headers={'Content-Type': 'application/x-yaml'})
-        req.raise_for_status()
-        self.refresh()
-
-    @staticmethod
-    def delete_prefix(tenant_id, prefix):
-        apiurl = getattr(settings,
-                         "PUPPET_CONFIG_BACKEND",
-                         "http://labcontrol1001.wikimedia.org:8101/v1")
-        prefixurl = "%s/%s/prefix/%s" % (apiurl, tenant_id, prefix)
-        req = requests.delete(prefixurl, verify=False)
-        req.raise_for_status()
-
-    @staticmethod
-    def get_prefixes(tenant_id):
-        apiurl = getattr(settings,
-                         "PUPPET_CONFIG_BACKEND",
-                         "http://labcontrol1001.wikimedia.org:8101/v1")
-        prefixurl = "%s/%s/prefix" % (apiurl, tenant_id)
-        req = requests.get(prefixurl, verify=False)
-        if req.status_code == 404:
-            return []
-        else:
-            req.raise_for_status()
-        return yaml.safe_load(req.text)['prefixes']
diff --git a/modules/openstack/files/mitaka/horizon/puppettab/puppet_roles.py b/modules/openstack/files/mitaka/horizon/puppettab/puppet_roles.py
deleted file mode 100644
index 11c72a8..0000000
--- a/modules/openstack/files/mitaka/horizon/puppettab/puppet_roles.py
+++ /dev/null
@@ -1,144 +0,0 @@
-# Copyright (c) 2016 Andrew Bogott for Wikimedia Foundation
-# All Rights Reserved.
-#
-#    Licensed under the Apache License, Version 2.0 (the "License"); you may
-#    not use this file except in compliance with the License. You may obtain
-#    a copy of the License at
-#
-#         http://www.apache.org/licenses/LICENSE-2.0
-#
-#    Unless required by applicable law or agreed to in writing, software
-#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-#    License for the specific language governing permissions and limitations
-#    under the License.
-
-import logging
-import requests
-
-from django.conf import settings
-from django.core.cache import cache
-from django.utils.html import escape
-from django.utils.safestring import mark_safe
-from django.utils.translation import ugettext_lazy as _
-
-logging.basicConfig()
-LOG = logging.getLogger(__name__)
-
-
-# A single puppet class or role, used as the data type
-#  for our Horizon table-of-roles UI
-class PuppetClass():
-    name = None
-    html_name = ""
-    docs = ""
-    applied = False
-    params = []
-    formatted_params = ""
-    raw_params = {}
-    filter_tags = []
-    instance = None
-
-    def __init__(self, name):
-        self.name = name
-        self.html_name = ""
-        self.docs = _('(No docs available)')
-        self.applied = False
-        self.params = []
-        self.formatted_params = ""
-        self.raw_params = {}
-        self.filter_tags = []
-        self.instance = None
-
-    def update_prefix_data(self, prefix, tenant_id):
-        self.prefix = prefix
-        self.tenant_id = tenant_id
-        return self
-
-    def mark_applied(self, paramdict):
-        self.applied = True
-        self.params = paramdict
-        if paramdict:
-            keysanddefaults = []
-            for param in self.params.items():
-                keysanddefaults.append("%s: %s" % param)
-            self.formatted_params = ";\n".join(keysanddefaults)
-
-        return self
-
-
-# Query the puppetmaster for a list of all available roles,
-#  build a list of PuppetClass() objects out of those roles.
-#
-# This list should be fairly static and building it is
-#  expensive, so it's cached in memcache.  Local copies
-#  of this list will get altered with runtime data (e.g.
-#  tenant and instance information) but the cached version
-#  should remain useful universally.
-def available_roles():
-    key = 'wikimediapuppet_available_roles'
-    roles = cache.get(key)
-    if not roles:
-        apiurl = getattr(settings,
-                         "PUPPETMASTER_API",
-                         "https://labcontrol1001.wikimedia.org:8140/puppet"
-                         )
-        roleurl = "%s/resource_types/role" % apiurl
-        req = requests.get(roleurl, verify=False)
-        req.raise_for_status()
-        roleres = req.json()
-
-        profileurl = "%s/resource_types/profile" % apiurl
-        req = requests.get(profileurl, verify=False)
-        req.raise_for_status()
-        profileres = req.json()
-
-        res = roleres + profileres
-
-        roles = []
-        for role in res:
-            if role['kind'] != 'class':
-                continue
-            obj = PuppetClass(role['name'])
-            if 'doc' in role:
-                obj.docs = role['doc']
-            if 'parameters' in role:
-                obj.params = role['parameters']
-                obj.raw_params = role['parameters']
-                keysanddefaults = []
-                for param in obj.params.items():
-                    keysanddefaults.append("%s: %s" % param)
-                obj.formatted_params = ";\n".join(keysanddefaults)
-
-            if 'doc' in role and (role['doc'].find('filtertags') != -1):
-                #  Collect filter tags from the role comment,
-                #  and generate 'newdoc' which is the docs without
-                #  the filter line.
-                newdoc = ""
-                for line in role['doc'].splitlines():
-                    n = line.find('filtertags')
-                    if n != -1:
-                        obj.filter_tags = line[(n+11):].split()
-                    else:
-                        newdoc += "%s\n" % line
-                obj.docs = newdoc
-
-            html = '<span title="%s">%s</>' % (
-                escape(obj.docs),
-                escape(obj.name)
-            )
-            obj.html_name = mark_safe(html)
-
-            roles.append(obj)
-
-        cache.set(key, roles, 300)
-
-    return roles
-
-
-def get_role_by_name(name):
-    allRoles = available_roles()
-    for role in allRoles:
-        if role.name == name:
-            return role
-    return None
diff --git a/modules/openstack/files/mitaka/horizon/puppettab/puppet_tables.py b/modules/openstack/files/mitaka/horizon/puppettab/puppet_tables.py
deleted file mode 100644
index 8f641c7..0000000
--- a/modules/openstack/files/mitaka/horizon/puppettab/puppet_tables.py
+++ /dev/null
@@ -1,137 +0,0 @@
-# Copyright (c) 2016 Andrew Bogott for Wikimedia Foundation
-# All Rights Reserved.
-#
-#    Licensed under the Apache License, Version 2.0 (the "License"); you may
-#    not use this file except in compliance with the License. You may obtain
-#    a copy of the License at
-#
-#         http://www.apache.org/licenses/LICENSE-2.0
-#
-#    Unless required by applicable law or agreed to in writing, software
-#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-#    License for the specific language governing permissions and limitations
-#    under the License.
-
-from collections import defaultdict
-import logging
-
-from django.core import urlresolvers
-from django.utils.translation import ugettext_lazy as _
-
-from horizon import tables
-
-logging.basicConfig()
-LOG = logging.getLogger(__name__)
-
-
-class RemoveRole(tables.LinkAction):
-    name = 'remove'
-    verbose_name = _("Remove Class")
-    classes = ("ajax-modal",)
-    data_type_singular = _("Role")
-
-    policy_rules = (("compute", "compute:delete"),)
-
-    def get_link_url(self, datum):
-        url = "horizon:project:puppet:removepuppetrole"
-        kwargs = {
-            'prefix': datum.prefix,
-            'tenantid': datum.tenant_id,
-            'roleid': datum.name,
-        }
-        return urlresolvers.reverse(url, kwargs=kwargs)
-
-    def allowed(self, request, record=None):
-        return record.applied
-
-
-class ApplyRole(tables.LinkAction):
-    name = 'apply_role'
-    verbose_name = _("Apply Class")
-    classes = ("ajax-modal",)
-    icon = "plus"
-    policy_rules = (("compute", "compute:delete"),)
-
-    def get_link_url(self, datum):
-        url = "horizon:project:puppet:applypuppetrole"
-        kwargs = {
-            'prefix': datum.prefix,
-            'tenantid': datum.tenant_id,
-            'roleid': datum.name,
-        }
-        return urlresolvers.reverse(url, kwargs=kwargs)
-
-    def allowed(self, request, record=None):
-        return (not record.applied)
-
-
-def get_categories_for_role(role):
-    categories = set(['all'])
-    if 'labs-common' in role.filter_tags:
-        categories.add('common')
-    if "labs-project-%s" % role.tenant_id in role.filter_tags:
-        categories.add('project')
-    return categories
-
-
-# This shouldn't be needed, but FixedFilterAction
-#  is a bit broken and doesn't update unless we
-#  explicitly set those category-* classes.
-class UpdateRow(tables.Row):
-    ajax = True
-
-    def load_cells(self, role=None):
-        super(UpdateRow, self).load_cells(role)
-        # Tag the row with the image category for client-side filtering.
-        for cat in get_categories_for_role(self.datum):
-            self.classes.append('category-%s' % cat)
-
-
-class RoleFilter(tables.FixedFilterAction):
-    def get_fixed_buttons(self):
-        def make_dict(text, tenant, icon):
-            return dict(text=text, value=tenant, icon=icon)
-
-        buttons = [make_dict(_('project'), 'project', 'fa-star'),
-                   make_dict(_('common'), 'common', 'fa-cube'),
-                   make_dict(_('all'), 'all', 'fa-cubes')]
-        return buttons
-
-    def categorize(self, table, roles):
-        filtered_dict = defaultdict(list)
-        for role in roles:
-            categories = get_categories_for_role(role)
-            for cat in categories:
-                filtered_dict[cat].append(role)
-        return filtered_dict
-
-
-class PuppetTable(tables.DataTable):
-    applied = tables.Column('applied', verbose_name=_('Applied'), status=True)
-    name = tables.Column('html_name',
-                         verbose_name=_('Name'))
-    params = tables.Column('formatted_params',
-                           verbose_name=_('Parameters'),
-                           sortable=False)
-    instance = tables.Column('instance',
-                             verbose_name=_('Instance'),
-                             hidden=True)
-    tenant = tables.Column('tenant',
-                           verbose_name=_('Tenant'),
-                           hidden=True)
-    tenant = tables.Column('prefix',
-                           verbose_name=_('prefix'),
-                           hidden=True)
-    roleid = tables.Column('name', verbose_name=_('ID'), hidden=True)
-
-    class Meta(object):
-        name = 'puppet'
-        row_actions = (ApplyRole, RemoveRole)
-        table_actions = (RoleFilter,)
-        status_columns = ["applied"]
-        row_class = UpdateRow
-        multi_select = False
-
-    def get_object_id(self, datum):
-        return datum.name
diff --git a/modules/openstack/files/mitaka/horizon/puppettab/static/dashboard/puppet/puppet.scss b/modules/openstack/files/mitaka/horizon/puppettab/static/dashboard/puppet/puppet.scss
deleted file mode 100644
index 97e7174..0000000
--- a/modules/openstack/files/mitaka/horizon/puppettab/static/dashboard/puppet/puppet.scss
+++ /dev/null
@@ -1 +0,0 @@
-#puppet.table-striped tbody tr.status_up td {background:lightgreen}
diff --git a/modules/openstack/files/mitaka/horizon/puppettab/tab.py b/modules/openstack/files/mitaka/horizon/puppettab/tab.py
deleted file mode 100644
index e137e86..0000000
--- a/modules/openstack/files/mitaka/horizon/puppettab/tab.py
+++ /dev/null
@@ -1,140 +0,0 @@
-# Copyright (c) 2016 Andrew Bogott for Wikimedia Foundation
-# All Rights Reserved.
-#
-#    Licensed under the Apache License, Version 2.0 (the "License"); you may
-#    not use this file except in compliance with the License. You may obtain
-#    a copy of the License at
-#
-#         http://www.apache.org/licenses/LICENSE-2.0
-#
-#    Unless required by applicable law or agreed to in writing, software
-#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-#    License for the specific language governing permissions and limitations
-#    under the License.
-
-import logging
-
-from django.core import urlresolvers
-from django.utils.translation import ugettext_lazy as _
-
-from horizon import tabs
-from django.conf import settings
-from django.utils.safestring import mark_safe
-
-import puppet_tables as p_tables
-from puppet_config import puppet_config
-
-logging.basicConfig()
-LOG = logging.getLogger(__name__)
-
-
-class PuppetTab(tabs.TableTab):
-    name = _("Puppet Configuration")
-    slug = "puppet"
-    table_classes = (p_tables.PuppetTable,)
-    template_name = "project/puppet/_detail_puppet.html"
-    preload = False
-
-    def __init__(self, *args, **kwargs):
-        # For some reason our parent class can't deal with these
-        #  args, so extract them now if they're present
-        if 'prefix' in kwargs:
-            self.prefix = kwargs['prefix']
-            self.name = self.prefix
-            del kwargs['prefix']
-
-        if 'tenant_id' in kwargs:
-            self.tenant_id = kwargs['tenant_id']
-            del kwargs['tenant_id']
-
-        if hasattr(self, 'tenant_id') and hasattr(self, 'prefix'):
-            self.slug += '-%s' % self.prefix
-            self.tab_type = 'prefix'
-
-        super(PuppetTab, self).__init__(*args, **kwargs)
-
-        if 'instance' in self.tab_group.kwargs:
-            self.tab_type = 'instance'
-            tld = getattr(settings,
-                          "INSTANCE_TLD",
-                          "eqiad.wmflabs")
-            self.instance = self.tab_group.kwargs['instance']
-
-            self.prefix = "%s.%s.%s" % (self.instance.name,
-                                        self.instance.tenant_id, tld)
-            self.tenant_id = self.instance.tenant_id
-
-        elif 'tenant_id' in self.tab_group.kwargs:
-            self.tab_type = 'project'
-            self.tenant_id = self.tab_group.kwargs['tenant_id']
-            self.prefix = self.tab_group.kwargs['prefix']
-        else:
-            self.tab_type = 'prefix'
-
-        self.add_caption()
-
-        self.config = puppet_config(self.prefix, self.tenant_id)
-
-    def add_caption(self):
-        self.capption = ""
-        if self.tab_type == 'prefix':
-            self.caption = _("These puppet settings will affect all VMs in the"
-                             " %s project whose names begin with \'%s\'.") % (
-                self.tenant_id, self.prefix)
-
-        elif self.tab_type == 'project':
-            self.caption = _("These puppet settings will affect all VMs"
-                             " in the %s project.") % self.tenant_id
-
-        elif self.tab_type == 'instance':
-            prefixes = puppet_config.get_prefixes(self.tenant_id)
-            links = []
-            for prefix in prefixes:
-                if '.' in prefix:
-                    continue
-                if prefix == '_':
-                    links.append("<a href=\"%s\">project config</a>" %
-                                 urlresolvers.reverse(
-                                     "horizon:project:puppet:index"))
-                elif self.instance.name.startswith(prefix):
-                    prefix_url = urlresolvers.reverse(
-                        "horizon:project:prefixpuppet:index",
-                        ) + "?tab=prefix_puppet__puppet-%s" % prefix
-                    links.append("<a href=\"%s\">%s</a>" % (prefix_url,
-                                                            prefix))
-
-            if links:
-                self.caption = mark_safe(_("This instance is also "
-                                           "affected by the following puppet "
-                                           "configs:  %s" % ", ".join(links)))
-
-    def get_context_data(self, request, **kwargs):
-        context = super(PuppetTab, self).get_context_data(request, **kwargs)
-        context['prefix'] = self.prefix
-        context['config'] = self.config
-        context['prefix_tab'] = (self.tab_type == 'prefix')
-
-        if hasattr(self, 'caption'):
-            context['caption'] = self.caption
-        elif 'caption' in self.tab_group.kwargs:
-            context['caption'] = self.tab_group.kwargs['caption']
-
-        kwargs = {
-            'prefix': self.prefix,
-            'tenantid': self.tenant_id,
-        }
-        context['edithieraurl'] = urlresolvers.reverse(
-            "horizon:project:puppet:edithiera", kwargs=kwargs)
-        context['editotherclassesurl'] = urlresolvers.reverse(
-            "horizon:project:puppet:editotherclasses", kwargs=kwargs)
-
-        url = "horizon:project:puppet:removepuppetprefix"
-        context['removepuppetprefixurl'] = urlresolvers.reverse(url,
-                                                                kwargs=kwargs)
-
-        return context
-
-    def get_puppet_data(self):
-        return [role.update_prefix_data(self.prefix, self.tenant_id) for
-                role in self.config.allroles]
diff --git a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_apply.html b/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_apply.html
deleted file mode 100644
index 570138e..0000000
--- a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_apply.html
+++ /dev/null
@@ -1,25 +0,0 @@
-{% extends "horizon/common/_modal_form.html" %}
-{% load i18n horizon humanize %}
-
-{% block form_attrs %}enctype="multipart/form-data"{% endblock %}
-
-{% block modal-header %}{% trans "Apply" %} {{ puppetrole.name }} {% endblock %}
-
-{% block modal-body %}
-<div class="row">
- <div class="col-sm-6" style="width: {% if puppetrole.docs %}38{% else %}100{% endif %}%">
-  <h3>{{ ParamsCaption }}</h3>
-  <fieldset>
-   {% include "horizon/common/_form_fields.html" %}
-  </fieldset>
- </div>
- {% if puppetrole.docs %}
-  <div class="col-sm-6" style="width: 62%;">
-   <h3>{{ DocsCaption }}</h3>
-   <p>
-    <font size="1"><pre>{{ puppetrole.docs }}</pre></font>
-   </p>
-  </div>
- {% endif %}
-</div>
-{% endblock %}
diff --git a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_detail_puppet.html b/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_detail_puppet.html
deleted file mode 100644
index ce53ad3..0000000
--- a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_detail_puppet.html
+++ /dev/null
@@ -1,17 +0,0 @@
-{% load i18n %}
-
-<br>
-{{ caption }}
-{% if prefix_tab %}
-<br>
-<a href="{{ removepuppetprefixurl }}" class="btn btn-primary ajax-modal">{% trans "Remove prefix" %}</a>
-{% endif %}
-
-<div class="row-fluid">
-  <div class="span12">
-    <h3>{% trans "Roles and Profiles" %}</h3>
-    {{ table.render }}
-  </div>
-  {% include 'project/puppet/_other_classes.html' %}
-  {% include 'project/puppet/_hiera.html' %}
-</div>
diff --git a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_edithiera.html b/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_edithiera.html
deleted file mode 100644
index b9d6be2..0000000
--- a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_edithiera.html
+++ /dev/null
@@ -1,4 +0,0 @@
-{% extends "horizon/common/_modal_form.html" %}
-{% load i18n horizon humanize %}
-
-{% block form_attrs %}enctype="multipart/form-data"{% endblock %}
diff --git a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_editotherclasses.html b/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_editotherclasses.html
deleted file mode 100644
index ffbc95a..0000000
--- a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_editotherclasses.html
+++ /dev/null
@@ -1,3 +0,0 @@
-{% extends "horizon/common/_modal_form.html" %}
-
-{% block form_attrs %}enctype="multipart/form-data"{% endblock %}
diff --git a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_hiera.html b/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_hiera.html
deleted file mode 100644
index 7a89c64..0000000
--- a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_hiera.html
+++ /dev/null
@@ -1,10 +0,0 @@
-{% load i18n %}
-
-<div class="row-fluid">
-   <h3>{% trans "Hiera Config" %}</h3>
-   <p>
-     <pre>{{ config.hiera }}</pre>
-   </p>
-   <a href="{{ edithieraurl }}" class="btn btn-primary ajax-modal">{% trans "Edit" %}</a>
-</div>
-
diff --git a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_other_classes.html b/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_other_classes.html
deleted file mode 100644
index 1c4099d..0000000
--- a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_other_classes.html
+++ /dev/null
@@ -1,9 +0,0 @@
-{% load i18n %}
-
-<div class="row-fluid">
-   <h3>{% trans "Other Classes" %}</h3>
-   <p>
-     <pre>{{ config.other_classes_text }}</pre>
-   </p>
-   <a href="{{ editotherclassesurl }}" class="btn btn-primary ajax-modal">{% trans "Edit" %}</a>
-</div>
diff --git a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_remove.html b/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_remove.html
deleted file mode 100644
index b3c8816..0000000
--- a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_remove.html
+++ /dev/null
@@ -1,22 +0,0 @@
-{% extends "horizon/common/_modal_form.html" %}
-{% load i18n horizon humanize %}
-
-{% block form_attrs %}enctype="multipart/form-data"{% endblock %}
-
-{% block modal-header %}{% trans "Remove" %} {{ puppetrole.name }} {% endblock %}
-
-{% block modal-body %}
-<div class="row">
- <div class="col-sm-6" style="width: {% if puppetrole.docs %}38{% else %}100{% endif %}%">
-  <h3>Are you sure you want to remove this role?</h3>
- </div>
- {% if puppetrole.docs %}
-  <div class="col-sm-6" style="width: 62%;">
-   <h3>{{ DocsCaption }}</h3>
-   <p>
-    <font size="1"><pre>{{ puppetrole.docs }}</pre></font>
-   </p>
-  </div>
- {% endif %}
-</div>
-{% endblock %}
diff --git a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_removeprefix.html b/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_removeprefix.html
deleted file mode 100644
index 00413aa..0000000
--- a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/_removeprefix.html
+++ /dev/null
@@ -1,15 +0,0 @@
-{% extends "horizon/common/_modal_form.html" %}
-{% load i18n horizon humanize %}
-
-{% block form_attrs %}enctype="multipart/form-data"{% endblock %}
-
-{% block modal-header %}{% trans "Remove" %} {{ prefix }} {% endblock %}
-
-{% block modal-body %}
-<div class="row">
- <div class="col-sm-6" style="width: 100%">
-  <h3>{% trans "Are you sure you want to remove this prefix?" %}</h3>
-  {% trans "All hiera and puppet roles associated with this prefix will be discarded." %}
- </div>
-</div>
-{% endblock %}
diff --git a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/apply.html b/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/apply.html
deleted file mode 100644
index a4e7d38..0000000
--- a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/apply.html
+++ /dev/null
@@ -1,8 +0,0 @@
-{% extends 'base.html' %}
-{% load i18n %}
-{% block title %}{% trans "Apply A Role" %}{% endblock %}
-
-{% block main %}
-  {% include 'project/puppet/_apply.html' %}
-{% endblock %}
-
diff --git a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/edithiera.html b/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/edithiera.html
deleted file mode 100644
index 2416c95..0000000
--- a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/edithiera.html
+++ /dev/null
@@ -1,6 +0,0 @@
-{% extends 'base.html' %}
-{% load i18n %}
-
-{% block main %}
-  {% include 'project/puppet/_edithiera.html' %}
-{% endblock %}
diff --git a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/editotherclasses.html b/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/editotherclasses.html
deleted file mode 100644
index 55b0a00..0000000
--- a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/editotherclasses.html
+++ /dev/null
@@ -1,5 +0,0 @@
-{% extends 'base.html' %}
-
-{% block main %}
-  {% include 'project/puppet/_editotherclasses.html' %}
-{% endblock %}
diff --git a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/plus_tab.html b/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/plus_tab.html
deleted file mode 100644
index f5338a3..0000000
--- a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/plus_tab.html
+++ /dev/null
@@ -1,15 +0,0 @@
-{% load i18n %}
-
-{% if prefix_name %}
-Name: {{ prefix_name }}
-{% else %}
-<br>
-{% trans "A prefix must start with a letter and consist of only letters, numbers, - and _." %}
-<form action="" method="POST">
-    {% csrf_token %}
-    <input type="hidden" name="action" value="puppetprefixplus__undefined">
-    <input type="text" name="prefix_name" placeholder="prefix name:" pattern="^[A-Za-z][A-Za-z0-9-_]*$">
-    <input type="submit" value="Add prefix"><br>
-</form>
-{% endif %}
-
diff --git a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/prefix_panel.html b/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/prefix_panel.html
deleted file mode 100644
index 6d74e64..0000000
--- a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/prefix_panel.html
+++ /dev/null
@@ -1,14 +0,0 @@
-{% extends 'base.html' %}
-{% load i18n %}
-
-{% block title %}
-  {{ page_title }}
-{% endblock %}
-
-{% block main %}
-  <div class="row">
-    <div class="col-sm-12">
-      {{ tab_group.render }}
-    </div>
-  </div>
-{% endblock %}
diff --git a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/project_panel.html b/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/project_panel.html
deleted file mode 100644
index 6d74e64..0000000
--- a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/project_panel.html
+++ /dev/null
@@ -1,14 +0,0 @@
-{% extends 'base.html' %}
-{% load i18n %}
-
-{% block title %}
-  {{ page_title }}
-{% endblock %}
-
-{% block main %}
-  <div class="row">
-    <div class="col-sm-12">
-      {{ tab_group.render }}
-    </div>
-  </div>
-{% endblock %}
diff --git a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/remove.html b/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/remove.html
deleted file mode 100644
index a8e6cd8..0000000
--- a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/remove.html
+++ /dev/null
@@ -1,8 +0,0 @@
-{% extends 'base.html' %}
-{% load i18n %}
-{% block title %}{% trans "Remove A Role" %}{% endblock %}
-
-{% block main %}
-  {% include 'project/puppet/_remove.html' %}
-{% endblock %}
-
diff --git a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/removeprefix.html b/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/removeprefix.html
deleted file mode 100644
index 4ab70e4..0000000
--- a/modules/openstack/files/mitaka/horizon/puppettab/templates/puppet/removeprefix.html
+++ /dev/null
@@ -1,8 +0,0 @@
-{% extends 'base.html' %}
-{% load i18n %}
-{% block title %}{% trans "Remove A Puppet Rule Prefix" %}{% endblock %}
-
-{% block main %}
-  {% include 'project/puppet/_remove.html' %}
-{% endblock %}
-
diff --git a/modules/openstack/files/mitaka/horizon/puppettab/urls.py b/modules/openstack/files/mitaka/horizon/puppettab/urls.py
deleted file mode 100644
index 190a9c7..0000000
--- a/modules/openstack/files/mitaka/horizon/puppettab/urls.py
+++ /dev/null
@@ -1,38 +0,0 @@
-# Copyright (c) 2016 Andrew Bogott for Wikimedia Foundation
-# All Rights Reserved.
-#
-#    Licensed under the Apache License, Version 2.0 (the "License"); you may
-#    not use this file except in compliance with the License. You may obtain
-#    a copy of the License at
-#
-#         http://www.apache.org/licenses/LICENSE-2.0
-#
-#    Unless required by applicable law or agreed to in writing, software
-#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-#    License for the specific language governing permissions and limitations
-#    under the License.
-from django.conf.urls import url, patterns
-
-from wikimediapuppettab import projectpanel
-from wikimediapuppettab import views
-
-urlpatterns = patterns(
-    '',
-    url(r'^$', projectpanel.IndexView.as_view(), name='index'),
-    url(r'^(?P<prefix>[^/]+)/(?P<tenantid>[^/]+)/'
-        '(?P<roleid>[^/]+)/applypuppetrole$',
-        views.ApplyRoleView.as_view(), name='applypuppetrole'),
-    url(r'^(?P<prefix>[^/]+)/(?P<tenantid>[^/]+)/'
-        '(?P<roleid>[^/]+)/removepuppetrole$',
-        views.RemoveRoleView.as_view(), name='removepuppetrole'),
-    url(r'^(?P<prefix>[^/]+)/(?P<tenantid>[^/]+)/'
-        'edithiera$',
-        views.EditHieraView.as_view(), name='edithiera'),
-    url(r'^(?P<prefix>[^/]+)/(?P<tenantid>[^/]+)/'
-        'editotherclasses$',
-        views.EditOtherClassesView.as_view(), name='editotherclasses'),
-    url(r'^(?P<prefix>[^/]+)/(?P<tenantid>[^/]+)/'
-        'removepuppetprefix$',
-        views.RemovePrefixView.as_view(), name='removepuppetprefix'),
-)
diff --git a/modules/openstack/files/mitaka/horizon/puppettab/views.py b/modules/openstack/files/mitaka/horizon/puppettab/views.py
deleted file mode 100644
index 1eaf027..0000000
--- a/modules/openstack/files/mitaka/horizon/puppettab/views.py
+++ /dev/null
@@ -1,319 +0,0 @@
-# Copyright (c) 2016 Andrew Bogott for Wikimedia Foundation
-# All Rights Reserved.
-#
-#    Licensed under the Apache License, Version 2.0 (the "License"); you may
-#    not use this file except in compliance with the License. You may obtain
-#    a copy of the License at
-#
-#         http://www.apache.org/licenses/LICENSE-2.0
-#
-#    Unless required by applicable law or agreed to in writing, software
-#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-#    License for the specific language governing permissions and limitations
-#    under the License.
-
-import logging
-
-from django.core import urlresolvers
-from django.core.validators import URLValidator
-from django.utils.safestring import mark_safe
-from django.utils.translation import ugettext_lazy as _
-
-from horizon import forms
-
-from puppet_config import puppet_config
-
-import puppet_roles
-
-import yaml
-
-logging.basicConfig()
-LOG = logging.getLogger(__name__)
-
-
-class EditHieraForm(forms.SelfHandlingForm):
-    prefix = forms.CharField(widget=forms.HiddenInput())
-    tenant_id = forms.CharField(widget=forms.HiddenInput())
-    hieradata = forms.CharField(label=_("Instance hiera config:"),
-                                widget=forms.Textarea(attrs={
-                                                      'cols': 80,
-                                                      'rows': 15}),
-                                required=False)
-
-    def handle(self, request, data):
-        config = puppet_config(data['prefix'], data['tenant_id'])
-        config.set_hiera(yaml.safe_load(data['hieradata']))
-        return True
-
-
-class EditHieraView(forms.ModalFormView):
-    form_class = EditHieraForm
-    form_id = "edit_hiera_form"
-    modal_header = _("Edit Hiera")
-    submit_label = _("Apply Changes")
-    submit_url = "horizon:project:puppet:edithiera"
-    template_name = "project/puppet/edithiera.html"
-    context_object_name = 'hieraconfig'
-
-    def get_context_data(self, **kwargs):
-        context = super(EditHieraView, self).get_context_data(**kwargs)
-        context['prefix'] = self.prefix
-        context['hieradata'] = self.hieradata.hiera
-        urlkwargs = {
-            'prefix': self.prefix,
-            'tenantid': self.tenant_id,
-        }
-        context['submit_url'] = urlresolvers.reverse(self.submit_url,
-                                                     kwargs=urlkwargs)
-        return context
-
-    def get_success_url(self):
-        validate = URLValidator()
-        refer = self.request.META.get('HTTP_REFERER', '/')
-        validate(refer)
-        return refer
-
-    def get_prefix(self):
-        return self.kwargs['prefix']
-
-    def get_tenant_id(self):
-        return self.kwargs['tenantid']
-
-    def get_initial(self):
-        initial = {}
-        self.prefix = self.get_prefix()
-        self.tenant_id = self.get_tenant_id()
-        self.hieradata = puppet_config(self.prefix, self.tenant_id)
-        initial['hieradata'] = self.hieradata.hiera
-        initial['prefix'] = self.prefix
-        initial['tenant_id'] = self.tenant_id
-
-        return initial
-
-
-class RoleViewBase(forms.ModalFormView):
-    context_object_name = 'puppetrole'
-
-    puppetrole_name = forms.CharField(widget=forms.HiddenInput())
-
-    def get_context_data(self, **kwargs):
-        context = super(RoleViewBase, self).get_context_data(**kwargs)
-        context['puppetrole'] = self.puppet_role
-        urlkwargs = {
-            'prefix': self.prefix,
-            'tenantid': self.tenant_id,
-            'roleid': self.role_id,
-        }
-        context['prefix'] = self.prefix
-        context['submit_url'] = urlresolvers.reverse(self.submit_url,
-                                                     kwargs=urlkwargs)
-        if self.puppet_role.docs:
-            context['DocsCaption'] = _('Description:')
-        else:
-            context['DocsCaption'] = _('(No Description)')
-        if self.puppet_role.params:
-            context['ParamsCaption'] = _('Parameters:')
-        else:
-            context['ParamsCaption'] = _('(No Parameters)')
-        return context
-
-    def get_success_url(self):
-        validate = URLValidator()
-        refer = self.request.META.get('HTTP_REFERER', '/')
-        validate(refer)
-        return refer
-
-    def get_puppet_role(self):
-        rolename = self.kwargs['roleid']
-        puppet_role = puppet_roles.get_role_by_name(rolename)
-        return puppet_role
-
-    def get_prefix(self):
-        return self.kwargs['prefix']
-
-    def get_tenant_id(self):
-        return self.kwargs['tenantid']
-
-    def get_initial(self):
-        initial = {}
-        self.prefix = self.get_prefix()
-        self.tenant_id = self.get_tenant_id()
-        self.role_id = self.kwargs['roleid']
-        self.puppet_role = self.get_puppet_role()
-        initial['puppet_role'] = self.puppet_role
-        initial['tenant_id'] = self.tenant_id
-        initial['prefix'] = self.prefix
-        return initial
-
-
-class ApplyRoleForm(forms.SelfHandlingForm):
-    def __init__(self, request, *args, **kwargs):
-        super(ApplyRoleForm, self).__init__(request, *args, **kwargs)
-        initial = kwargs.get('initial', {})
-        self.tenant_id = initial['tenant_id']
-        self.prefix = initial['prefix']
-        self.role = initial['puppet_role']
-        if self.role.params:
-            for key in self.role.params.keys():
-                defaultval = self.role.params.get(key, '')
-                if defaultval:
-                    defaultval = "default: %s" % defaultval
-                self.fields[key] = forms.CharField(
-                    label=mark_safe("%s  <i><small>%s</small></i>" % (
-                        key,
-                        defaultval)),
-                    required=False
-                )
-
-    def handle(self, request, data):
-        config = puppet_config(self.prefix, self.tenant_id)
-        config.apply_role(self.role, data)
-        return True
-
-
-class ApplyRoleView(RoleViewBase):
-    form_class = ApplyRoleForm
-    form_id = "apply_role_form"
-    modal_header = _("Apply Class")
-    submit_label = _("Apply")
-    submit_url = "horizon:project:puppet:applypuppetrole"
-    template_name = "project/puppet/apply.html"
-
-
-class RemoveRoleForm(forms.SelfHandlingForm):
-    def __init__(self, request, *args, **kwargs):
-        super(RemoveRoleForm, self).__init__(request, *args, **kwargs)
-        initial = kwargs.get('initial', {})
-        self.tenant_id = initial['tenant_id']
-        self.prefix = initial['prefix']
-        self.role = initial['puppet_role']
-
-    def handle(self, request, data):
-        config = puppet_config(self.prefix, self.tenant_id)
-        config.remove_role(self.role)
-        return True
-
-
-class RemoveRoleView(RoleViewBase):
-    form_class = RemoveRoleForm
-    form_id = "remove_role_form"
-    modal_header = _("Remove Class")
-    submit_label = _("Remove")
-    submit_url = "horizon:project:puppet:removepuppetrole"
-    template_name = "project/puppet/remove.html"
-
-
-class RemovePrefixForm(forms.SelfHandlingForm):
-    def __init__(self, request, *args, **kwargs):
-        super(RemovePrefixForm, self).__init__(request, *args, **kwargs)
-        initial = kwargs.get('initial', {})
-        self.tenant_id = initial['tenant_id']
-        self.prefix = initial['prefix']
-
-    def handle(self, request, data):
-        puppet_config.delete_prefix(self.tenant_id, self.prefix)
-        return True
-
-
-class RemovePrefixView(forms.ModalFormView):
-    form_class = RemovePrefixForm
-    form_id = "remove_prefix_form"
-    modal_header = _("Remove Prefix")
-    submit_label = _("Remove")
-    submit_url = "horizon:project:puppet:removepuppetprefix"
-    template_name = "project/puppet/removeprefix.html"
-
-    def get_prefix(self):
-        return self.kwargs['prefix']
-
-    def get_tenant_id(self):
-        return self.kwargs['tenantid']
-
-    def get_initial(self):
-        initial = {}
-        self.prefix = self.get_prefix()
-        self.tenant_id = self.get_tenant_id()
-        initial['prefix'] = self.prefix
-        initial['tenant_id'] = self.tenant_id
-
-        return initial
-
-    def get_context_data(self, **kwargs):
-        context = super(RemovePrefixView, self).get_context_data(**kwargs)
-        context['prefix'] = self.prefix
-        urlkwargs = {
-            'prefix': self.prefix,
-            'tenantid': self.tenant_id,
-        }
-        context['prefix'] = self.prefix
-        context['submit_url'] = urlresolvers.reverse(self.submit_url,
-                                                     kwargs=urlkwargs)
-        return context
-
-    def get_success_url(self):
-        validate = URLValidator()
-        refer = self.request.META.get('HTTP_REFERER', '/')
-        validate(refer)
-        return refer
-
-
-class EditOtherClassesForm(forms.SelfHandlingForm):
-    prefix = forms.CharField(widget=forms.HiddenInput())
-    tenant_id = forms.CharField(widget=forms.HiddenInput())
-    classes = forms.CharField(label=_("Other classes:"),
-                              widget=forms.Textarea(attrs={
-                                                    'cols': 80,
-                                                    'rows': 15}),
-                              required=False)
-
-    def handle(self, request, data):
-        other_class_list = [cls.strip() for cls in data['classes'].strip().split("\n") if cls]
-        config = puppet_config(data['prefix'], data['tenant_id'])
-        config.set_other_class_list(other_class_list)
-        return True
-
-
-class EditOtherClassesView(forms.ModalFormView):
-    form_class = EditOtherClassesForm
-    form_id = "edit_otherclasses_form"
-    modal_header = _("Edit Other Classes")
-    submit_label = _("Apply Changes")
-    submit_url = "horizon:project:puppet:editotherclasses"
-    template_name = "project/puppet/editotherclasses.html"
-    context_object_name = 'otherclassesconfig'
-
-    def get_context_data(self, **kwargs):
-        context = super(EditOtherClassesView, self).get_context_data(**kwargs)
-        context['prefix'] = self.prefix
-        context['classes'] = self.classdata.other_classes
-        urlkwargs = {
-            'prefix': self.prefix,
-            'tenantid': self.tenant_id,
-        }
-        context['submit_url'] = urlresolvers.reverse(self.submit_url,
-                                                     kwargs=urlkwargs)
-        return context
-
-    def get_success_url(self):
-        validate = URLValidator()
-        refer = self.request.META.get('HTTP_REFERER', '/')
-        validate(refer)
-        return refer
-
-    def get_prefix(self):
-        return self.kwargs['prefix']
-
-    def get_tenant_id(self):
-        return self.kwargs['tenantid']
-
-    def get_initial(self):
-        initial = {}
-        self.prefix = self.get_prefix()
-        self.tenant_id = self.get_tenant_id()
-        self.classdata = puppet_config(self.prefix, self.tenant_id)
-        initial['classes'] = self.classdata.other_classes_text
-        initial['prefix'] = self.prefix
-        initial['tenant_id'] = self.tenant_id
-
-        return initial
diff --git a/modules/openstack/files/mitaka/horizon/sudo/__init__.py b/modules/openstack/files/mitaka/horizon/sudo/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/modules/openstack/files/mitaka/horizon/sudo/panel.py b/modules/openstack/files/mitaka/horizon/sudo/panel.py
deleted file mode 100644
index 55e4663..0000000
--- a/modules/openstack/files/mitaka/horizon/sudo/panel.py
+++ /dev/null
@@ -1,28 +0,0 @@
-# Copyright (c) 2016 Andrew Bogott for Wikimedia Foundation
-# All Rights Reserved.
-#
-#    Licensed under the Apache License, Version 2.0 (the "License"); you may
-#    not use this file except in compliance with the License. You may obtain
-#    a copy of the License at
-#
-#         http://www.apache.org/licenses/LICENSE-2.0
-#
-#    Unless required by applicable law or agreed to in writing, software
-#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-#    License for the specific language governing permissions and limitations
-#    under the License.
-
-import logging
-
-from django.utils.translation import ugettext_lazy as _
-import horizon
-
-logging.basicConfig()
-LOG = logging.getLogger(__name__)
-
-
-class ProjectSudoPanel(horizon.Panel):
-    name = _("Project Sudo")
-    slug = "sudo"
-    policy_rules = (("compute", "sudorule:list"),)
diff --git a/modules/openstack/files/mitaka/horizon/sudo/sudorules.py b/modules/openstack/files/mitaka/horizon/sudo/sudorules.py
deleted file mode 100644
index 1172a11..0000000
--- a/modules/openstack/files/mitaka/horizon/sudo/sudorules.py
+++ /dev/null
@@ -1,217 +0,0 @@
-# Copyright (c) 2017 Andrew Bogott for Wikimedia Foundation
-# All Rights Reserved.
-#
-#    Licensed under the Apache License, Version 2.0 (the "License"); you may
-#    not use this file except in compliance with the License. You may obtain
-#    a copy of the License at
-#
-#         http://www.apache.org/licenses/LICENSE-2.0
-#
-#    Unless required by applicable law or agreed to in writing, software
-#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-#    License for the specific language governing permissions and limitations
-#    under the License.
-
-import ldap
-import ldap.modlist
-import logging
-
-from django.conf import settings
-
-from horizon import exceptions
-
-logging.basicConfig()
-LOG = logging.getLogger(__name__)
-
-
-# A single sudoer rule, with some human readable labels
-class SudoRule:
-    def _get_formatted_user_list(self, userlist):
-        projmembers = '%%project-%s' % self.project
-        listcopy = list(userlist)
-        if projmembers in listcopy:
-            listcopy.remove(projmembers)
-            listcopy.insert(0, "[Any project member]")
-
-        if 'ALL' in listcopy:
-            listcopy.remove('ALL')
-            listcopy.insert(0, "[Anyone]")
-
-        return ', '.join(listcopy)
-
-    def __init__(self,
-                 project,
-                 name,
-                 users,
-                 runas,
-                 commands,
-                 options):
-        self.id = name
-        self.project = project
-        self.name = name
-        self.users = users
-        self.runas = runas
-        self.commands = commands
-        self.options = options
-
-        self.users_hr = self._get_formatted_user_list(users)
-        self.runas_hr = self._get_formatted_user_list(runas)
-
-        self.commands_hr = ', '.join(commands)
-
-        if '!authenticate' in self.options:
-            self.authrequired = False
-        else:
-            self.authrequired = True
-
-        if '!authenticate' in options:
-            options.remove('!authenticate')
-        if 'authenticate' in options:
-            options.remove('authenticate')
-
-        self.options_hr = ', '.join(options)
-
-
-def _getLdapInfo(attr, conffile="/etc/ldap.conf"):
-    try:
-        f = open(conffile)
-    except IOError:
-        if conffile == "/etc/ldap.conf":
-            # fallback to /etc/ldap/ldap.conf, which will likely
-            # have less information
-            f = open("/etc/ldap/ldap.conf")
-    for line in f:
-        if line.strip() == "":
-            continue
-        if line.split()[0].lower() == attr.lower():
-            return line.split(None, 1)[1].strip()
-            break
-
-
-def _open_ldap():
-    ldapHost = _getLdapInfo("uri")
-    sslType = _getLdapInfo("ssl")
-
-    binddn = getattr(settings, "LDAP_USER", '')
-    bindpw = getattr(settings, "LDAP_USER_PASSWORD", '')
-
-    ds = ldap.initialize(ldapHost)
-    ds.protocol_version = ldap.VERSION3
-    if sslType == "start_tls":
-        ds.start_tls_s()
-
-    try:
-        ds.simple_bind_s(binddn, bindpw)
-        return ds
-    except ldap.CONSTRAINT_VIOLATION:
-        LOG.error("LDAP bind failure:  Too many failed attempts.\n")
-    except ldap.INVALID_DN_SYNTAX:
-        LOG.error("LDAP bind failure:  The bind DN is incorrect... \n")
-    except ldap.NO_SUCH_OBJECT:
-        LOG.error("LDAP bind failure:  "
-                  "Unable to locate the bind DN account.\n")
-    except ldap.UNWILLING_TO_PERFORM as msg:
-        LOG.error("LDAP bind failure:  "
-                  "The LDAP server was unwilling to perform the action"
-                  " requested.\nError was: %s\n" % msg[0]["info"])
-    except ldap.INVALID_CREDENTIALS:
-        LOG.error("LDAP bind failure:  Password incorrect.\n")
-
-    LOG.error("Failed to connect to ldap.")
-    raise exceptions.ConfigurationError()
-
-
-def rules_for_project(project, rulename=None):
-    LOG.debug("getting rules for %s" % project)
-    projects_basedn = getattr(settings, "LDAP_PROJECTS_BASE", '')
-    sudoer_base = "ou=sudoers,cn=%s,%s" % (project, projects_basedn)
-    rules = []
-
-    ds = _open_ldap()
-
-    if rulename:
-        filter = "(&(objectClass=sudorole)(cn=%s))" % rulename
-    else:
-        filter = '(objectClass=sudorole)'
-
-    sudorecords = ds.search_s(sudoer_base,
-                              ldap.SCOPE_ONELEVEL,
-                              filterstr=filter)
-
-    for record in sudorecords:
-        content = record[1]
-
-        name = content.get('cn', [''])[0]
-        users = content.get("sudoUser", [])
-        runas = content.get("sudoRunAsUser", [])
-        command = content.get("sudoCommand", [])
-        options = content.get("sudoOption", [])
-
-        rule = SudoRule(project,
-                        name,
-                        users,
-                        runas,
-                        command,
-                        options)
-        rules.append(rule)
-
-    return rules
-
-
-def _dn_for_rule(rule):
-    projects_basedn = getattr(settings, "LDAP_PROJECTS_BASE", '')
-    sudoer_base = "ou=sudoers,cn=%s,%s" % (rule.project, projects_basedn)
-    return "cn=%s,%s" % (rule.name, sudoer_base)
-
-
-def _modentry_for_rule(rule):
-    ruleEntry = {}
-    ruleEntry['cn'] = rule.name.encode('utf8')
-    ruleEntry['objectClass'] = 'sudoRole'
-    ruleEntry['sudoHost'] = 'ALL'
-    ruleEntry['sudoOption'] = [opt.encode('utf8') for opt in rule.options]
-    ruleEntry['sudoCommand'] = [cmd.encode('utf8') for cmd in rule.commands]
-    ruleEntry['sudoUser'] = [usr.encode('utf8') for usr in rule.users]
-    ruleEntry['sudoRunAsUser'] = [usr.encode('utf8') for usr in rule.runas]
-
-    if not rule.authrequired:
-        ruleEntry['sudoOption'].append("!authenticate")
-
-    return ruleEntry
-
-
-def add_rule(rule):
-    ds = _open_ldap()
-
-    dn = _dn_for_rule(rule)
-    modentry = _modentry_for_rule(rule)
-    modlist = ldap.modlist.addModlist(modentry)
-    ds.add_s(dn, modlist)
-    return True
-
-
-def update_rule(rule):
-    ds = _open_ldap()
-
-    dn = _dn_for_rule(rule)
-    newentry = _modentry_for_rule(rule)
-
-    # get the old rule so we can make a proper modlist.  This is potentially
-    #  racy but less racy than caching it elsewhere.
-    oldrecords = ds.search_s(dn, ldap.SCOPE_BASE)
-
-    modlist = ldap.modlist.modifyModlist(oldrecords[0][1], newentry)
-    ds.modify_s(dn, modlist)
-    return True
-
-
-def delete_rule(project, rulename):
-    ds = _open_ldap()
-
-    projects_basedn = getattr(settings, "LDAP_PROJECTS_BASE", '')
-    sudoer_base = "ou=sudoers,cn=%s,%s" % (project, projects_basedn)
-
-    dn = "cn=%s,%s" % (rulename, sudoer_base)
-    ds.delete_s(dn)
-    return True
diff --git a/modules/openstack/files/mitaka/horizon/sudo/templates/sudo/_common_horizontal_form.html b/modules/openstack/files/mitaka/horizon/sudo/templates/sudo/_common_horizontal_form.html
deleted file mode 100644
index 97f0ef9..0000000
--- a/modules/openstack/files/mitaka/horizon/sudo/templates/sudo/_common_horizontal_form.html
+++ /dev/null
@@ -1,3 +0,0 @@
-<div class="form-horizontal">
-  {% include "horizon/common/_horizontal_fields.html" %}
-</div>
diff --git a/modules/openstack/files/mitaka/horizon/sudo/templates/sudo/index.html b/modules/openstack/files/mitaka/horizon/sudo/templates/sudo/index.html
deleted file mode 100644
index 6f667f2..0000000
--- a/modules/openstack/files/mitaka/horizon/sudo/templates/sudo/index.html
+++ /dev/null
@@ -1,13 +0,0 @@
-{% extends 'base.html' %}
-{% load i18n %}
-{% block title %}{% trans "Sudoer Policies" %}{% endblock %}
-
-{% block page_header %}
-  {% include "horizon/common/_page_header.html" with title=_("Sudoer Policy") %}
-{% endblock page_header %}
-
-{% block main %}
-  {{ table.render }}
-{% endblock %}
-
-
diff --git a/modules/openstack/files/mitaka/horizon/sudo/urls.py b/modules/openstack/files/mitaka/horizon/sudo/urls.py
deleted file mode 100644
index 955fa7e..0000000
--- a/modules/openstack/files/mitaka/horizon/sudo/urls.py
+++ /dev/null
@@ -1,26 +0,0 @@
-# Copyright (c) 2016 Andrew Bogott for Wikimedia Foundation
-# All Rights Reserved.
-#
-#    Licensed under the Apache License, Version 2.0 (the "License"); you may
-#    not use this file except in compliance with the License. You may obtain
-#    a copy of the License at
-#
-#         http://www.apache.org/licenses/LICENSE-2.0
-#
-#    Unless required by applicable law or agreed to in writing, software
-#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-#    License for the specific language governing permissions and limitations
-#    under the License.
-from django.conf.urls import url, patterns
-
-from wikimediasudodashboard import views
-
-urlpatterns = patterns(
-    '',
-    url(r'^$', views.IndexView.as_view(), name='index'),
-    url(r'^create/$', views.CreateView.as_view(), name='create'),
-    url(r'^(?P<rule_name>[^/]+)/modify/$',
-        views.ModifyView.as_view(), name='modify'),
-
-)
diff --git a/modules/openstack/files/mitaka/horizon/sudo/views.py b/modules/openstack/files/mitaka/horizon/sudo/views.py
deleted file mode 100644
index c82068d..0000000
--- a/modules/openstack/files/mitaka/horizon/sudo/views.py
+++ /dev/null
@@ -1,138 +0,0 @@
-# Copyright (c) 2016 Andrew Bogott for Wikimedia Foundation
-# All Rights Reserved.
-#
-#    Licensed under the Apache License, Version 2.0 (the "License"); you may
-#    not use this file except in compliance with the License. You may obtain
-#    a copy of the License at
-#
-#         http://www.apache.org/licenses/LICENSE-2.0
-#
-#    Unless required by applicable law or agreed to in writing, software
-#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-#    License for the specific language governing permissions and limitations
-#    under the License.
-
-import logging
-
-from django.utils.translation import ungettext_lazy
-from django.utils.translation import ugettext_lazy as _
-
-from horizon import exceptions
-from horizon import tables
-from horizon import workflows
-
-import sudorules
-import workflows as sudo_workflows
-
-logging.basicConfig()
-LOG = logging.getLogger(__name__)
-
-
-class AddRule(tables.LinkAction):
-    name = "addsudorule"
-    verbose_name = _("Add Rule")
-    url = "horizon:project:sudo:create"
-    classes = ("ajax-modal",)
-    icon = "plus"
-    policy_rules = (("compute", "sudorule:create"),)
-
-
-class ModifyRule(tables.LinkAction):
-    name = "modifysudorule"
-    verbose_name = _("Modify Rule")
-    url = "horizon:project:sudo:modify"
-    classes = ("ajax-modal",)
-
-    policy_rules = (("compute", "sudorule:modify"),)
-
-
-class DeleteRule(tables.DeleteAction):
-
-    @staticmethod
-    def action_present(count):
-        return ungettext_lazy(u"Delete Rule", u"Delete Rules", count)
-
-    @staticmethod
-    def action_past(count):
-        return ungettext_lazy(u"Deleted Rule", u"Deleted Rules", count)
-
-    policy_rules = (("compute", "sudorule:delete"),)
-
-    def delete(self, request, obj_id):
-        project_id = request.user.tenant_id
-        sudorules.delete_rule(project_id, obj_id)
-
-
-class SudoTable(tables.DataTable):
-    name = tables.Column("name", verbose_name=_("Sudo policy name"),)
-    users = tables.Column("users_hr", verbose_name=_("Users"),)
-    runas = tables.Column("runas_hr", verbose_name=_("Allow running as"),)
-    commands = tables.Column("commands_hr", verbose_name=_("Commands"),)
-    options = tables.Column("options_hr", verbose_name=_("Options"),)
-    authenticate = tables.Column("authrequired",
-                                 verbose_name=_("Require Password"),)
-
-    class Meta(object):
-        name = "proxies"
-        verbose_name = _("Sudo Policies")
-        table_actions = (AddRule, DeleteRule, )
-        row_actions = (ModifyRule, DeleteRule, )
-
-
-def get_sudo_rule_list(request):
-    project = request.user.tenant_id
-    rules = []
-    try:
-        rules = sudorules.rules_for_project(project)
-    except Exception:
-        exceptions.handle(request, _("Unable to retrieve sudo rules."))
-    return rules
-
-
-class IndexView(tables.DataTableView):
-    table_class = SudoTable
-    template_name = 'project/sudo/index.html'
-    page_title = _("Sudo Policies")
-
-    def get_data(self):
-        return get_sudo_rule_list(self.request)
-
-
-class CreateView(workflows.WorkflowView):
-    workflow_class = sudo_workflows.CreateRule
-
-    def get_initial(self):
-        initial = super(CreateView, self).get_initial()
-        initial['project_id'] = self.request.user.tenant_id
-        initial['rulename'] = 'newrule'
-        initial['commands'] = 'ALL'
-        initial[sudo_workflows.SUDO_USER_ROLE_NAME] = [sudo_workflows.allUsersTuple(
-            self.request.user.tenant_id)[0]]
-        initial[sudo_workflows.SUDO_RUNAS_ROLE_NAME] = []
-
-        return initial
-
-
-class ModifyView(workflows.WorkflowView):
-    workflow_class = sudo_workflows.ModifyRule
-
-    def get_initial(self):
-        initial = super(ModifyView, self).get_initial()
-
-        project = self.request.user.tenant_id
-        rulename = self.kwargs['rule_name']
-
-        rule = sudorules.rules_for_project(project, rulename)[0]
-
-        initial['project_id'] = project
-        initial['rulename'] = rulename
-
-        initial['commands'] = "\n".join(rule.commands)
-        initial[sudo_workflows.SUDO_USER_ROLE_NAME] = rule.users
-        initial[sudo_workflows.SUDO_RUNAS_ROLE_NAME] = rule.runas
-        initial['options'] = "\n".join(rule.options)
-
-        initial['authrequired'] = rule.authrequired
-
-        return initial
diff --git a/modules/openstack/files/mitaka/horizon/sudo/workflows.py b/modules/openstack/files/mitaka/horizon/sudo/workflows.py
deleted file mode 100644
index 26f2502..0000000
--- a/modules/openstack/files/mitaka/horizon/sudo/workflows.py
+++ /dev/null
@@ -1,291 +0,0 @@
-# Copyright (c) 2017 Andrew Bogott for Wikimedia Foundation
-# All Rights Reserved.
-#
-#    Licensed under the Apache License, Version 2.0 (the "License"); you may
-#    not use this file except in compliance with the License. You may obtain
-#    a copy of the License at
-#
-#         http://www.apache.org/licenses/LICENSE-2.0
-#
-#    Unless required by applicable law or agreed to in writing, software
-#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-#    License for the specific language governing permissions and limitations
-#    under the License.
-
-import ldap
-import logging
-
-from django.utils.translation import ugettext_lazy as _
-
-from horizon import exceptions
-from horizon import forms
-from horizon import workflows
-
-from openstack_dashboard.api import keystone
-
-import sudorules
-
-LOG = logging.getLogger(__name__)
-
-SUDO_USER_MEMBER_SLUG = 'sudo_users'
-SUDO_RUNAS_SLUG = 'sudo_runas'
-COMMON_HORIZONTAL_TEMPLATE = "project/sudo/_common_horizontal_form.html"
-
-SUDO_USER_ROLE_NAME = 'user'
-SUDO_RUNAS_ROLE_NAME = 'runas'
-
-NO_SUDO_FOR = ['novaadmin', 'novaobserver']
-
-
-def allUsersTuple(project_id):
-    return ("%%project-%s" % project_id, "[Any project member]")
-
-
-def anyUserTuple():
-    return ("ALL", "[Anyone]")
-
-
-class UpdateRuleUsersAction(workflows.MembershipAction):
-    role_name = SUDO_USER_ROLE_NAME
-
-    def __init__(self, request, *args, **kwargs):
-        super(UpdateRuleUsersAction, self).__init__(request,
-                                                    *args,
-                                                    **kwargs)
-        err_msg = _('Unable to retrieve user list. Please try again later.')
-
-        project_id = self.initial['project_id']
-
-        # The user-selection widget we're using thinks in terms of roles.  We only want
-        #  one, simple list so we will collect them in the stand-in 'user' role.
-        default_role_name = self.get_default_role_field_name()
-        self.fields[default_role_name] = forms.CharField(required=False)
-        self.fields[default_role_name].initial = self.role_name
-
-        # Get list of available users
-        all_users = []
-        try:
-            # We can't use the default user_list function because it requires
-            #  us to be an admin user.
-            users = keystone.keystoneclient(request).users.list(default_project=project_id)
-            all_users = [keystone.VERSIONS.upgrade_v2_user(user) for user in users]
-            all_users_dict = {user.id: user for user in all_users}
-        except Exception:
-            exceptions.handle(request, err_msg)
-
-        # The v3 user list doesn't actually filter by project (code comments
-        #  to the contrary) so we have to dig through the role list to find
-        #  out who's actually in our project.
-        # Anyone who is in all_users_dict and also has a role in the
-        #  project is a potential sudoer.
-        project_users = set()
-        manager = keystone.keystoneclient(request).role_assignments
-        project_role_assignments = manager.list(project=project_id)
-        for role_assignment in project_role_assignments:
-            if not hasattr(role_assignment, 'user'):
-                continue
-            user_id = role_assignment.user['id']
-            if user_id in NO_SUDO_FOR:
-                continue
-            if user_id in all_users_dict:
-                project_users.add(all_users_dict[user_id])
-
-        users_list = [(user.id, user.name) for user in project_users]
-        users_list.insert(0, anyUserTuple())
-        users_list.insert(0, allUsersTuple(project_id))
-
-        # Add a field to collect the list of users with role 'user'
-        field_name = self.get_member_field_name(self.role_name)
-        label = self.role_name
-        self.fields[field_name] = forms.MultipleChoiceField(required=False,
-                                                            label=label)
-        self.fields[field_name].choices = users_list
-        self.fields[field_name].initial = self.initial[self.role_name]
-
-    class Meta(object):
-        name = _("Users")
-        slug = SUDO_USER_MEMBER_SLUG
-
-
-class UpdateRuleUsers(workflows.UpdateMembersStep):
-    action_class = UpdateRuleUsersAction
-    available_list_title = _("")
-    members_list_title = _("Rule Users")
-    no_available_text = _("No users found.")
-    no_members_text = _("No users.")
-    show_roles = False
-    role_name = SUDO_USER_ROLE_NAME
-    contributes = (SUDO_USER_ROLE_NAME,)
-
-    def contribute(self, data, context):
-        if data:
-            post = self.workflow.request.POST
-
-            field_name = self.get_member_field_name(self.role_name)
-            context[self.role_name] = post.getlist(field_name)
-        return context
-
-
-class UpdateRuleRunAsUsersAction(UpdateRuleUsersAction):
-    role_name = SUDO_RUNAS_ROLE_NAME
-
-    class Meta(object):
-        name = _("Run as")
-        slug = SUDO_RUNAS_SLUG
-
-
-class UpdateRuleRunAsUsers(UpdateRuleUsers):
-    action_class = UpdateRuleRunAsUsersAction
-    available_list_title = _("")
-    members_list_title = _("Allow running as")
-    role_name = SUDO_RUNAS_ROLE_NAME
-    contributes = (SUDO_RUNAS_ROLE_NAME,)
-
-
-LDAP_TEXT_VALIDATOR = "^[A-Za-z][\w_\-\.]*$"
-LDAP_TEXT_VALIDATOR_MESSAGES = {'invalid':
-                                _("This must start with a letter, "
-                                  "followed by only letters, numbers, ., -, or _.")}
-
-
-class CreateRuleInfoAction(workflows.Action):
-    # Hide the domain_id and domain_name by default
-    project_id = forms.CharField(label=_("Project ID"),
-                                 required=False,
-                                 widget=forms.HiddenInput())
-    rulename = forms.RegexField(label=_("Rule Name"),
-                                max_length=64,
-                                help_text=_("Name of this sudo rule. "
-                                            "Must be a unique name within this project."),
-                                regex=LDAP_TEXT_VALIDATOR,
-                                error_messages=LDAP_TEXT_VALIDATOR_MESSAGES,
-                                required=True)
-    commands = forms.CharField(widget=forms.widgets.Textarea(
-                               attrs={'rows': 4}),
-                               label=_("Commands"),
-                               help_text=_("List of permitted commands, one per line, "
-                                           "or ALL to permit all actions."),
-                               required=True)
-    options = forms.CharField(widget=forms.widgets.Textarea(
-                              attrs={'rows': 2}),
-                              label=_("Options"),
-                              required=False)
-    authrequired = forms.BooleanField(label=_("Passphrase required"),
-                                      required=False,
-                                      initial=False)
-
-    def __init__(self, request, *args, **kwargs):
-        super(CreateRuleInfoAction, self).__init__(request,
-                                                   *args,
-                                                   **kwargs)
-
-    class Meta(object):
-        name = _("Rule")
-        help_text = _("Create a rule to permit certain sudo commands.")
-        slug = "rule_info"
-
-
-class ModifyRuleInfoAction(CreateRuleInfoAction):
-    def __init__(self, request, *args, **kwargs):
-        super(ModifyRuleInfoAction, self).__init__(request,
-                                                   *args,
-                                                   **kwargs)
-        self.fields['rulename'].widget.attrs['readonly'] = True
-
-    class Meta(object):
-        name = _("Rule")
-        help_text = _("Update a sudo rule.")
-        slug = "modify_rule_info"
-
-
-class CreateRuleInfo(workflows.Step):
-    action_class = CreateRuleInfoAction
-    template_name = COMMON_HORIZONTAL_TEMPLATE
-    contributes = ("rulename",
-                   "commands",
-                   "project_id",
-                   "options",
-                   "authrequired")
-
-    def contribute(self, data, context):
-        if data:
-            post = self.workflow.request.POST
-
-            context['commands'] = post.getlist('commands')[0].splitlines()
-            context['options'] = post.getlist('options')[0].splitlines()
-            if not post.getlist('authrequired'):
-                context['options'].append("!authenticate")
-            context['rulename'] = post.getlist('rulename')[0]
-
-        return context
-
-
-class ModifyRuleInfo(CreateRuleInfo):
-    action_class = ModifyRuleInfoAction
-
-
-class CreateRule(workflows.Workflow):
-    slug = "create_sudo_rule"
-    name = _("Create Rule")
-    finalize_button_name = _("Create Rule")
-    success_message = _('Created sudo rule "%s".')
-    failure_message = _('Unable to create sudo rule.')
-    success_url = "horizon:project:sudo:index"
-    default_steps = (CreateRuleInfo,
-                     UpdateRuleUsers,
-                     UpdateRuleRunAsUsers)
-
-    def __init__(self, request=None, context_seed=None, entry_point=None,
-                 *args, **kwargs):
-        super(CreateRule, self).__init__(request=request,
-                                         context_seed=context_seed,
-                                         entry_point=entry_point,
-                                         *args,
-                                         **kwargs)
-
-    def handle(self, request, data):
-        rule = sudorules.SudoRule(project=data['project_id'],
-                                  name=data['rulename'],
-                                  users=data[SUDO_USER_ROLE_NAME],
-                                  runas=data[SUDO_RUNAS_ROLE_NAME],
-                                  commands=data['commands'],
-                                  options=data['options'])
-
-        try:
-            sudorules.add_rule(rule)
-        except ldap.ALREADY_EXISTS:
-            exceptions.handle(request, _("A rule named %s already exists.") % data['rulename'])
-            return False
-
-        return True
-
-
-class ModifyRule(workflows.Workflow):
-    slug = "modify_sudo_rule"
-    name = _("Modify Rule")
-    finalize_button_name = _("Update Rule")
-    success_message = _('Changed sudo rule "%s".')
-    failure_message = _('Unable to change sudo rule "%s".')
-    success_url = "horizon:project:sudo:index"
-    default_steps = (ModifyRuleInfo,
-                     UpdateRuleUsers,
-                     UpdateRuleRunAsUsers)
-
-    def __init__(self, request=None, context_seed=None, entry_point=None,
-                 *args, **kwargs):
-        super(ModifyRule, self).__init__(request=request,
-                                         context_seed=context_seed,
-                                         entry_point=entry_point,
-                                         *args,
-                                         **kwargs)
-
-    def handle(self, request, data):
-        rule = sudorules.SudoRule(project=data['project_id'],
-                                  name=data['rulename'],
-                                  users=data[SUDO_USER_ROLE_NAME],
-                                  runas=data[SUDO_RUNAS_ROLE_NAME],
-                                  commands=data['commands'],
-                                  options=data['options'])
-
-        return sudorules.update_rule(rule)
diff --git a/modules/openstack/files/mitaka/horizon/sudo_enable.py b/modules/openstack/files/mitaka/horizon/sudo_enable.py
deleted file mode 100644
index 4b6061a..0000000
--- a/modules/openstack/files/mitaka/horizon/sudo_enable.py
+++ /dev/null
@@ -1,6 +0,0 @@
-PANEL = 'projectsudopanel'
-PANEL_GROUP = 'sudoers'
-PANEL_DASHBOARD = 'project'
-ADD_PANEL = ('wikimediasudodashboard.panel.ProjectSudoPanel')
-ADD_INSTALLED_APPS = ['wikimediasudodashboard']
-AUTO_DISCOVER_STATIC_FILES = True
diff --git a/modules/openstack/files/mitaka/horizon/sudo_group_add.py b/modules/openstack/files/mitaka/horizon/sudo_group_add.py
deleted file mode 100644
index 63e8a5c..0000000
--- a/modules/openstack/files/mitaka/horizon/sudo_group_add.py
+++ /dev/null
@@ -1,6 +0,0 @@
-# The name of the panel group to be added to HORIZON_CONFIG. Required.
-PANEL_GROUP = 'sudoers'
-# The display name of the PANEL_GROUP. Required.
-PANEL_GROUP_NAME = 'Sudoer Policies'
-# The name of the dashboard the PANEL_GROUP associated with. Required.
-PANEL_GROUP_DASHBOARD = 'project'
diff --git a/modules/openstack/manifests/horizon/puppetpanel.pp b/modules/openstack/manifests/horizon/puppetpanel.pp
deleted file mode 100644
index 064e9d8..0000000
--- a/modules/openstack/manifests/horizon/puppetpanel.pp
+++ /dev/null
@@ -1,39 +0,0 @@
-# Install a custom-for-wikimedia Horizon panel
-#  to manage instance puppet configuration
-class openstack::horizon::puppetpanel(
-    $openstack_version  = $::openstack::version)
-{
-    file { '/usr/lib/python2.7/dist-packages/wikimediapuppettab':
-        source  => "puppet:///modules/openstack/${openstack_version}/horizon/puppettab",
-        owner   => 'root',
-        group   => 'root',
-        mode    => '0644',
-        require => Package['openstack-dashboard'],
-        notify  => Exec['djangorefresh'],
-        recurse => true,
-    }
-    file { '/usr/share/openstack-dashboard/openstack_dashboard/local/enabled/_1923_puppet_group_add.py':
-        source  => "puppet:///modules/openstack/${openstack_version}/horizon/puppet_group_add.py",
-        owner   => 'root',
-        group   => 'root',
-        mode    => '0644',
-        notify  => Exec['djangorefresh'],
-        require => Package['openstack-dashboard'],
-    }
-    file { '/usr/share/openstack-dashboard/openstack_dashboard/local/enabled/_1924_puppet_project_panel.py':
-        source  => "puppet:///modules/openstack/${openstack_version}/horizon/puppet_tab_enable.py",
-        owner   => 'root',
-        group   => 'root',
-        mode    => '0644',
-        notify  => Exec['djangorefresh'],
-        require => Package['openstack-dashboard'],
-    }
-    file { '/usr/share/openstack-dashboard/openstack_dashboard/local/enabled/_1925_puppet_prefix_panel.py':
-        source  => "puppet:///modules/openstack/${openstack_version}/horizon/puppet_prefix_tab_enable.py",
-        owner   => 'root',
-        group   => 'root',
-        mode    => '0644',
-        notify  => Exec['djangorefresh'],
-        require => Package['openstack-dashboard'],
-    }
-}
diff --git a/modules/openstack/manifests/horizon/service.pp b/modules/openstack/manifests/horizon/service.pp
deleted file mode 100644
index b7ce1a9..0000000
--- a/modules/openstack/manifests/horizon/service.pp
+++ /dev/null
@@ -1,287 +0,0 @@
-# The OpenStack Das2hboard Project
-# http://docs.openstack.org/developer/horizon/
-class openstack::horizon::service(
-    $novaconfig,
-    $designateconfig,
-    $openstack_version  = $::openstack::version,
-    $webserver_hostname = 'horizon.wikimedia.org'
-) {
-
-    package { 'openstack-dashboard':
-        ensure  => present,
-        require => Class['::apache::mod::wsgi'];
-    }
-
-    require_package('python-keystoneclient')
-
-    package { [ 'python-openstack-auth',
-                'python-designate-dashboard' ]:
-        ensure  => present,
-    }
-
-    include ::apache
-    include ::apache::mod::ssl
-    include ::apache::mod::wsgi
-    include ::apache::mod::rewrite
-    include ::apache::mod::headers
-    include ::memcached
-
-    # Blank out these files so that the (broken) dashboard
-    #  package doesn't fret.
-    file { ['/etc/apache2/conf-available/openstack-dashboard.conf',
-            '/etc/apache2/conf-enabled/openstack-dashboard.conf']:
-        ensure  => file,
-        content => '# This empty file is here to keep the openstack-dashboard package happy.',
-        require => Package['openstack-dashboard'],
-    }
-
-    file { '/etc/openstack-dashboard/local_settings.py':
-        content => template("openstack/${openstack_version}/horizon/local_settings.py.erb"),
-        owner   => 'horizon',
-        group   => 'horizon',
-        notify  => [Service['apache2'], Exec['djangorefresh']],
-        require => Package['openstack-dashboard'],
-        mode    => '0440',
-    }
-
-    # In the perfect future, Horizon policies will be the same
-    #  files that the respective services use.  In the meantime, though
-    #  it's useful to be able to disable not-yet-supported horizon features.
-    file { '/etc/openstack-dashboard/nova_policy.json':
-        source  => "puppet:///modules/openstack/${openstack_version}/horizon/nova_policy.json",
-        owner   => 'horizon',
-        group   => 'horizon',
-        notify  => Service['apache2'],
-        require => Package['openstack-dashboard'],
-        mode    => '0440',
-    }
-    file { '/etc/openstack-dashboard/glance_policy.json':
-        source  => "puppet:///modules/openstack/${openstack_version}/horizon/glance_policy.json",
-        owner   => 'horizon',
-        group   => 'horizon',
-        notify  => Service['apache2'],
-        require => Package['openstack-dashboard'],
-        mode    => '0440',
-    }
-
-    # We need a horizon-specific keystone policy because horizon does weird/special
-    #  things for admin_required policies which I don't totally understand.  In particular,
-    #  some permissive policies here (e.g. "") cause Horizon to panic, not ask Keystone for permission,
-    #  and log out the user.
-    file { '/etc/openstack-dashboard/keystone_policy.json':
-        source  => "puppet:///modules/openstack/${openstack_version}/horizon/keystone_policy.json",
-        owner   => 'horizon',
-        group   => 'horizon',
-        notify  => Service['apache2'],
-        require => Package['openstack-dashboard'],
-        mode    => '0440',
-    }
-
-    file { '/etc/openstack-dashboard/designate_policy.json':
-        source  => "puppet:///modules/openstack/${openstack_version}/designate/policy.json",
-        owner   => 'horizon',
-        group   => 'horizon',
-        notify  => Service['apache2'],
-        require => Package['openstack-dashboard'],
-        mode    => '0440',
-    }
-
-    # This is a trivial policy file that forbids everything.  We'll use it
-    #  for services that we don't support to prevent Horizon from
-    #  displaying spurious panels.
-    file { '/etc/openstack-dashboard/disabled_policy.json':
-        source  => "puppet:///modules/openstack/${openstack_version}/horizon/disabled_policy.json",
-        owner   => 'horizon',
-        group   => 'horizon',
-        notify  => Service['apache2'],
-        require => Package['openstack-dashboard'],
-        mode    => '0440',
-    }
-
-    file { '/usr/share/openstack-dashboard/openstack_dashboard/static/dashboard/img/logo.png':
-        source  => 'puppet:///modules/openstack/horizon/216px-Wikimedia_labs_dashboard_logo.png',
-        owner   => 'horizon',
-        group   => 'horizon',
-        require => Package['openstack-dashboard'],
-        mode    => '0444',
-    }
-    file { '/usr/share/openstack-dashboard/openstack_dashboard/static/dashboard/img/logo-splash.png':
-        source  => 'puppet:///modules/openstack/horizon/180px-Wikimedia_labs_dashboard_splash.png',
-        owner   => 'horizon',
-        group   => 'horizon',
-        require => Package['openstack-dashboard'],
-        mode    => '0444',
-    }
-    file { '/usr/share/openstack-dashboard/openstack_dashboard/static/dashboard/img/favicon.ico':
-        source  => 'puppet:///modules/openstack/horizon/Wikimedia_labs.ico',
-        owner   => 'horizon',
-        group   => 'horizon',
-        require => Package['openstack-dashboard'],
-        mode    => '0444',
-    }
-
-    # Homemade totp plugin for keystoneclient
-    file { '/usr/lib/python2.7/dist-packages/keystoneclient/auth/identity/v3/wmtotp.py':
-        source => "puppet:///modules/openstack/${openstack_version}/keystoneclient/wmtotp.py",
-        owner  => 'root',
-        group  => 'root',
-        mode   => '0644',
-    }
-    file { '/usr/lib/python2.7/dist-packages/keystoneclient/auth/identity/v3/__init__.py':
-        source => "puppet:///modules/openstack/${openstack_version}/keystoneclient/__init__.py",
-        owner  => 'root',
-        group  => 'root',
-        mode   => '0644',
-    }
-
-    # Homemade totp plugin for openstack_auth
-    file { '/usr/lib/python2.7/dist-packages/openstack_auth/plugin/wmtotp.py':
-        source  => "puppet:///modules/openstack/${openstack_version}/horizon/openstack_auth/wmtotp.py",
-        owner   => 'root',
-        group   => 'root',
-        require => Package['python-openstack-auth'],
-        mode    => '0644',
-    }
-
-    # Replace the standard horizon login form to support 2fa
-    file { '/usr/lib/python2.7/dist-packages/openstack_auth/forms.py':
-        source  => "puppet:///modules/openstack/${openstack_version}/horizon/openstack_auth/forms.py",
-        owner   => 'root',
-        group   => 'root',
-        require => Package['python-openstack-auth'],
-        mode    => '0644',
-    }
-
-    # Replace the standard login backend.py to fix
-    #  https://bugs.launchpad.net/django-openstack-auth/+bug/1562452
-    # and also to implement the 'rememberme' checkbox
-    file { '/usr/lib/python2.7/dist-packages/openstack_auth/backend.py':
-        source  => "puppet:///modules/openstack/${openstack_version}/horizon/openstack_auth/backend.py",
-        owner   => 'root',
-        group   => 'root',
-        require => Package['python-openstack-auth'],
-        mode    => '0644',
-    }
-
-    # Install the designate dashboard
-    file { '/usr/share/openstack-dashboard/openstack_dashboard/local':
-        ensure  => 'directory',
-        owner   => 'root',
-        group   => 'root',
-        mode    => '0644',
-        require => Package['python-designate-dashboard', 'openstack-dashboard'],
-    }
-    file { '/usr/share/openstack-dashboard/openstack_dashboard/local/enabled':
-        ensure  => 'directory',
-        owner   => 'root',
-        group   => 'root',
-        mode    => '0644',
-        require => Package['python-designate-dashboard', 'openstack-dashboard'],
-    }
-    file { '/usr/share/openstack-dashboard/openstack_dashboard/local/enabled/_70_dns_add_group.py':
-        source  => "puppet:///modules/openstack/${openstack_version}/designate/dashboard/_70_dns_add_group.py",
-        owner   => 'root',
-        group   => 'root',
-        mode    => '0644',
-        require => Package['python-designate-dashboard', 'openstack-dashboard'],
-    }
-    file { '/usr/share/openstack-dashboard/openstack_dashboard/local/enabled/_71_dns_project.py':
-        source  => "puppet:///modules/openstack/${openstack_version}/designate/dashboard/_71_dns_project.py",
-        owner   => 'root',
-        group   => 'root',
-        mode    => '0644',
-        require => Package['python-designate-dashboard', 'openstack-dashboard'],
-    }
-
-    # Proxy panel
-    file { '/usr/lib/python2.7/dist-packages/wikimediaproxydashboard':
-        source  => "puppet:///modules/openstack/${openstack_version}/horizon/proxy",
-        owner   => 'root',
-        group   => 'root',
-        mode    => '0644',
-        require => Package['python-designate-dashboard', 'openstack-dashboard'],
-        notify  => Exec['djangorefresh'],
-        recurse => true,
-    }
-    file { '/usr/share/openstack-dashboard/openstack_dashboard/local/enabled/_1922_project_proxy_panel.py':
-        source  => "puppet:///modules/openstack/${openstack_version}/horizon/proxy_enable.py",
-        owner   => 'root',
-        group   => 'root',
-        mode    => '0644',
-        notify  => Exec['djangorefresh'],
-        require => Package['python-designate-dashboard', 'openstack-dashboard'],
-    }
-
-    # sudo dashboard
-    file { '/usr/lib/python2.7/dist-packages/wikimediasudodashboard':
-        source  => "puppet:///modules/openstack/${openstack_version}/horizon/sudo",
-        owner   => 'root',
-        group   => 'root',
-        mode    => '0644',
-        require => Package['python-designate-dashboard', 'openstack-dashboard'],
-        notify  => Exec['djangorefresh'],
-        recurse => true,
-    }
-    file { '/usr/share/openstack-dashboard/openstack_dashboard/local/enabled/_1926_project_sudo_panel.py':
-        source  => "puppet:///modules/openstack/${openstack_version}/horizon/sudo_enable.py",
-        owner   => 'root',
-        group   => 'root',
-        mode    => '0644',
-        notify  => Exec['djangorefresh'],
-        require => Package['python-designate-dashboard', 'openstack-dashboard'],
-    }
-    file { '/usr/share/openstack-dashboard/openstack_dashboard/local/enabled/_72_sudoers_add_group.py':
-        source  => "puppet:///modules/openstack/${openstack_version}/horizon/sudo_group_add.py",
-        owner   => 'root',
-        group   => 'root',
-        mode    => '0644',
-        notify  => Exec['djangorefresh'],
-        require => Package['python-designate-dashboard', 'openstack-dashboard'],
-    }
-
-    if $openstack_version != 'liberty' {
-        # Override some .js files to provide a simplified user experience.  Alas
-        #  we can't do this via the overrides.py monkeypatch below
-
-        file { '/usr/share/openstack-dashboard/openstack_dashboard/dashboards/project/static/dashboard/project/workflow/launch-instance/launch-instance-workflow.service.js':
-            source  => "puppet:///modules/openstack/${openstack_version}/horizon/jsoverrides/launch-instance-workflow.service.js",
-            owner   => 'root',
-            group   => 'root',
-            require => Package['openstack-dashboard'],
-            notify  => Exec['djangorefresh'],
-            mode    => '0644',
-        }
-    }
-
-    # Monkeypatches for Horizon customization
-    file { '/usr/lib/python2.7/dist-packages/horizon/overrides.py':
-        source  => "puppet:///modules/openstack/${openstack_version}/horizon/overrides.py",
-        owner   => 'root',
-        group   => 'root',
-        require => Package['python-openstack-auth'],
-        mode    => '0644',
-    }
-
-    # Arbitrary handy script that needs to be on the horizon host because it only works with Liberty
-    file { '/root/makedomain':
-        source => "puppet:///modules/openstack2/${openstack_version}/admin_scripts/makedomain",
-        owner  => 'root',
-        group  => 'root',
-        mode   => '0744',
-    }
-
-    apache::site { $webserver_hostname:
-        content => template("openstack/${openstack_version}/horizon/${webserver_hostname}.erb"),
-        require => File['/etc/openstack-dashboard/local_settings.py'],
-    }
-
-    # Collect and compress static web content
-    exec { 'djangorefresh':
-        command     => 'python manage.py collectstatic --noinput && python manage.py compress',
-        path        => '/usr/bin',
-        cwd         => '/usr/share/openstack-dashboard',
-        require     => File['/etc/openstack-dashboard/local_settings.py'],
-        notify      => Service['apache2'],
-        refreshonly => true,
-    }
-}
diff --git a/modules/openstack2/files/horizon/180px-Wikimedia_labs_dashboard_splash.png b/modules/openstack2/files/horizon/180px-Wikimedia_labs_dashboard_splash.png
new file mode 100644
index 0000000000000000000000000000000000000000..77b4671c248d275b66ea0fb7a95a0aec49c9046f
GIT binary patch
literal 12130
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

literal 0
HcmV?d00001

diff --git a/modules/openstack2/files/horizon/216px-Wikimedia_labs_dashboard_logo.png b/modules/openstack2/files/horizon/216px-Wikimedia_labs_dashboard_logo.png
new file mode 100644
index 0000000000000000000000000000000000000000..8125f16c73b639cf4480da4bf4b17dc6f5620c48
GIT binary patch
literal 3186
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
Y2d-(H8+r|SUH||907*qoM6N<$g5;<N8~^|S

literal 0
HcmV?d00001

diff --git a/modules/openstack2/files/horizon/Wikimedia_labs.ico b/modules/openstack2/files/horizon/Wikimedia_labs.ico
new file mode 100644
index 0000000000000000000000000000000000000000..962750c0cd69f73ffe7e178aa5ad150667381653
GIT binary patch
literal 15086
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

literal 0
HcmV?d00001

diff --git a/modules/openstack2/files/mitaka/designate/dashboard/_70_dns_add_group.py b/modules/openstack2/files/mitaka/designate/dashboard/_70_dns_add_group.py
new file mode 100644
index 0000000..4473e40
--- /dev/null
+++ b/modules/openstack2/files/mitaka/designate/dashboard/_70_dns_add_group.py
@@ -0,0 +1,20 @@
+# Copyright 2013 Hewlett-Packard Development Company, L.P.
+#
+# Licensed under the Apache License, Version 2.0 (the "License"); you may
+# not use this file except in compliance with the License. You may obtain
+# a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+# License for the specific language governing permissions and limitations
+# under the License.
+
+# The name of the panel group to be added to HORIZON_CONFIG. Required.
+PANEL_GROUP = 'dns'
+# The display name of the PANEL_GROUP. Required.
+PANEL_GROUP_NAME = 'DNS'
+# The name of the dashboard the PANEL_GROUP associated with. Required.
+PANEL_GROUP_DASHBOARD = 'project'
diff --git a/modules/openstack2/files/mitaka/designate/dashboard/_71_dns_project.py b/modules/openstack2/files/mitaka/designate/dashboard/_71_dns_project.py
new file mode 100644
index 0000000..307587d
--- /dev/null
+++ b/modules/openstack2/files/mitaka/designate/dashboard/_71_dns_project.py
@@ -0,0 +1,32 @@
+# Copyright 2013 Hewlett-Packard Development Company, L.P.
+#
+# Licensed under the Apache License, Version 2.0 (the "License"); you may
+# not use this file except in compliance with the License. You may obtain
+# a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+# License for the specific language governing permissions and limitations
+# under the License.
+
+from designatedashboard import exceptions
+
+# The name of the panel to be added to HORIZON_CONFIG. Required.
+PANEL = 'domains'
+# The name of the dashboard the PANEL associated with. Required.
+PANEL_DASHBOARD = 'project'
+# The name of the panel group the PANEL is associated with.
+PANEL_GROUP = 'dns'
+
+ADD_EXCEPTIONS = {
+    'recoverable': exceptions.RECOVERABLE,
+    'not_found': exceptions.NOT_FOUND,
+    'unauthorized': exceptions.UNAUTHORIZED,
+}
+
+# Python panel class of the PANEL to be added.
+ADD_PANEL = (
+    'designatedashboard.dashboards.project.dns_domains.panel.DNSDomains')
diff --git a/modules/openstack2/files/mitaka/designate/dashboard/__init__.py b/modules/openstack2/files/mitaka/designate/dashboard/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/modules/openstack2/files/mitaka/designate/policy.json b/modules/openstack2/files/mitaka/designate/policy.json
new file mode 100644
index 0000000..3ad758f
--- /dev/null
+++ b/modules/openstack2/files/mitaka/designate/policy.json
@@ -0,0 +1,104 @@
+{
+    "admin": "role:admin or is_admin:True",
+    "member": "tenant:%(tenant_id)s",
+    "admin_or_member": "rule:admin or role:user or role:projectadmin",
+    "admin_or_projectadmin": "rule:admin or role:projectadmin",
+    "target": "tenant:%(target_tenant_id)s",
+    "member_or_target":"rule:target or rule:member",
+    "admin_or_member_or_target":"rule:member_or_target or rule:admin",
+    "admin_or_target":"rule:admin or rule:target",
+
+    "default": "rule:admin_or_projectadmin",
+
+    "all_tenants": "rule:admin",
+
+    "use_low_ttl": "rule:admin",
+
+    "get_quotas": "",
+    "get_quota": "",
+    "set_quota": "rule:admin",
+    "reset_quotas": "rule:admin",
+
+    "create_tld": "rule:admin",
+    "find_tlds": "",
+    "get_tld": "",
+    "update_tld": "rule:admin",
+    "delete_tld": "rule:admin",
+
+    "create_tsigkey": "rule:admin",
+    "find_tsigkeys": "rule:admin",
+    "get_tsigkey": "rule:admin_or_member",
+    "update_tsigkey": "rule:admin",
+    "delete_tsigkey": "rule:admin",
+
+    "find_tenants": "",
+    "get_tenant": "",
+    "count_tenants": "rule:admin",
+
+    "create_domain": "rule:admin",
+    "get_domains": "",
+    "get_domain": "",
+    "get_domain_servers": "",
+    "find_domains": "",
+    "find_domain": "",
+    "update_domain": "rule:admin_or_projectadmin",
+    "delete_domain": "rule:admin_or_projectadmin",
+    "abandon_domain": "rule:admin_or_projectadmin",
+    "count_domains": "rule:admin_or_member",
+    "touch_domain": "rule:admin_or_projectadmin",
+
+    "create_record": "rule:admin_or_projectadmin",
+    "get_records": "",
+    "get_record": "",
+    "find_records": "",
+    "find_record": "",
+    "update_record": "rule:admin_or_projectadmin",
+    "delete_record": "rule:admin_or_projectadmin",
+    "count_records": "rule:admin_or_member",
+
+    "use_sudo": "rule:admin",
+
+    "create_blacklist": "rule:admin",
+    "find_blacklist": "rule:admin",
+    "find_blacklists": "rule:admin",
+    "get_blacklist": "rule:admin",
+    "update_blacklist": "rule:admin",
+    "delete_blacklist": "rule:admin",
+    "use_blacklisted_domain": "rule:admin",
+
+    "create_pool": "rule:admin",
+    "find_pools": "rule:admin",
+    "find_pool": "rule:admin",
+    "get_pool": "rule:admin",
+    "update_pool": "rule:admin",
+    "delete_pool": "rule:admin",
+
+    "diagnostics_ping": "rule:admin",
+    "diagnostics_sync_domains": "rule:admin",
+    "diagnostics_sync_domain": "rule:admin",
+    "diagnostics_sync_record": "rule:admin",
+
+    "create_zone_transfer_request": "rule:admin_or_projectadmin",
+    "get_zone_transfer_request": "rule:admin_or_projectadmin or tenant:%(target_tenant_id)s or None:%(target_tenant_id)s",
+    "get_zone_transfer_request_detailed": "rule:admin_or_projectadmin",
+    "find_zone_transfer_requests": "@",
+    "find_zone_transfer_request": "@",
+    "update_zone_transfer_request": "rule:admin_or_projectadmin",
+    "delete_zone_transfer_request": "rule:admin_or_projectadmin",
+
+    "create_zone_transfer_accept": "rule:admin_or_projectadmin or tenant:%(target_tenant_id)s or None:%(target_tenant_id)s",
+    "get_zone_transfer_accept": "rule:admin_or_projectadmin",
+    "find_zone_transfer_accepts": "rule:admin",
+    "find_zone_transfer_accept": "rule:admin",
+    "update_zone_transfer_accept": "rule:admin",
+    "delete_zone_transfer_accept": "rule:admin",
+
+    "create_recordset": "rule:zone_primary_or_admin",
+    "get_recordsets": "",
+    "get_recordset": "",
+    "find_recordsets": "",
+    "find_recordset": "",
+    "update_recordset": "rule:zone_primary_or_admin",
+    "delete_recordset": "rule:zone_primary_or_admin",
+    "count_recordset": ""
+}
diff --git a/modules/openstack2/files/mitaka/horizon/disabled_policy.json b/modules/openstack2/files/mitaka/horizon/disabled_policy.json
new file mode 100644
index 0000000..92503af
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/disabled_policy.json
@@ -0,0 +1,4 @@
+{
+    "context_is_admin":  "!",
+    "default": "!"
+}
diff --git a/modules/openstack2/files/mitaka/horizon/glance_policy.json b/modules/openstack2/files/mitaka/horizon/glance_policy.json
new file mode 100644
index 0000000..ce70040
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/glance_policy.json
@@ -0,0 +1,52 @@
+{
+    "context_is_admin":  "role:admin",
+    "admin_or_owner":  "is_admin:True or project_id:%(project_id)s",
+    "default": "role:admin",
+
+    "add_image": "role:admin",
+    "delete_image": "role:admin",
+    "get_image": "",
+    "get_images": "",
+    "modify_image": "role:admin",
+    "publicize_image": "role:admin",
+    "copy_from": "role:admin",
+
+    "download_image": "",
+    "upload_image": "role:admin",
+
+    "delete_image_location": "role:admin",
+    "get_image_location": "",
+    "set_image_location": "role:admin",
+
+    "add_member": "role:admin",
+    "delete_member": "role:admin",
+    "get_member": "",
+    "get_members": "",
+    "modify_member": "role:admin",
+
+    "manage_image_cache": "role:admin",
+
+    "get_task": "",
+    "get_tasks": "",
+    "add_task": "role:admin",
+    "modify_task": "role:admin",
+
+    "get_metadef_namespace": "",
+    "get_metadef_namespaces":"",
+    "modify_metadef_namespace":"role:admin",
+    "add_metadef_namespace":"role:admin",
+    "delete_metadef_namespace":"role:admin",
+
+    "get_metadef_object":"",
+    "get_metadef_objects":"",
+    "modify_metadef_object":"role:admin",
+    "add_metadef_object":"role:admin",
+
+    "list_metadef_resource_types":"rule:admin_or_owner",
+    "add_metadef_resource_type_association":"",
+
+    "get_metadef_property":"",
+    "get_metadef_properties":"",
+    "modify_metadef_property":"role:admin",
+    "add_metadef_property":"role:admin"
+}
diff --git a/modules/openstack2/files/mitaka/horizon/jsoverrides/launch-instance-workflow.service.js b/modules/openstack2/files/mitaka/horizon/jsoverrides/launch-instance-workflow.service.js
new file mode 100644
index 0000000..9802f1e
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/jsoverrides/launch-instance-workflow.service.js
@@ -0,0 +1,74 @@
+/*
+ *    (c) Copyright 2015 Hewlett-Packard Development Company, L.P.
+ *
+ * Licensed under the Apache License, Version 2.0 (the 'License');
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an 'AS IS' BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+(function () {
+  'use strict';
+
+  angular
+    .module('horizon.dashboard.project.workflow.launch-instance')
+    .factory('horizon.dashboard.project.workflow.launch-instance.workflow', launchInstanceWorkflow);
+
+  launchInstanceWorkflow.$inject = [
+    'horizon.dashboard.project.workflow.launch-instance.basePath',
+    'horizon.app.core.workflow.factory'
+  ];
+
+  function launchInstanceWorkflow(basePath, dashboardWorkflow) {
+    return dashboardWorkflow({
+      title: gettext('Launch Instance'),
+
+      /* WMF Hack:  Several unneeded steps have been removed here.  */
+      steps: [
+        {
+          id: 'details',
+          title: gettext('Details'),
+          templateUrl: basePath + 'details/details.html',
+          helpUrl: basePath + 'details/details.help.html',
+          formName: 'launchInstanceDetailsForm'
+        },
+        {
+          id: 'source',
+          title: gettext('Source'),
+          templateUrl: basePath + 'source/source.html',
+          helpUrl: basePath + 'source/source.help.html',
+          formName: 'launchInstanceSourceForm'
+        },
+        {
+          id: 'flavor',
+          title: gettext('Flavor'),
+          templateUrl: basePath + 'flavor/flavor.html',
+          helpUrl: basePath + 'flavor/flavor.help.html',
+          formName: 'launchInstanceFlavorForm'
+        },
+        {
+          id: 'secgroups',
+          title: gettext('Security Groups'),
+          templateUrl: basePath + 'security-groups/security-groups.html',
+          helpUrl: basePath + 'security-groups/security-groups.help.html',
+          formName: 'launchInstanceAccessAndSecurityForm'
+        },
+      ],
+
+      btnText: {
+        finish: gettext('Launch Instance')
+      },
+
+      btnIcon: {
+        finish: 'fa fa-cloud-upload'
+      }
+    });
+  }
+
+})();
diff --git a/modules/openstack2/files/mitaka/horizon/keystone_policy.json b/modules/openstack2/files/mitaka/horizon/keystone_policy.json
new file mode 100644
index 0000000..0bd9546
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/keystone_policy.json
@@ -0,0 +1,183 @@
+{
+    "admin_required": "role:admin or is_admin:1",
+    "service_role": "role:service",
+    "service_or_admin": "rule:admin_required or rule:service_role",
+    "owner" : "user_id:%(user_id)s",
+    "admin_or_owner": "rule:admin_required or rule:owner",
+    "token_subject": "user_id:%(target.token.user_id)s",
+    "admin_or_token_subject": "rule:admin_required or rule:token_subject",
+ 
+    "default": "rule:admin_required",
+ 
+    "identity:get_region": "",
+    "identity:list_regions": "rule:admin_required",
+    "identity:create_region": "rule:admin_required",
+    "identity:update_region": "rule:admin_required",
+    "identity:delete_region": "rule:admin_required",
+ 
+    "identity:get_service": "",
+    "identity:list_services": "",
+    "identity:create_service": "rule:admin_required",
+    "identity:update_service": "rule:admin_required",
+    "identity:delete_service": "rule:admin_required",
+ 
+    "identity:get_endpoint": "",
+    "identity:list_endpoints": "",
+    "identity:create_endpoint": "rule:admin_required",
+    "identity:update_endpoint": "rule:admin_required",
+    "identity:delete_endpoint": "rule:admin_required",
+ 
+    "identity:get_domain": "rule:admin_required",
+    "identity:list_domains": "rule:admin_required",
+    "identity:create_domain": "rule:admin_required",
+    "identity:update_domain": "rule:admin_required",
+    "identity:delete_domain": "rule:admin_required",
+ 
+    "identity:get_project": "rule:admin_required",
+    "identity:list_projects": "role:admin_required",
+    "identity:list_user_projects": "",
+    "identity:create_project": "rule:admin_required",
+    "identity:update_project": "rule:admin_required",
+    "identity:delete_project": "rule:admin_required",
+ 
+    "identity:get_user": "rule:admin_required",
+    "identity:list_users": "rule:admin_required",
+    "identity:create_user": "rule:admin_required",
+    "identity:update_user": "rule:admin_required",
+    "identity:delete_user": "rule:admin_required",
+    "identity:change_password": "rule:admin_or_owner",
+ 
+    "identity:get_group": "rule:admin_required",
+    "identity:list_groups": "rule:admin_required",
+    "identity:list_groups_for_user": "rule:admin_or_owner",
+    "identity:create_group": "rule:admin_required",
+    "identity:update_group": "rule:admin_required",
+    "identity:delete_group": "rule:admin_required",
+    "identity:list_users_in_group": "rule:admin_required",
+    "identity:remove_user_from_group": "rule:admin_required",
+    "identity:check_user_in_group": "rule:admin_required",
+    "identity:add_user_to_group": "rule:admin_required",
+ 
+    "identity:get_credential": "rule:admin_required",
+    "identity:list_credentials": "rule:admin_required",
+    "identity:create_credential": "rule:admin_required",
+    "identity:update_credential": "rule:admin_required",
+    "identity:delete_credential": "rule:admin_required",
+ 
+    "identity:ec2_get_credential": "rule:admin_required or (rule:owner and user_id:%(target.credential.user_id)s)",
+    "identity:ec2_list_credentials": "rule:admin_or_owner",
+    "identity:ec2_create_credential": "rule:admin_or_owner",
+    "identity:ec2_delete_credential": "rule:admin_required or (rule:owner and user_id:%(target.credential.user_id)s)",
+ 
+    "identity:get_role": "",
+    "identity:list_roles": "rule:admin_required",
+    "identity:create_role": "rule:admin_required",
+    "identity:update_role": "rule:admin_required",
+    "identity:delete_role": "rule:admin_required",
+ 
+    "identity:check_grant": "rule:admin_required",
+    "identity:list_grants": "rule:admin_required",
+    "identity:create_grant": "rule:admin_required",
+    "identity:revoke_grant": "rule:admin_required",
+ 
+    "identity:list_role_assignments": "rule:admin_required",
+ 
+    "identity:get_policy": "rule:admin_required",
+    "identity:list_policies": "rule:admin_required",
+    "identity:create_policy": "rule:admin_required",
+    "identity:update_policy": "rule:admin_required",
+    "identity:delete_policy": "rule:admin_required",
+ 
+    "identity:check_token": "rule:admin_or_token_subject",
+    "identity:validate_token": "rule:service_admin_or_token_subject",
+    "identity:validate_token_head": "rule:service_or_admin",
+    "identity:revocation_list": "rule:service_or_admin",
+    "identity:revoke_token": "rule:admin_or_token_subject",
+ 
+    "identity:create_trust": "user_id:%(trust.trustor_user_id)s",
+    "identity:list_trusts": "rule:admin_required",
+    "identity:list_roles_for_trust": "",
+    "identity:get_role_for_trust": "",
+    "identity:delete_trust": "",
+ 
+    "identity:create_consumer": "rule:admin_required",
+    "identity:get_consumer": "rule:admin_required",
+    "identity:list_consumers": "rule:admin_required",
+    "identity:delete_consumer": "rule:admin_required",
+    "identity:update_consumer": "rule:admin_required",
+ 
+    "identity:authorize_request_token": "rule:admin_required",
+    "identity:list_access_token_roles": "rule:admin_required",
+    "identity:get_access_token_role": "rule:admin_required",
+    "identity:list_access_tokens": "rule:admin_required",
+    "identity:get_access_token": "rule:admin_required",
+    "identity:delete_access_token": "rule:admin_required",
+ 
+    "identity:list_projects_for_endpoint": "rule:admin_required",
+    "identity:add_endpoint_to_project": "rule:admin_required",
+    "identity:check_endpoint_in_project": "rule:admin_required",
+    "identity:list_endpoints_for_project": "rule:admin_required",
+    "identity:remove_endpoint_from_project": "rule:admin_required",
+ 
+    "identity:create_endpoint_group": "rule:admin_required",
+    "identity:list_endpoint_groups": "rule:admin_required",
+    "identity:get_endpoint_group": "rule:admin_required",
+    "identity:update_endpoint_group": "rule:admin_required",
+    "identity:delete_endpoint_group": "rule:admin_required",
+    "identity:list_projects_associated_with_endpoint_group": "rule:admin_required",
+    "identity:list_endpoints_associated_with_endpoint_group": "rule:admin_required",
+    "identity:get_endpoint_group_in_project": "rule:admin_required",
+    "identity:list_endpoint_groups_for_project": "rule:admin_required",
+    "identity:add_endpoint_group_to_project": "rule:admin_required",
+    "identity:remove_endpoint_group_from_project": "rule:admin_required",
+ 
+    "identity:create_identity_provider": "rule:admin_required",
+    "identity:list_identity_providers": "rule:admin_required",
+    "identity:get_identity_providers": "rule:admin_required",
+    "identity:update_identity_provider": "rule:admin_required",
+    "identity:delete_identity_provider": "rule:admin_required",
+ 
+    "identity:create_protocol": "rule:admin_required",
+    "identity:update_protocol": "rule:admin_required",
+    "identity:get_protocol": "rule:admin_required",
+    "identity:list_protocols": "rule:admin_required",
+    "identity:delete_protocol": "rule:admin_required",
+ 
+    "identity:create_mapping": "rule:admin_required",
+    "identity:get_mapping": "rule:admin_required",
+    "identity:list_mappings": "rule:admin_required",
+    "identity:delete_mapping": "rule:admin_required",
+    "identity:update_mapping": "rule:admin_required",
+ 
+    "identity:create_service_provider": "rule:admin_required",
+    "identity:list_service_providers": "rule:admin_required",
+    "identity:get_service_provider": "rule:admin_required",
+    "identity:update_service_provider": "rule:admin_required",
+    "identity:delete_service_provider": "rule:admin_required",
+ 
+    "identity:get_auth_catalog": "",
+    "identity:get_auth_projects": "",
+    "identity:get_auth_domains": "",
+ 
+    "identity:list_projects_for_groups": "",
+    "identity:list_domains_for_groups": "",
+ 
+    "identity:list_revoke_events": "",
+ 
+    "identity:create_policy_association_for_endpoint": "rule:admin_required",
+    "identity:check_policy_association_for_endpoint": "rule:admin_required",
+    "identity:delete_policy_association_for_endpoint": "rule:admin_required",
+    "identity:create_policy_association_for_service": "rule:admin_required",
+    "identity:check_policy_association_for_service": "rule:admin_required",
+    "identity:delete_policy_association_for_service": "rule:admin_required",
+    "identity:create_policy_association_for_region_and_service": "rule:admin_required",
+    "identity:check_policy_association_for_region_and_service": "rule:admin_required",
+    "identity:delete_policy_association_for_region_and_service": "rule:admin_required",
+    "identity:get_policy_for_endpoint": "rule:admin_required",
+    "identity:list_endpoints_for_policy": "rule:admin_required",
+ 
+    "identity:create_domain_config": "rule:admin_required",
+    "identity:get_domain_config": "rule:admin_required",
+    "identity:update_domain_config": "rule:admin_required",
+    "identity:delete_domain_config": "rule:admin_required"
+}
diff --git a/modules/openstack2/files/mitaka/horizon/nova_policy.json b/modules/openstack2/files/mitaka/horizon/nova_policy.json
new file mode 100644
index 0000000..92ff69d
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/nova_policy.json
@@ -0,0 +1,138 @@
+{
+    "context_is_admin":  [["role:admin"]],
+    "admin_or_member":  [["is_admin:True"], ["project_id:%(project_id)s"]],
+    "admin_or_projectadmin":  [["is_admin:True"], ["role:projectadmin"]],
+    "default": [["rule:admin_or_projectadmin"]],
+
+    "compute:create": "rule:admin_or_projectadmin",
+    "compute:delete": "rule:admin_or_projectadmin",
+    "compute:create:attach_network": "role:admin",
+    "compute:create:attach_volume": "role:admin",
+    "compute:rebuild": "!",
+    "compute:start": "rule:admin_or_projectadmin",
+    "compute:stop": "rule:admin_or_projectadmin",
+    "compute:snapshot": "!",
+    "compute:get_all": [],
+    "compute:get_console_output": "rule:admin_or_member",
+
+    "sudorule:list": "",
+    "sudorule:delete": "rule:admin_or_projectadmin",
+    "sudorule:create": "rule:admin_or_projectadmin",
+    "sudorule:modify": "rule:admin_or_projectadmin",
+
+    "admin_api": [["is_admin:True"]],
+    "compute_extension:accounts": [["rule:admin_api"]],
+    "compute_extension:admin_actions": [["rule:admin_api"]],
+    "compute_extension:admin_actions:pause": [["rule:admin_or_projectadmin"]],
+    "compute_extension:admin_actions:unpause": [["rule:admin_or_projectadmin"]],
+    "compute_extension:admin_actions:suspend": "!",
+    "compute_extension:shelve": "!",
+    "compute_extension:admin_actions:resume": [["rule:admin_or_projectadmin"]],
+    "compute_extension:admin_actions:lock": [["rule:admin_api"]],
+    "compute_extension:admin_actions:unlock": [["rule:admin_api"]],
+    "compute_extension:admin_actions:resetNetwork": [["rule:admin_api"]],
+    "compute_extension:admin_actions:injectNetworkInfo": [["rule:admin_api"]],
+    "compute_extension:admin_actions:createBackup": [["role:admin"]],
+    "compute_extension:admin_actions:migrateLive": [["rule:admin_api"]],
+    "compute_extension:admin_actions:resetState": [["rule:admin_api"]],
+    "compute_extension:admin_actions:migrate": [["rule:admin_api"]],
+    "compute_extension:aggregates": [["rule:admin_api"]],
+    "compute_extension:certificates": [],
+    "compute_extension:cloudpipe": [["rule:admin_api"]],
+    "compute_extension:console_output": [["rule:admin_or_projectadmin"]],
+    "compute_extension:consoles": [["rule:admin_api"]],
+    "compute_extension:createserverext": [["rule:admin_or_projectadmin"]],
+    "compute_extension:deferred_delete": [["rule:admin_or_projectadmin"]],
+    "compute_extension:disk_config": [["rule:admin_or_projectadmin"]],
+    "compute_extension:extended_server_attributes": [],
+    "compute_extension:extended_status": [],
+    "compute_extension:flavor_access": [],
+    "compute_extension:flavor_disabled": [],
+    "compute_extension:flavor_rxtx": [],
+    "compute_extension:flavor_swap": [],
+    "compute_extension:flavorextradata": [],
+    "compute_extension:flavorextraspecs": [],
+    "compute_extension:flavormanage": [["rule:admin_api"]],
+    "compute_extension:floating_ip_dns": [["rule:admin_or_projectadmin"]],
+    "compute_extension:floating_ip_pools": [["rule:admin_or_projectadmin"]],
+    "compute_extension:floating_ips": [["rule:admin_or_projectadmin"]],
+    "compute_extension:hosts": [["rule:admin_api"]],
+    "compute_extension:hypervisors": [["rule:admin_api"]],
+    "compute_extension:instance_usage_audit_log": [["rule:admin_api"]],
+    "compute_extension:keypairs": "!",
+    "compute_extension:keypairs:create": "!",
+    "compute_extension:multinic": [["rule:admin_or_projectadmin"]],
+    "compute_extension:networks": [],
+    "compute_extension:networks:view": [],
+    "compute_extension:quotas:show": [["rule:admin_or_member"]],
+    "compute_extension:quotas:update": [["rule:admin_api"]],
+    "compute_extension:quota_classes": [["rule:admin_or_projectadmin"]],
+    "compute_extension:rescue": [["rule:admin_or_projectadmin"]],
+    "compute_extension:security_groups": [["rule:admin_or_projectadmin"]],
+    "compute_extension:server_diagnostics": [["rule:admin_api"]],
+    "compute_extension:simple_tenant_usage:show": [["rule:admin_or_member"]],
+    "compute_extension:simple_tenant_usage:list": [["rule:admin_api"]],
+    "compute_extension:users": [["rule:admin_api"]],
+    "compute_extension:virtual_interfaces": [["rule:admin_or_projectadmin"]],
+    "compute_extension:virtual_storage_arrays": [["rule:admin_or_projectadmin"]],
+    "compute_extension:volumes": [["rule:admin_or_projectadmin"]],
+    "compute_extension:volumetypes": [["rule:admin_or_projectadmin"]],
+
+    "compute:volume_snapshot_create": "!",
+    "compute:volume_snapshot_delete": "!",
+    "compute:resize": "!",
+    "compute:confirm_resize": "!",
+    "compute:revert_resize": "!",
+
+    "volume:create": [["rule:admin_or_projectadmin"]],
+    "volume:get_all": [],
+    "volume:get_volume_metadata": [],
+    "volume:get_snapshot": "!",
+    "volume:get_all_snapshots": "!",
+    "volume:create_snapshot": "!",
+
+
+    "volume_extension:types_manage": [["rule:admin_api"]],
+    "volume_extension:types_extra_specs": [["rule:admin_api"]],
+    "volume_extension:volume_admin_actions:reset_status": [["rule:admin_api"]],
+    "volume_extension:snapshot_admin_actions:reset_status": [["rule:admin_api"]],
+    "volume_extension:volume_admin_actions:force_delete": [["rule:admin_api"]],
+
+
+    "network:get_all_networks": [],
+    "network:get_network": [],
+    "network:delete_network": [["rule:admin_api"]],
+    "network:disassociate_network": [["rule:admin_or_projectadmin"]],
+    "network:get_vifs_by_instance": [],
+    "network:allocate_for_instance": [["rule:admin_or_projectadmin"]],
+    "network:deallocate_for_instance": [["rule:admin_or_projectadmin"]],
+    "network:validate_networks": [],
+    "network:get_instance_uuids_by_ip_filter": [],
+
+    "network:get_floating_ip": [],
+    "network:get_floating_ip_pools": [],
+    "network:get_floating_ip_by_address": [],
+    "network:get_floating_ips_by_project": [],
+    "network:get_floating_ips_by_fixed_address": [],
+    "network:allocate_floating_ip": [["rule:admin_or_projectadmin"]],
+    "network:deallocate_floating_ip": [["rule:admin_or_projectadmin"]],
+    "network:associate_floating_ip": [["rule:admin_or_projectadmin"]],
+    "network:disassociate_floating_ip": [["rule:admin_or_projectadmin"]],
+
+    "network:get_fixed_ip": [],
+    "network:get_fixed_ip_by_address": [],
+    "network:add_fixed_ip_to_instance": [["rule:admin_or_projectadmin"]],
+    "network:remove_fixed_ip_from_instance": [["rule:admin_or_projectadmin"]],
+    "network:add_network_to_project": [["rule:admin_or_projectadmin"]],
+    "network:get_instance_nw_info": [],
+
+    "network:get_dns_domains": [],
+    "network:add_dns_entry": [["rule:admin_or_projectadmin"]],
+    "network:modify_dns_entry": [["rule:admin_or_projectadmin"]],
+    "network:delete_dns_entry": [["rule:admin_or_projectadmin"]],
+    "network:get_dns_entries_by_address": [],
+    "network:get_dns_entries_by_name": [],
+    "network:create_private_dns_domain": [["rule:admin_or_projectadmin"]],
+    "network:create_public_dns_domain": [["rule:admin_or_projectadmin"]],
+    "network:delete_dns_domain": [["rule:admin_or_projectadmin"]]
+}
diff --git a/modules/openstack2/files/mitaka/horizon/openstack_auth/backend.py b/modules/openstack2/files/mitaka/horizon/openstack_auth/backend.py
new file mode 100644
index 0000000..d8f8346
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/openstack_auth/backend.py
@@ -0,0 +1,321 @@
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#    http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+# implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+""" Module defining the Django auth backend class for the Keystone API. """
+
+import datetime
+import logging
+import pytz
+
+from django.conf import settings
+from django.utils.module_loading import import_string  # noqa
+from django.utils.translation import ugettext_lazy as _
+from keystoneauth1 import exceptions as keystone_exceptions
+
+from openstack_auth import exceptions
+from openstack_auth import user as auth_user
+from openstack_auth import utils
+
+
+LOG = logging.getLogger(__name__)
+
+
+KEYSTONE_CLIENT_ATTR = "_keystoneclient"
+
+
+class KeystoneBackend(object):
+    """Django authentication backend for use with ``django.contrib.auth``."""
+
+    def __init__(self):
+        self._auth_plugins = None
+
+    @property
+    def auth_plugins(self):
+        if self._auth_plugins is None:
+            plugins = getattr(
+                settings,
+                'AUTHENTICATION_PLUGINS',
+                ['openstack_auth.plugin.password.PasswordPlugin',
+                 'openstack_auth.plugin.token.TokenPlugin'])
+
+            self._auth_plugins = [import_string(p)() for p in plugins]
+
+        return self._auth_plugins
+
+    def check_auth_expiry(self, auth_ref, margin=None):
+        if not utils.is_token_valid(auth_ref, margin):
+            msg = _("The authentication token issued by the Identity service "
+                    "has expired.")
+            LOG.warning("The authentication token issued by the Identity "
+                        "service appears to have expired before it was "
+                        "issued. This may indicate a problem with either your "
+                        "server or client configuration.")
+            raise exceptions.KeystoneAuthException(msg)
+        return True
+
+    def get_user(self, user_id):
+        """Returns the current user from the session data.
+
+        If authenticated, this return the user object based on the user ID
+        and session data.
+
+        Note: this required monkey-patching the ``contrib.auth`` middleware
+        to make the ``request`` object available to the auth backend class.
+        """
+        if (hasattr(self, 'request') and
+                user_id == self.request.session["user_id"]):
+            token = self.request.session['token']
+            endpoint = self.request.session['region_endpoint']
+            services_region = self.request.session['services_region']
+            user = auth_user.create_user_from_token(self.request, token,
+                                                    endpoint, services_region)
+            return user
+        else:
+            return None
+
+    def authenticate(self, auth_url=None, **kwargs):
+        """Authenticates a user via the Keystone Identity API."""
+        LOG.debug('Beginning user authentication')
+
+        if not auth_url:
+            auth_url = settings.OPENSTACK_KEYSTONE_URL
+
+        auth_url = utils.fix_auth_url_version(auth_url)
+
+        for plugin in self.auth_plugins:
+            unscoped_auth = plugin.get_plugin(auth_url=auth_url, **kwargs)
+
+            if unscoped_auth:
+                break
+        else:
+            msg = _('No authentication backend could be determined to '
+                    'handle the provided credentials.')
+            LOG.warn('No authentication backend could be determined to '
+                     'handle the provided credentials. This is likely a '
+                     'configuration error that should be addressed.')
+            raise exceptions.KeystoneAuthException(msg)
+
+        session = utils.get_session()
+        keystone_client_class = utils.get_keystone_client().Client
+
+        try:
+            unscoped_auth_ref = unscoped_auth.get_access(session)
+        except keystone_exceptions.ConnectFailure as exc:
+            LOG.error(str(exc))
+            msg = _('Unable to establish connection to keystone endpoint.')
+            raise exceptions.KeystoneAuthException(msg)
+        except (keystone_exceptions.Unauthorized,
+                keystone_exceptions.Forbidden,
+                keystone_exceptions.NotFound) as exc:
+            LOG.debug(str(exc))
+            raise exceptions.KeystoneAuthException(_('Invalid credentials.'))
+        except (keystone_exceptions.ClientException,
+                keystone_exceptions.AuthorizationFailure) as exc:
+            msg = _("An error occurred authenticating. "
+                    "Please try again later.")
+            LOG.debug(str(exc))
+            raise exceptions.KeystoneAuthException(msg)
+
+        # Check expiry for our unscoped auth ref.
+        self.check_auth_expiry(unscoped_auth_ref)
+
+        # domain support can require domain scoped tokens to perform
+        # identity operations depending on the policy files being used
+        # for keystone.
+        domain_auth = None
+        domain_auth_ref = None
+        if utils.get_keystone_version() >= 3 and 'user_domain_name' in kwargs:
+            try:
+                token = unscoped_auth_ref.auth_token
+                domain_auth = utils.get_token_auth_plugin(
+                    auth_url,
+                    token,
+                    domain_name=kwargs['user_domain_name'])
+                domain_auth_ref = domain_auth.get_access(session)
+            except Exception:
+                LOG.debug('Error getting domain scoped token.', exc_info=True)
+
+        projects = plugin.list_projects(session,
+                                        unscoped_auth,
+                                        unscoped_auth_ref)
+        # Attempt to scope only to enabled projects
+        projects = [project for project in projects if project.enabled]
+
+        # Abort if there are no projects for this user and a valid domain
+        # token has not been obtained
+        #
+        # The valid use cases for a user login are:
+        #    Keystone v2: user must have a role on a project and be able
+        #                 to obtain a project scoped token
+        #    Keystone v3: 1) user can obtain a domain scoped token (user
+        #                    has a role on the domain they authenticated to),
+        #                    only, no roles on a project
+        #                 2) user can obtain a domain scoped token and has
+        #                    a role on a project in the domain they
+        #                    authenticated to (and can obtain a project scoped
+        #                    token)
+        #                 3) user cannot obtain a domain scoped token, but can
+        #                    obtain a project scoped token
+        if not projects and not domain_auth_ref:
+            msg = _('You are not authorized for any projects.')
+            if utils.get_keystone_version() >= 3:
+                msg = _('You are not authorized for any projects or domains.')
+            raise exceptions.KeystoneAuthException(msg)
+
+        # the recent project id a user might have set in a cookie
+        recent_project = None
+        request = kwargs.get('request')
+
+        if request:
+            # Grab recent_project found in the cookie, try to scope
+            # to the last project used.
+            recent_project = request.COOKIES.get('recent_project')
+
+        # if a most recent project was found, try using it first
+        if recent_project:
+            for pos, project in enumerate(projects):
+                if project.id == recent_project:
+                    # move recent project to the beginning
+                    projects.pop(pos)
+                    projects.insert(0, project)
+                    break
+
+        for project in projects:
+            token = unscoped_auth_ref.auth_token
+            scoped_auth = utils.get_token_auth_plugin(auth_url,
+                                                      token=token,
+                                                      project_id=project.id)
+
+            try:
+                scoped_auth_ref = scoped_auth.get_access(session)
+            except (keystone_exceptions.ClientException,
+                    keystone_exceptions.AuthorizationFailure):
+                pass
+            else:
+                break
+        else:
+            # if the user can't obtain a project scoped token, set the scoped
+            # token to be the domain token, if valid
+            if domain_auth_ref:
+                scoped_auth = domain_auth
+                scoped_auth_ref = domain_auth_ref
+            else:
+                # if no domain or project token for user, abort
+                msg = _("Unable to authenticate to any available projects.")
+                raise exceptions.KeystoneAuthException(msg)
+
+        # Check expiry for our new scoped token.
+        self.check_auth_expiry(scoped_auth_ref)
+
+        interface = getattr(settings, 'OPENSTACK_ENDPOINT_TYPE', 'public')
+
+        # If we made it here we succeeded. Create our User!
+        unscoped_token = unscoped_auth_ref.auth_token
+        user = auth_user.create_user_from_token(
+            request,
+            auth_user.Token(scoped_auth_ref, unscoped_token=unscoped_token),
+            scoped_auth_ref.service_catalog.url_for(service_type='identity',
+                                                    interface=interface))
+
+        if request is not None:
+            request.session['unscoped_token'] = unscoped_token
+            if domain_auth_ref:
+                # check django session engine, if using cookies, this will not
+                # work, as it will overflow the cookie so don't add domain
+                # scoped token to the session and put error in the log
+                if utils.using_cookie_backed_sessions():
+                    LOG.error('Using signed cookies as SESSION_ENGINE with '
+                              'OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT is '
+                              'enabled. This disables the ability to '
+                              'perform identity operations due to cookie size '
+                              'constraints.')
+                else:
+                    request.session['domain_token'] = domain_auth_ref
+
+            request.user = user
+
+            # Custom hack for WMF:
+            if 'extended_session' in kwargs and kwargs['extended_session']:
+                timeout = getattr(settings, "SESSION_TIMEOUT", 86400)
+            else:
+                timeout = getattr(settings, "SESSION_SHORT_TIMEOUT", 1800)
+
+            token_life = user.token.expires - datetime.datetime.now(pytz.utc)
+
+            # Fix for https://bugs.launchpad.net/django-openstack-auth/+bug/1562452:
+            session_time = min(timeout, int(token_life.total_seconds()))
+
+            request.session.set_expiry(session_time)
+
+            scoped_client = keystone_client_class(session=session,
+                                                  auth=scoped_auth)
+
+            # Support client caching to save on auth calls.
+            setattr(request, KEYSTONE_CLIENT_ATTR, scoped_client)
+
+        LOG.debug('Authentication completed.')
+        return user
+
+    def get_group_permissions(self, user, obj=None):
+        """Returns an empty set since Keystone doesn't support "groups"."""
+        # Keystone V3 added "groups". The Auth token response includes the
+        # roles from the user's Group assignment. It should be fine just
+        # returning an empty set here.
+        return set()
+
+    def get_all_permissions(self, user, obj=None):
+        """Returns a set of permission strings that the user has.
+
+        This permission available to the user is derived from the user's
+        Keystone "roles".
+
+        The permissions are returned as ``"openstack.{{ role.name }}"``.
+        """
+        if user.is_anonymous() or obj is not None:
+            return set()
+        # TODO(gabrielhurley): Integrate policy-driven RBAC
+        #                      when supported by Keystone.
+        role_perms = {"openstack.roles.%s" % role['name'].lower()
+                      for role in user.roles}
+
+        services = []
+        for service in user.service_catalog:
+            try:
+                service_type = service['type']
+            except KeyError:
+                continue
+            service_regions = [utils.get_endpoint_region(endpoint) for endpoint
+                               in service.get('endpoints', [])]
+            if user.services_region in service_regions:
+                services.append(service_type.lower())
+        service_perms = {"openstack.services.%s" % service
+                         for service in services}
+        return role_perms | service_perms
+
+    def has_perm(self, user, perm, obj=None):
+        """Returns True if the given user has the specified permission."""
+        if not user.is_active:
+            return False
+        return perm in self.get_all_permissions(user, obj)
+
+    def has_module_perms(self, user, app_label):
+        """Returns True if user has any permissions in the given app_label.
+
+        Currently this matches for the app_label ``"openstack"``.
+        """
+        if not user.is_active:
+            return False
+        for perm in self.get_all_permissions(user):
+            if perm[:perm.index('.')] == app_label:
+                return True
+        return False
diff --git a/modules/openstack2/files/mitaka/horizon/openstack_auth/forms.py b/modules/openstack2/files/mitaka/horizon/openstack_auth/forms.py
new file mode 100644
index 0000000..af9c0da
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/openstack_auth/forms.py
@@ -0,0 +1,160 @@
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#    http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+# implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import collections
+import logging
+
+import django
+from django.conf import settings
+from django.contrib.auth import authenticate  # noqa
+from django.contrib.auth import forms as django_auth_forms
+from django import forms
+from django.utils.translation import ugettext_lazy as _
+from django.views.decorators.debug import sensitive_variables  # noqa
+
+from openstack_auth import exceptions
+from openstack_auth import utils
+
+
+LOG = logging.getLogger(__name__)
+
+
+class Login(django_auth_forms.AuthenticationForm):
+    """Form used for logging in a user.
+
+    Handles authentication with Keystone by providing the domain name, username
+    and password. A scoped token is fetched after successful authentication.
+
+    A domain name is required if authenticating with Keystone V3 running
+    multi-domain configuration.
+
+    If the user authenticated has a default project set, the token will be
+    automatically scoped to their default project.
+
+    If the user authenticated has no default project set, the authentication
+    backend will try to scope to the projects returned from the user's assigned
+    projects. The first successful project scoped will be returned.
+
+    Inherits from the base ``django.contrib.auth.forms.AuthenticationForm``
+    class for added security features.
+    """
+    region = forms.ChoiceField(label=_("Region"), required=False)
+    username = forms.CharField(
+        label=_("User Name"),
+        widget=forms.TextInput(attrs={"autofocus": "autofocus"}),
+        help_text="This username and password are the same as those used "
+                  "to log in at wikitech.wikimedia.org.")
+    password = forms.CharField(label=_("Password"),
+                               widget=forms.PasswordInput(render_value=False))
+    totptoken = forms.CharField(label=_("Two-factor authentication code"),
+                                widget=forms.TextInput(),
+                                help_text="Login requires two-factor "
+                                          "authentication.  To enable it, "
+                                          "visit Preferences->User "
+                                          "Profile in your Wikitech account")
+    rememberme = forms.BooleanField(label=_("Remember me"),
+                                    help_text="Stay logged in for up to 7 "
+                                              "days of inactivity.",
+                                    required=False)
+
+    def __init__(self, *args, **kwargs):
+        super(Login, self).__init__(*args, **kwargs)
+        fields_ordering = ['username', 'password', 'totptoken', 'rememberme', 'region']
+        if getattr(settings,
+                   'OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT',
+                   False):
+            last_domain = self.request.COOKIES.get('login_domain', None)
+            self.fields['domain'] = forms.CharField(
+                initial=last_domain,
+                label=_("Domain"),
+                required=True,
+                widget=forms.TextInput(attrs={"autofocus": "autofocus"}))
+            self.fields['username'].widget = forms.widgets.TextInput()
+            fields_ordering = ['domain', 'username', 'password',
+                               'totptoken', 'rememberme', 'region']
+        self.fields['region'].choices = self.get_region_choices()
+        if len(self.fields['region'].choices) == 1:
+            self.fields['region'].initial = self.fields['region'].choices[0][0]
+            self.fields['region'].widget = forms.widgets.HiddenInput()
+        elif len(self.fields['region'].choices) > 1:
+            self.fields['region'].initial = self.request.COOKIES.get(
+                'login_region')
+
+        # if websso is enabled and keystone version supported
+        # prepend the websso_choices select input to the form
+        if utils.is_websso_enabled():
+            initial = getattr(settings, 'WEBSSO_INITIAL_CHOICE', 'credentials')
+            self.fields['auth_type'] = forms.ChoiceField(
+                label=_("Authenticate using"),
+                choices=getattr(settings, 'WEBSSO_CHOICES', ()),
+                required=False,
+                initial=initial)
+            # add auth_type to the top of the list
+            fields_ordering.insert(0, 'auth_type')
+
+        # websso is enabled, but keystone version is not supported
+        elif getattr(settings, 'WEBSSO_ENABLED', False):
+            msg = ("Websso is enabled but horizon is not configured to work " +
+                   "with keystone version 3 or above.")
+            LOG.warning(msg)
+        # Starting from 1.7 Django uses OrderedDict for fields and keyOrder
+        # no longer works for it
+        if django.VERSION >= (1, 7):
+            self.fields = collections.OrderedDict(
+                (key, self.fields[key]) for key in fields_ordering)
+        else:
+            self.fields.keyOrder = fields_ordering
+
+    @staticmethod
+    def get_region_choices():
+        default_region = (settings.OPENSTACK_KEYSTONE_URL, "Default Region")
+        regions = getattr(settings, 'AVAILABLE_REGIONS', [])
+        if not regions:
+            regions = [default_region]
+        return regions
+
+    @sensitive_variables()
+    def clean(self):
+        default_domain = getattr(settings,
+                                 'OPENSTACK_KEYSTONE_DEFAULT_DOMAIN',
+                                 'Default')
+        username = self.cleaned_data.get('username')
+        password = self.cleaned_data.get('password')
+        token = self.cleaned_data.get('totptoken')
+        remember = self.cleaned_data.get('rememberme')
+        region = self.cleaned_data.get('region')
+        domain = self.cleaned_data.get('domain', default_domain)
+
+        if not (username and password and token):
+            # Don't authenticate, just let the other validators handle it.
+            return self.cleaned_data
+
+        try:
+            self.user_cache = authenticate(request=self.request,
+                                           username=username,
+                                           password=password,
+                                           totp=token,
+                                           extended_session=remember,
+                                           user_domain_name=domain,
+                                           auth_url=region)
+            msg = 'Login successful for user "%(username)s".' % \
+                {'username': username}
+            LOG.info(msg)
+        except exceptions.KeystoneAuthException as exc:
+            msg = 'Login failed for user "%(username)s".' % \
+                {'username': username}
+            LOG.warning(msg)
+            raise forms.ValidationError(exc)
+        if hasattr(self, 'check_for_test_cookie'):  # Dropped in django 1.7
+            self.check_for_test_cookie()
+        return self.cleaned_data
diff --git a/modules/openstack2/files/mitaka/horizon/openstack_auth/wmtotp.py b/modules/openstack2/files/mitaka/horizon/openstack_auth/wmtotp.py
new file mode 100644
index 0000000..ee53cf6
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/openstack_auth/wmtotp.py
@@ -0,0 +1,47 @@
+# Licensed under the Apache License, Version 2.0 (the "License"); you may
+# not use this file except in compliance with the License. You may obtain
+# a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+# License for the specific language governing permissions and limitations
+# under the License.
+
+import logging
+
+from keystoneclient.auth.identity import v3 as v3_auth
+
+from openstack_auth.plugin import base
+from openstack_auth import exceptions
+from openstack_auth import utils
+
+LOG = logging.getLogger(__name__)
+
+__all__ = ['WmtotpPlugin']
+
+
+class WmtotpPlugin(base.BasePlugin):
+    """Authenticate against keystone given a username, password, totp token.
+    """
+
+    def get_plugin(self, auth_url=None, username=None, password=None,
+                   user_domain_name=None, totp=None, **kwargs):
+        if not all((auth_url, username, password, totp)):
+            return None
+
+        LOG.debug('Attempting to authenticate for %s', username)
+
+        if utils.get_keystone_version() >= 3:
+            return v3_auth.Wmtotp(auth_url=auth_url,
+                                  username=username,
+                                  password=password,
+                                  totp=totp,
+                                  user_domain_name=user_domain_name,
+                                  unscoped=True)
+
+        else:
+            msg = "Totp authentication requires the keystone v3 api."
+            raise exceptions.KeystoneAuthException(msg)
diff --git a/modules/openstack2/files/mitaka/horizon/overrides.py b/modules/openstack2/files/mitaka/horizon/overrides.py
new file mode 100644
index 0000000..91df1ef
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/overrides.py
@@ -0,0 +1,180 @@
+import socket
+from urlparse import urlparse
+
+from designatedashboard.dashboards.project.dns_domains import tables as ddtables
+from django.utils.translation import ugettext_lazy as _  # noqa
+from django.conf import settings
+from horizon import tables
+from openstack_dashboard.api import keystone
+
+#  --  Tidy up the instance creation panel  --
+
+from openstack_dashboard.dashboards.project.instances.workflows import create_instance
+#  Remove a couple of unwanted tabs from the instance creation panel:
+#   PostCreationStep just provides confusing competition with puppet.
+#   SetAdvanced provides broken features like configdrive and partitioning.
+
+create_instance.LaunchInstance.default_steps = (create_instance.SelectProjectUser,
+                                                create_instance.SetInstanceDetails,
+                                                create_instance.SetAccessControls,
+                                                create_instance.SetNetwork)
+
+
+# Disable the UpdateInstanceInfo tab.  All that supports is instance renaming, which is
+#  risky and breaks compatibility with wikitech.
+from openstack_dashboard.dashboards.project.instances.workflows import update_instance
+# Previously (UpdateInstanceInfo, UpdateInstanceSecurityGroups)
+update_instance.UpdateInstance.default_steps = (update_instance.UpdateInstanceSecurityGroups,)
+
+#  --  Support proxy records in the designate dashboard  --
+
+
+# In the designate dashboard, we have some records that are special
+#  and maanged by the proxy dashboard.  We need to remove the edit/delete
+#  buttons for those records and instead add a button that jumps to
+#  the proxy panel.
+
+PROXYIP = None
+
+
+def recordIsProxy(request, record):
+    global PROXYIP
+    if not PROXYIP:
+        # Leap of faith:  Assume the proxy-api host is also the proxy host.
+        #  So, get the proxy endpoint from keystone, convert to an IP,
+        #  and compare to 'record'
+
+        client = keystone.keystoneclient(request)
+        services = client.services.list()
+
+        proxyservices = [service for service in services if service.name == 'proxy']
+        endpoints = client.endpoints.list(service=proxyservices[0].id)
+        proxyurl = endpoints[0].url
+
+        parsed_uri = urlparse(proxyurl)
+        domain = parsed_uri.hostname
+        PROXYIP = socket.gethostbyname_ex(domain)[2][0]
+
+    return record.data == PROXYIP
+
+
+# Disable the 'edit' and 'delete' button for proxies...
+class EditRecord(ddtables.EditRecord):
+
+    def allowed(self, request, record=None):
+        if recordIsProxy(request, record):
+            return False
+        else:
+            return record.type in ddtables.EDITABLE_RECORD_TYPES
+
+
+class DeleteRecord(ddtables.DeleteRecord):
+
+    def allowed(self, request, record=None):
+        if recordIsProxy(request, record):
+            return False
+        else:
+            return record.type in ddtables.EDITABLE_RECORD_TYPES
+
+
+# And put an 'edit proxies' button in their place
+class EditProxies(tables.LinkAction):
+    '''Link action for a record created by the dynamic proxy panel.'''
+    name = "edit_proxies"
+    verbose_name = _("Edit Proxies")
+    classes = ("btn-edit")
+    policy_rules = (("dns", "update_record"),)
+
+    def get_link_url(self, datum=None):
+        return "/project/proxy"
+
+    def allowed(self, request, record=None):
+        return recordIsProxy(request, record)
+
+
+class RecordsTableWithProxies(ddtables.RecordsTable):
+
+    class Meta(object):
+        name = "records"
+        verbose_name = _("Records")
+        table_actions = (ddtables.CreateRecord,)
+        row_actions = (EditRecord, DeleteRecord, EditProxies)
+        multi_select = False
+
+
+ddtables.RecordsTable = RecordsTableWithProxies
+
+
+#  --  Fix a bug in quota calculations, T142379 --
+from openstack_dashboard.api import base
+from openstack_dashboard.api import nova
+from horizon import exceptions
+
+
+def _get_tenant_compute_usages_fixed(request, usages, disabled_quotas, tenant_id):
+    # Unlike the other services it can be the case that nova is enabled but
+    # doesn't support quotas, in which case we still want to get usage info,
+    # so don't rely on '"instances" in disabled_quotas' as elsewhere
+    if not base.is_service_enabled(request, 'compute'):
+        return
+
+    if tenant_id:
+        # determine if the user has permission to view across projects
+        # there are cases where an administrator wants to check the quotas
+        # on a project they are not scoped to
+        instances, has_more = nova.server_list(
+            request, search_opts={'tenant_id': tenant_id})
+    else:
+        instances, has_more = nova.server_list(request)
+
+    # Fetch deleted flavors if necessary.
+    flavors = dict([(f.id, f) for f in nova.flavor_list(request)])
+    missing_flavors = [instance.flavor['id'] for instance in instances
+                       if instance.flavor['id'] not in flavors]
+    for missing in missing_flavors:
+        if missing not in flavors:
+            try:
+                flavors[missing] = nova.flavor_get(request, missing)
+            except Exception:
+                flavors[missing] = {}
+                exceptions.handle(request, ignore=True)
+
+    usages.tally('instances', len(instances))
+
+    # Sum our usage based on the flavors of the instances.
+    for flavor in [flavors[instance.flavor['id']] for instance in instances]:
+        usages.tally('cores', getattr(flavor, 'vcpus', None))
+        usages.tally('ram', getattr(flavor, 'ram', None))
+
+    # Initialize the tally if no instances have been launched yet
+    if len(instances) == 0:
+        usages.tally('cores', 0)
+        usages.tally('ram', 0)
+
+
+from openstack_dashboard.usage import quotas
+quotas._get_tenant_compute_usages = _get_tenant_compute_usages_fixed
+
+
+# Backport a fix which evaulates policy rules improperly
+# https://bugs.launchpad.net/horizon/+bug/1653792
+def _can_access_fixed(self, request):
+    policy_check = getattr(settings, "POLICY_CHECK_FUNCTION", None)
+
+    # this check is an OR check rather than an AND check that is the
+    # default in the policy engine, so calling each rule individually
+    if policy_check and self.policy_rules:
+        for rule in self.policy_rules:
+            rule_param = rule
+            if not any(isinstance(r, (list, tuple)) for r in rule):
+                rule_param = (rule,)
+            if policy_check(rule_param, request):
+                return True
+        return False
+
+    # default to allowed
+    return True
+
+
+from horizon import base as horizonbase
+horizonbase.HorizonComponent._can_access = _can_access_fixed
diff --git a/modules/openstack2/files/mitaka/horizon/proxy/__init__.py b/modules/openstack2/files/mitaka/horizon/proxy/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/modules/openstack2/files/mitaka/horizon/proxy/panel.py b/modules/openstack2/files/mitaka/horizon/proxy/panel.py
new file mode 100644
index 0000000..b128a67
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/proxy/panel.py
@@ -0,0 +1,20 @@
+# Licensed under the Apache License, Version 2.0 (the "License"); you may
+# not use this file except in compliance with the License. You may obtain
+# a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+# License for the specific language governing permissions and limitations
+# under the License.
+
+from django.utils.translation import ugettext_lazy as _
+import horizon
+
+
+class Proxy(horizon.Panel):
+    name = _("Web Proxies")
+    slug = "proxy"
+    policy_rules = (("dns", "get_records"),)
diff --git a/modules/openstack2/files/mitaka/horizon/proxy/templates/proxy/_create.html b/modules/openstack2/files/mitaka/horizon/proxy/templates/proxy/_create.html
new file mode 100644
index 0000000..cb8b11a
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/proxy/templates/proxy/_create.html
@@ -0,0 +1,12 @@
+{% extends "horizon/common/_modal_form.html" %}
+{% load i18n %}
+
+{% block form_attrs %}enctype="multipart/form-data"{% endblock %}
+
+
+{% block modal-body-right %}
+  <h3>{% trans "Description:" %}</h3>
+  <p>
+     {% trans "A <a href='https://wikitech.wikimedia.org/wiki/Help:Proxy'>web proxy</a> will relay web traffic from the specified hostname to the backend instance.  The proxy will also provide ssl termination." %}
+  </p>
+{% endblock %}
diff --git a/modules/openstack2/files/mitaka/horizon/proxy/templates/proxy/create.html b/modules/openstack2/files/mitaka/horizon/proxy/templates/proxy/create.html
new file mode 100644
index 0000000..52c987d
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/proxy/templates/proxy/create.html
@@ -0,0 +1,8 @@
+{% extends 'base.html' %}
+{% load i18n %}
+{% block title %}{% trans "Create A Proxy" %}{% endblock %}
+
+{% block main %}
+  {% include 'project/proxy/_create.html' %}
+{% endblock %}
+
diff --git a/modules/openstack2/files/mitaka/horizon/proxy/templates/proxy/index.html b/modules/openstack2/files/mitaka/horizon/proxy/templates/proxy/index.html
new file mode 100644
index 0000000..788a093
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/proxy/templates/proxy/index.html
@@ -0,0 +1,13 @@
+{% extends 'base.html' %}
+{% load i18n %}
+{% block title %}{% trans "Proxy" %}{% endblock %}
+
+{% block page_header %}
+  {% include "horizon/common/_page_header.html" with title=_("Proxy") %}
+{% endblock page_header %}
+
+{% block main %}
+  {{ table.render }}
+{% endblock %}
+
+
diff --git a/modules/openstack2/files/mitaka/horizon/proxy/urls.py b/modules/openstack2/files/mitaka/horizon/proxy/urls.py
new file mode 100644
index 0000000..e39bfa8
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/proxy/urls.py
@@ -0,0 +1,21 @@
+# Licensed under the Apache License, Version 2.0 (the "License"); you may
+# not use this file except in compliance with the License. You may obtain
+# a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+# License for the specific language governing permissions and limitations
+# under the License.
+
+from django.conf.urls import url
+
+from wikimediaproxydashboard import views
+
+
+urlpatterns = [
+    url(r'^$', views.IndexView.as_view(), name='index'),
+    url(r'^create/$', views.CreateView.as_view(), name='create'),
+]
diff --git a/modules/openstack2/files/mitaka/horizon/proxy/views.py b/modules/openstack2/files/mitaka/horizon/proxy/views.py
new file mode 100644
index 0000000..d308a41
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/proxy/views.py
@@ -0,0 +1,307 @@
+# Licensed under the Apache License, Version 2.0 (the "License"); you may
+# not use this file except in compliance with the License. You may obtain
+# a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+# License for the specific language governing permissions and limitations
+# under the License.
+
+import logging
+
+from django.conf import settings
+from django.core.urlresolvers import reverse_lazy
+from django.utils.translation import ungettext_lazy
+from django.utils.translation import ugettext_lazy as _
+
+from django.forms import TextInput
+
+from horizon import exceptions
+from horizon import forms
+from horizon import tables
+
+from openstack_dashboard.api import base, nova
+
+# Designate v1 API, for normal use
+import designatedashboard.api.designate as designateapi
+from designateclient.v1.records import Record
+
+# Designate v2 API, currently only for wmflabs.org
+from keystoneclient.auth.identity import generic as identity_generic
+from keystoneclient import session as keystone_session
+from designateclient.v2 import client as designateclientv2
+
+import json
+import requests
+import socket
+import urlparse
+
+LOG = logging.getLogger(__name__)
+
+
+class CreateProxy(tables.LinkAction):
+    name = "create"
+    verbose_name = _("Create Proxy")
+    url = "horizon:project:proxy:create"
+    classes = ("ajax-modal",)
+    icon = "plus"
+    policy_rules = (("dns", "create_record"),)
+
+
+class DeleteProxy(tables.DeleteAction):
+
+    @staticmethod
+    def action_present(count):
+        return ungettext_lazy(u"Delete Proxy", u"Delete Proxies", count)
+
+    @staticmethod
+    def action_past(count):
+        return ungettext_lazy(u"Deleted Proxy", u"Deleted Proxies", count)
+
+    policy_rules = (("dns", "delete_record"),)
+
+    def delete(self, request, obj_id):
+        record = obj_id[:obj_id.find('.')]
+        domain = obj_id[obj_id.find('.') + 1:]
+        if not domain.endswith('.'):
+            domain += '.'
+
+        # First let's make sure that this proxy is really ours to delete.
+        existing_domains = [proxy.domain for proxy in get_proxy_list(request)]
+        if obj_id not in existing_domains:
+            raise Exception(
+                "Proxy \'%s\' is to be deleted but is not owned by this view." % obj_id)
+
+        if domain == 'wmflabs.org.':
+            auth = identity_generic.Password(
+                auth_url=base.url_for(request, 'identity'),
+                username=getattr(settings, "WMFLABSDOTORG_ADMIN_USERNAME", ''),
+                password=getattr(settings, "WMFLABSDOTORG_ADMIN_PASSWORD", ''),
+                tenant_name='wmflabsdotorg',
+                user_domain_id='default',
+                project_domain_id='default'
+            )
+            c = designateclientv2.Client(session=keystone_session.Session(auth=auth))
+
+            # Delete the record from the wmflabsdotorg project. This is needed
+            # since wmflabs.org lives in that project and designate (quite
+            # reasonably) prevents subdomain deletion elsewhere.
+            zoneid = None
+            for zone in c.zones.list():
+                if zone['name'] == 'wmflabs.org.':
+                    zoneid = zone['id']
+                    break
+            else:
+                raise Exception("No zone ID")
+            recordsetid = None
+            for recordset in c.recordsets.list(zoneid):
+                if recordset['type'] == 'A' and recordset['name'] == record + '.' + domain:
+                    recordsetid = recordset['id']
+                    break
+            else:
+                raise Exception("No recordset ID")
+            c.recordsets.delete(zoneid, recordsetid)
+        else:
+            c = designateapi.designateclient(request)
+            domainid = None
+            for d in c.domains.list():
+                if d.name == domain:
+                    domainid = d.id
+                    break
+            else:
+                LOG.warn('Woops! Failed domain ID for domain ' + domain)
+                raise Exception("No domain ID")
+            recordid = None
+            for r in c.records.list(domainid):
+                if r.name == obj_id and r.type == 'A':
+                    recordid = r.id
+                    break
+            else:
+                LOG.warn('Woops! Failed record ID for record ' + record)
+                raise Exception("No record ID")
+
+            c.records.delete(domainid, recordid)
+
+        resp = requests.delete(base.url_for(request, 'proxy') + '/mapping/' + obj_id)
+        if not resp:
+            raise Exception("Got status " + resp.status_code)
+
+
+def get_proxy_backends(proxy):
+    return ', '.join(proxy.backends)
+
+
+class ProxyTable(tables.DataTable):
+    domain = tables.Column("domain", verbose_name=_("DNS Hostname"),)
+    backends = tables.Column(get_proxy_backends, verbose_name=_("Backends"))
+
+    class Meta(object):
+        name = "proxies"
+        verbose_name = _("Proxies")
+        table_actions = (CreateProxy,)
+        row_actions = (DeleteProxy,)
+
+
+class Proxy():
+
+    def __init__(self, domain, backends):
+        self.id = self.domain = domain
+        self.backends = backends
+
+
+def get_proxy_list(request):
+    try:
+        url = base.url_for(request, 'proxy') + '/mapping'
+        resp = requests.get(url)
+        if resp.status_code == 400 and resp.text == 'No such project':
+            proxies = []
+        elif not resp:
+            raise Exception("Got status " + str(resp.status_code))
+        else:
+            proxies = [
+                Proxy(route['domain'], route['backends'])
+                for route in resp.json()['routes']]
+    except Exception:
+        proxies = []
+        exceptions.handle(request, _("Unable to retrieve proxies from %s") % url)
+    return proxies
+
+
+class IndexView(tables.DataTableView):
+    table_class = ProxyTable
+    template_name = 'project/proxy/index.html'
+    page_title = _("Proxies")
+
+    def get_data(self):
+        return get_proxy_list(self.request)
+
+
+class CreateProxyForm(forms.SelfHandlingForm):
+    record = forms.RegexField(
+        max_length=255, label=_("Hostname"),
+        regex="^([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])$",
+        error_messages={
+            "invalid": "This must be a simple hostname without dots or special characters."
+        })
+    domain = forms.ChoiceField(widget=forms.Select(), label=_("Domain"))
+    backendInstance = forms.ChoiceField(widget=forms.Select(), label=_("Backend instance"))
+    backendPort = forms.CharField(
+        widget=TextInput(
+            attrs={
+                'type': 'number'}),
+        label=_("Backend port"))
+
+    def __init__(self, request, *args, **kwargs):
+        kwargs['initial']['backendPort'] = 80
+        super(CreateProxyForm, self).__init__(request, *args, **kwargs)
+        self.fields['backendInstance'].choices = self.populate_instances(request)
+        self.fields['domain'].choices = self.populate_domains(request)
+
+    def populate_instances(self, request):
+        results = [(None, 'Select an instance')]
+        for server in nova.novaclient(request).servers.list():
+            results.append((server.networks['public'][0], server.name))
+        return results
+
+    def populate_domains(self, request):
+        results = [('wmflabs.org.', 'wmflabs.org.')]
+        # results = [(None, 'Select a domain'), ('wmflabs.org.', 'wmflabs.org.')]
+        # for domain in designateapi.designateclient(request).domains.list():
+        # results.append((domain.name, domain.name))
+        return results
+
+    def clean(self):
+        cleaned_data = super(CreateProxyForm, self).clean()
+
+        # TODO: More useful error if domain is invalid? Currently we rely on
+        # designate schema check failing
+
+        if not cleaned_data['backendPort'].isdigit() or int(cleaned_data['backendPort']) > 65535:
+            self._errors['backendPort'] = self.error_class([_('Enter a valid port')])
+
+        return cleaned_data
+
+    def handle(self, request, data):
+        proxyip = socket.gethostbyname(urlparse.urlparse(base.url_for(request, 'proxy')).hostname)
+        if data.get('domain') == 'wmflabs.org.':
+            auth = identity_generic.Password(
+                auth_url=base.url_for(request, 'identity'),
+                username=getattr(settings, "WMFLABSDOTORG_ADMIN_USERNAME", ''),
+                password=getattr(settings, "WMFLABSDOTORG_ADMIN_PASSWORD", ''),
+                tenant_name='wmflabsdotorg',
+                user_domain_id='default',
+                project_domain_id='default'
+            )
+            c = designateclientv2.Client(session=keystone_session.Session(auth=auth))
+
+            LOG.warn('Got create client')
+            # Create the record in the wmflabsdotorg project. This is needed
+            # since wmflabs.org lives in that project and designate prevents
+            # subdomain creation elsewhere.
+            zoneid = None
+            for zone in c.zones.list():
+                if zone['name'] == 'wmflabs.org.':
+                    zoneid = zone['id']
+                    break
+            else:
+                raise Exception("No zone ID")
+            LOG.warn('Got zone ID')
+            c.recordsets.create(zoneid, data.get('record') + '.wmflabs.org.', 'A', [proxyip])
+        else:
+            # TODO: Move this to designate v2 API, reuse some code
+            c = designateapi.designateclient(request)
+            domainid = None
+            for domain in c.domains.list():
+                if domain.name == data.get('domain'):
+                    domainid = domain.id
+                    break
+            else:
+                raise Exception("No domain ID")
+            record = Record(
+                name=data.get('record') +
+                '.' +
+                data.get('domain'),
+                type='A',
+                data=proxyip)
+            c.records.create(domainid, record)
+
+        d = {
+            "backends": ['http://%s:%s' % (
+                data.get('backendInstance'),
+                data.get('backendPort')
+            )],
+            "domain": data.get('record') + '.' + data.get('domain').rstrip('.')
+        }
+
+        try:
+            resp = requests.put(base.url_for(request, 'proxy') + '/mapping', data=json.dumps(d))
+            if resp:
+                return True
+            else:
+                raise Exception("Got status: " + resp.status_code)
+        except Exception:
+            exceptions.handle(self.request, _("Unable to create proxy: " + resp.text))
+            return False
+
+
+class CreateView(forms.ModalFormView):
+    form_class = CreateProxyForm
+    form_id = "create_proxy_form"
+    modal_header = _("Create a Proxy")
+    submit_label = _("Create Proxy")
+    submit_url = reverse_lazy('horizon:project:proxy:create')
+    template_name = 'project/proxy/create.html'
+    context_object_name = 'proxy'
+    success_url = reverse_lazy("horizon:project:proxy:index")
+    page_title = _("Create a Proxy")
+
+    def get_initial(self):
+        initial = {}
+        for name in ['record', 'domain', 'backendInstance', 'backendPort']:
+            tmp = self.request.GET.get(name)
+            if tmp:
+                initial[name] = tmp
+        return initial
diff --git a/modules/openstack2/files/mitaka/horizon/proxy_enable.py b/modules/openstack2/files/mitaka/horizon/proxy_enable.py
new file mode 100644
index 0000000..4bed1d3
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/proxy_enable.py
@@ -0,0 +1,4 @@
+PANEL = 'proxy'
+PANEL_GROUP = 'dns'
+PANEL_DASHBOARD = 'project'
+ADD_PANEL = ('wikimediaproxydashboard.panel.Proxy')
diff --git a/modules/openstack2/files/mitaka/horizon/puppet_group_add.py b/modules/openstack2/files/mitaka/horizon/puppet_group_add.py
new file mode 100644
index 0000000..67f27b7
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/puppet_group_add.py
@@ -0,0 +1,6 @@
+# The name of the panel group to be added to HORIZON_CONFIG. Required.
+PANEL_GROUP = 'puppet'
+# The display name of the PANEL_GROUP. Required.
+PANEL_GROUP_NAME = 'Puppet'
+# The name of the dashboard the PANEL_GROUP associated with. Required.
+PANEL_GROUP_DASHBOARD = 'project'
diff --git a/modules/openstack2/files/mitaka/horizon/puppet_prefix_tab_enable.py b/modules/openstack2/files/mitaka/horizon/puppet_prefix_tab_enable.py
new file mode 100644
index 0000000..4764131
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/puppet_prefix_tab_enable.py
@@ -0,0 +1,5 @@
+PANEL = 'prefixpuppetpanel'
+PANEL_GROUP = 'puppet'
+PANEL_DASHBOARD = 'project'
+ADD_PANEL = ('wikimediapuppettab.prefixpanel.prefixpanel.PrefixPuppetPanel')
+AUTO_DISCOVER_STATIC_FILES = True
diff --git a/modules/openstack2/files/mitaka/horizon/puppet_tab_enable.py b/modules/openstack2/files/mitaka/horizon/puppet_tab_enable.py
new file mode 100644
index 0000000..a2d62ed
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/puppet_tab_enable.py
@@ -0,0 +1,7 @@
+PANEL = 'projectpuppetpanel'
+PANEL_GROUP = 'puppet'
+PANEL_DASHBOARD = 'project'
+ADD_PANEL = ('wikimediapuppettab.projectpanel.ProjectPuppetPanel')
+ADD_INSTALLED_APPS = ['wikimediapuppettab']
+AUTO_DISCOVER_STATIC_FILES = True
+ADD_SCSS_FILES = ['dashboard/puppet/puppet.scss']
diff --git a/modules/openstack2/files/mitaka/horizon/puppettab/__init__.py b/modules/openstack2/files/mitaka/horizon/puppettab/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/modules/openstack2/files/mitaka/horizon/puppettab/prefixpanel/__init__.py b/modules/openstack2/files/mitaka/horizon/puppettab/prefixpanel/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/modules/openstack2/files/mitaka/horizon/puppettab/prefixpanel/plustab.py b/modules/openstack2/files/mitaka/horizon/puppettab/prefixpanel/plustab.py
new file mode 100644
index 0000000..73b1776
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/puppettab/prefixpanel/plustab.py
@@ -0,0 +1,64 @@
+# Copyright (c) 2016 Andrew Bogott for Wikimedia Foundation
+# All Rights Reserved.
+#
+#    Licensed under the Apache License, Version 2.0 (the "License"); you may
+#    not use this file except in compliance with the License. You may obtain
+#    a copy of the License at
+#
+#         http://www.apache.org/licenses/LICENSE-2.0
+#
+#    Unless required by applicable law or agreed to in writing, software
+#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+#    License for the specific language governing permissions and limitations
+#    under the License.
+
+import logging
+import re
+
+from django import template
+from django.template.loader import render_to_string
+from django.utils.translation import ugettext_lazy as _
+
+from wikimediapuppettab.puppet_config import puppet_config
+
+from horizon import exceptions
+from horizon import tabs
+
+logging.basicConfig()
+LOG = logging.getLogger(__name__)
+
+
+class PlusTab(tabs.Tab):
+    name = _("+")
+    slug = "puppetprefixplus"
+    template_name = "project/puppet/plus_tab.html"
+    prefix_name = False
+
+    def __init__(self, *args, **kwargs):
+        if 'tenant_id' in kwargs:
+            self.tenant_id = kwargs['tenant_id']
+            del kwargs['tenant_id']
+
+        super(PlusTab, self).__init__(*args, **kwargs)
+
+    def render(self):
+        context = template.RequestContext(self.request)
+        context['prefix_name'] = self.prefix_name
+        return render_to_string(self.get_template_name(self.request),
+                                self.data, context_instance=context)
+
+    def post(self, request, *args, **kwargs):
+
+        pattern = re.compile("^[A-Za-z][A-Za-z0-9_-]*$")
+        if not pattern.match(request.POST["prefix_name"]):
+            raise exceptions.BadRequest('Prefix must begin with a '
+                                        'letter and contain only letters, '
+                                        'numbers, _ or -.')
+
+        self.prefix_name = request.POST["prefix_name"]
+
+        # set an empty role list for this prefix, to force a
+        #  record creation on the back end.
+        config = puppet_config(self.prefix_name, self.tenant_id)
+        config.set_role_list([])
diff --git a/modules/openstack2/files/mitaka/horizon/puppettab/prefixpanel/prefixpanel.py b/modules/openstack2/files/mitaka/horizon/puppettab/prefixpanel/prefixpanel.py
new file mode 100644
index 0000000..40b2fd6
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/puppettab/prefixpanel/prefixpanel.py
@@ -0,0 +1,91 @@
+# Copyright (c) 2016 Andrew Bogott for Wikimedia Foundation
+# All Rights Reserved.
+#
+#    Licensed under the Apache License, Version 2.0 (the "License"); you may
+#    not use this file except in compliance with the License. You may obtain
+#    a copy of the License at
+#
+#         http://www.apache.org/licenses/LICENSE-2.0
+#
+#    Unless required by applicable law or agreed to in writing, software
+#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+#    License for the specific language governing permissions and limitations
+#    under the License.
+
+
+from collections import OrderedDict
+from django.utils.translation import ugettext_lazy as _
+import horizon
+import logging
+
+from horizon import tabs
+from horizon.tabs import TabGroup
+
+from wikimediapuppettab.tab import PuppetTab
+from wikimediapuppettab.prefixpanel.plustab import PlusTab
+from wikimediapuppettab.puppet_config import puppet_config
+
+logging.basicConfig()
+LOG = logging.getLogger(__name__)
+
+
+class PrefixPuppetPanel(horizon.Panel):
+    name = _("Prefix Puppet")
+    slug = "prefixpuppet"
+
+
+class PrefixTabs(tabs.TabGroup):
+    slug = "prefix_puppet"
+    sticky = False
+
+    def __init__(self, request, **kwargs):
+        super(TabGroup, self).__init__()
+
+        self.request = request
+        self.kwargs = kwargs
+        self._data = None
+        self.request = request
+
+        self.tenant_id = self.request.user.tenant_id
+        self._tabs = OrderedDict(self.get_dynamic_tab_list())
+        if self.sticky:
+            self.attrs['data-sticky-tabs'] = 'sticky'
+        if not self._set_active_tab():
+            self.tabs_not_available()
+
+    def get_dynamic_tab_list(self):
+        prefixlist = puppet_config.get_prefixes(self.tenant_id)
+        LOG.warning("prefixlist: %s" % prefixlist)
+
+        tab_instances = []
+        # One tab per prefix
+        for prefix in prefixlist:
+            # exclude anything with a '.' as those are instance names
+            #  handled on a different UI
+            if '.' in prefix:
+                continue
+            if prefix == '_':
+                continue
+            tab_instances.append(("puppet-%s" % prefix,
+                                  PuppetTab(self,
+                                            self.request,
+                                            prefix=prefix,
+                                            tenant_id=self.tenant_id)))
+
+        # + tab
+        tab_instances.append(('puppetprefixplus',
+                              PlusTab(self, self.request,
+                                      tenant_id=self.tenant_id)))
+        return tab_instances
+
+    def load_tab_data(self):
+        # This ensures that the tab list is updated without
+        #  having to rebuild the whole object.
+        self._tabs = OrderedDict(self.get_dynamic_tab_list())
+
+
+class IndexView(tabs.TabbedTableView):
+    tab_group_class = PrefixTabs
+    template_name = 'project/puppet/prefix_panel.html'
+    page_title = _("Prefix Puppet")
diff --git a/modules/openstack2/files/mitaka/horizon/puppettab/prefixpanel/urls.py b/modules/openstack2/files/mitaka/horizon/puppettab/prefixpanel/urls.py
new file mode 100644
index 0000000..7786188
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/puppettab/prefixpanel/urls.py
@@ -0,0 +1,38 @@
+# Copyright (c) 2016 Andrew Bogott for Wikimedia Foundation
+# All Rights Reserved.
+#
+#    Licensed under the Apache License, Version 2.0 (the "License"); you may
+#    not use this file except in compliance with the License. You may obtain
+#    a copy of the License at
+#
+#         http://www.apache.org/licenses/LICENSE-2.0
+#
+#    Unless required by applicable law or agreed to in writing, software
+#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+#    License for the specific language governing permissions and limitations
+#    under the License.
+from django.conf.urls import url, patterns
+
+from wikimediapuppettab.prefixpanel import prefixpanel
+from wikimediapuppettab import views
+
+urlpatterns = patterns(
+    '',
+    url(r'^$', prefixpanel.IndexView.as_view(), name='index'),
+    url(r'^(?P<prefix>[^/]+)/(?P<tenantid>[^/]+)/'
+        '(?P<roleid>[^/]+)/applypuppetrole$',
+        views.ApplyRoleView.as_view(), name='applypuppetrole'),
+    url(r'^(?P<prefix>[^/]+)/(?P<tenantid>[^/]+)/'
+        '(?P<roleid>[^/]+)/removepuppetrole$',
+        views.RemoveRoleView.as_view(), name='removepuppetrole'),
+    url(r'^(?P<prefix>[^/]+)/(?P<tenantid>[^/]+)/'
+        'edithiera$',
+        views.EditHieraView.as_view(), name='edithiera'),
+    url(r'^(?P<tenantid>[^/]+)/'
+        'newprefix$',
+        prefixpanel.IndexView.as_view(), name='newprefix'),
+    url(r'^(?P<prefix>[^/]+)/(?P<tenantid>[^/]+)/'
+        'removepuppetprefix$',
+        views.RemovePrefixView.as_view(), name='removepuppetprefix'),
+)
diff --git a/modules/openstack2/files/mitaka/horizon/puppettab/projectpanel.py b/modules/openstack2/files/mitaka/horizon/puppettab/projectpanel.py
new file mode 100644
index 0000000..97cca49
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/puppettab/projectpanel.py
@@ -0,0 +1,63 @@
+# Copyright (c) 2016 Andrew Bogott for Wikimedia Foundation
+# All Rights Reserved.
+#
+#    Licensed under the Apache License, Version 2.0 (the "License"); you may
+#    not use this file except in compliance with the License. You may obtain
+#    a copy of the License at
+#
+#         http://www.apache.org/licenses/LICENSE-2.0
+#
+#    Unless required by applicable law or agreed to in writing, software
+#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+#    License for the specific language governing permissions and limitations
+#    under the License.
+
+import logging
+
+from django.utils.translation import ugettext_lazy as _
+import horizon
+
+from horizon import tabs
+
+import openstack_dashboard.dashboards.project.instances.tabs as instancetabs
+from wikimediapuppettab.tab import PuppetTab
+
+logging.basicConfig()
+LOG = logging.getLogger(__name__)
+
+
+class ProjectPuppetPanel(horizon.Panel):
+    name = _("Project Puppet")
+    slug = "puppet"
+
+    @staticmethod
+    def can_register():
+        # Hacky hook
+        #  While we're here, add tabs to the instance detail view as well
+        instancetabs.InstanceDetailTabs.tabs += (PuppetTab,)
+        return True
+
+
+class ProjectTabs(tabs.TabGroup):
+    slug = "project_puppet"
+    tabs = (PuppetTab, )
+    sticky = True
+
+
+class IndexView(tabs.TabbedTableView):
+    tab_group_class = ProjectTabs
+    template_name = 'project/puppet/project_panel.html'
+    page_title = _("Project Puppet")
+
+    def get_tabs(self, request, *args, **kwargs):
+        if self._tab_group is None:
+            tenant_id = self.request.user.tenant_id
+            caption = _("These puppet settings will affect all VMs"
+                        " in the %s project.") % tenant_id
+            self._tab_group = self.tab_group_class(request,
+                                                   prefix='_',
+                                                   caption=caption,
+                                                   tenant_id=tenant_id,
+                                                   **kwargs)
+        return self._tab_group
diff --git a/modules/openstack2/files/mitaka/horizon/puppettab/puppet_config.py b/modules/openstack2/files/mitaka/horizon/puppettab/puppet_config.py
new file mode 100644
index 0000000..7e2c5ca
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/puppettab/puppet_config.py
@@ -0,0 +1,208 @@
+# Copyright (c) 2016 Andrew Bogott for Wikimedia Foundation
+# All Rights Reserved.
+#
+#    Licensed under the Apache License, Version 2.0 (the "License"); you may
+#    not use this file except in compliance with the License. You may obtain
+#    a copy of the License at
+#
+#         http://www.apache.org/licenses/LICENSE-2.0
+#
+#    Unless required by applicable law or agreed to in writing, software
+#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+#    License for the specific language governing permissions and limitations
+#    under the License.
+
+import logging
+import requests
+import puppet_roles
+import yaml
+
+from django.conf import settings
+
+logging.basicConfig()
+LOG = logging.getLogger(__name__)
+
+
+# Get/set puppet config for a given instance.
+#
+# This class manages all communication with the home-made puppet REST backend
+class puppet_config():
+    def __init__(self, prefix, tenant_id):
+        self.prefix = prefix
+        self.tenant_id = tenant_id
+        self.apiurl = getattr(settings,
+                              "PUPPET_CONFIG_BACKEND",
+                              "http://labcontrol1001.wikimedia.org:8101/v1"
+                              )
+        self.refresh()
+
+    def refresh(self):
+        classesurl = "%s/%s/prefix/%s/roles" % (self.apiurl,
+                                                self.tenant_id,
+                                                self.prefix)
+        req = requests.get(classesurl, verify=False)
+        if req.status_code == 404:
+            self.roles = []
+        else:
+            req.raise_for_status()
+            self.roles = yaml.safe_load(req.text)['roles']
+
+        hieraurl = "%s/%s/prefix/%s/hiera" % (self.apiurl,
+                                              self.tenant_id,
+                                              self.prefix)
+        req = requests.get(hieraurl, verify=False)
+        if req.status_code == 404:
+            # Missing is the same as empty
+            self.hiera_raw = "{}"
+        else:
+            req.raise_for_status()
+            self.hiera_raw = yaml.safe_load(req.text)['hiera']
+
+        hiera_yaml = yaml.safe_load(self.hiera_raw)
+        if not hiera_yaml:
+            hiera_yaml = {}
+        self.role_dict = {}
+
+        self.allroles = puppet_roles.available_roles()
+        allrole_dict = {role.name: role for role in self.allroles}
+
+        # other_classes is a list of roles that weren't enumerated by the puppet API.
+        #  These could be roles from a locally hacked puppet repo, or roles that have been
+        #  deleted from the puppet repo but still appear in the instance config.
+        self.other_classes = []
+
+        # Find the hiera lines that assign params to applied and known roles.
+        #  these lines are removed from the hiera text and added as
+        #  structured data to the role records instead.
+        for role in list(self.roles):
+            if role in allrole_dict:
+                self.role_dict[role] = {}
+                for key in hiera_yaml.keys():
+                    if key.startswith(role):
+                        # (len(role)+2) is the length of the rolename plus the ::,
+                        # getting us the raw param name
+                        argname = key[(len(role)+2):]
+                        if hiera_yaml[key]:
+                            self.role_dict[role][argname] = hiera_yaml[key]
+                            del hiera_yaml[key]
+                allrole_dict[role].mark_applied(self.role_dict[role])
+            elif role:
+                # This is an unknown role. Don't try to structure anything, just
+                #  add the rolename to the list and let hiera take care of the
+                #  params.
+                self.other_classes.append(role)
+                self.roles.remove(role)
+            else:
+                # Sometimes we get empty strings from crappy parsing
+                self.roles.remove(role)
+
+        self.other_classes_text = "\n".join(self.other_classes)
+
+        # Move the applied roles to the top for UI clarity
+        self.allroles.sort(key=lambda x: x.applied, reverse=True)
+
+        self.hiera = yaml.safe_dump(hiera_yaml, default_flow_style=False)
+
+    def remove_role(self, role):
+        if not self.roles:
+            LOG.error("Internal role list is empty, cannot remove")
+            # TODO throw an exception
+            return False
+
+        roles = self.roles
+
+        # Remove this role from our role list
+        roles.remove(role.name)
+
+        # Remove all related role args from hiera
+        hiera_yaml = yaml.safe_load(self.hiera_raw)
+        if hiera_yaml:
+            for key in hiera_yaml.keys():
+                if key.startswith("%s::" % role.name):
+                    del hiera_yaml[key]
+
+        self.set_role_list(roles)
+        self.set_hiera(hiera_yaml)
+
+    def apply_role(self, role, params):
+        if not self.roles:
+            # this is the first role, so build a fresh list
+            roles = [role.name]
+        else:
+            roles = list(self.roles)
+            if role.name not in roles:
+                roles.append(role.name)
+
+        # Translate the structured params and values
+        # into hiera yaml
+        hiera = yaml.safe_load(self.hiera_raw)
+        for param in params.keys():
+            fullparam = "%s::%s" % (role.name, param)
+            if fullparam in hiera:
+                if params[param]:
+                    hiera[fullparam] = params[param]
+                else:
+                    del hiera[fullparam]
+            else:
+                if params[param]:
+                    hiera[fullparam] = params[param]
+
+        self.set_role_list(roles)
+        self.set_hiera(hiera)
+
+    def set_roles(self, roles):
+        list_dump = yaml.safe_dump(roles, default_flow_style=False)
+        roleurl = "%s/%s/prefix/%s/roles" % (self.apiurl,
+                                             self.tenant_id,
+                                             self.prefix)
+        req = requests.post(roleurl,
+                            verify=False,
+                            data=list_dump,
+                            headers={'Content-Type': 'application/x-yaml'})
+        req.raise_for_status()
+        self.refresh()
+
+    def set_other_class_list(self, other_class_list):
+        self.set_roles(other_class_list + self.roles)
+
+    def set_role_list(self, role_list):
+        self.set_roles(role_list + self.other_classes)
+
+    def set_hiera(self, hiera_yaml):
+        if not hiera_yaml:
+            # The user probably cleared the field.  That's fine, we'll just
+            #  convert that to {}
+            hiera_yaml = {}
+        hiera_dump = yaml.safe_dump(hiera_yaml, default_flow_style=False)
+        hieraurl = "%s/%s/prefix/%s/hiera" % (self.apiurl,
+                                              self.tenant_id,
+                                              self.prefix)
+        req = requests.post(hieraurl,
+                            verify=False,
+                            data=hiera_dump,
+                            headers={'Content-Type': 'application/x-yaml'})
+        req.raise_for_status()
+        self.refresh()
+
+    @staticmethod
+    def delete_prefix(tenant_id, prefix):
+        apiurl = getattr(settings,
+                         "PUPPET_CONFIG_BACKEND",
+                         "http://labcontrol1001.wikimedia.org:8101/v1")
+        prefixurl = "%s/%s/prefix/%s" % (apiurl, tenant_id, prefix)
+        req = requests.delete(prefixurl, verify=False)
+        req.raise_for_status()
+
+    @staticmethod
+    def get_prefixes(tenant_id):
+        apiurl = getattr(settings,
+                         "PUPPET_CONFIG_BACKEND",
+                         "http://labcontrol1001.wikimedia.org:8101/v1")
+        prefixurl = "%s/%s/prefix" % (apiurl, tenant_id)
+        req = requests.get(prefixurl, verify=False)
+        if req.status_code == 404:
+            return []
+        else:
+            req.raise_for_status()
+        return yaml.safe_load(req.text)['prefixes']
diff --git a/modules/openstack2/files/mitaka/horizon/puppettab/puppet_roles.py b/modules/openstack2/files/mitaka/horizon/puppettab/puppet_roles.py
new file mode 100644
index 0000000..11c72a8
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/puppettab/puppet_roles.py
@@ -0,0 +1,144 @@
+# Copyright (c) 2016 Andrew Bogott for Wikimedia Foundation
+# All Rights Reserved.
+#
+#    Licensed under the Apache License, Version 2.0 (the "License"); you may
+#    not use this file except in compliance with the License. You may obtain
+#    a copy of the License at
+#
+#         http://www.apache.org/licenses/LICENSE-2.0
+#
+#    Unless required by applicable law or agreed to in writing, software
+#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+#    License for the specific language governing permissions and limitations
+#    under the License.
+
+import logging
+import requests
+
+from django.conf import settings
+from django.core.cache import cache
+from django.utils.html import escape
+from django.utils.safestring import mark_safe
+from django.utils.translation import ugettext_lazy as _
+
+logging.basicConfig()
+LOG = logging.getLogger(__name__)
+
+
+# A single puppet class or role, used as the data type
+#  for our Horizon table-of-roles UI
+class PuppetClass():
+    name = None
+    html_name = ""
+    docs = ""
+    applied = False
+    params = []
+    formatted_params = ""
+    raw_params = {}
+    filter_tags = []
+    instance = None
+
+    def __init__(self, name):
+        self.name = name
+        self.html_name = ""
+        self.docs = _('(No docs available)')
+        self.applied = False
+        self.params = []
+        self.formatted_params = ""
+        self.raw_params = {}
+        self.filter_tags = []
+        self.instance = None
+
+    def update_prefix_data(self, prefix, tenant_id):
+        self.prefix = prefix
+        self.tenant_id = tenant_id
+        return self
+
+    def mark_applied(self, paramdict):
+        self.applied = True
+        self.params = paramdict
+        if paramdict:
+            keysanddefaults = []
+            for param in self.params.items():
+                keysanddefaults.append("%s: %s" % param)
+            self.formatted_params = ";\n".join(keysanddefaults)
+
+        return self
+
+
+# Query the puppetmaster for a list of all available roles,
+#  build a list of PuppetClass() objects out of those roles.
+#
+# This list should be fairly static and building it is
+#  expensive, so it's cached in memcache.  Local copies
+#  of this list will get altered with runtime data (e.g.
+#  tenant and instance information) but the cached version
+#  should remain useful universally.
+def available_roles():
+    key = 'wikimediapuppet_available_roles'
+    roles = cache.get(key)
+    if not roles:
+        apiurl = getattr(settings,
+                         "PUPPETMASTER_API",
+                         "https://labcontrol1001.wikimedia.org:8140/puppet"
+                         )
+        roleurl = "%s/resource_types/role" % apiurl
+        req = requests.get(roleurl, verify=False)
+        req.raise_for_status()
+        roleres = req.json()
+
+        profileurl = "%s/resource_types/profile" % apiurl
+        req = requests.get(profileurl, verify=False)
+        req.raise_for_status()
+        profileres = req.json()
+
+        res = roleres + profileres
+
+        roles = []
+        for role in res:
+            if role['kind'] != 'class':
+                continue
+            obj = PuppetClass(role['name'])
+            if 'doc' in role:
+                obj.docs = role['doc']
+            if 'parameters' in role:
+                obj.params = role['parameters']
+                obj.raw_params = role['parameters']
+                keysanddefaults = []
+                for param in obj.params.items():
+                    keysanddefaults.append("%s: %s" % param)
+                obj.formatted_params = ";\n".join(keysanddefaults)
+
+            if 'doc' in role and (role['doc'].find('filtertags') != -1):
+                #  Collect filter tags from the role comment,
+                #  and generate 'newdoc' which is the docs without
+                #  the filter line.
+                newdoc = ""
+                for line in role['doc'].splitlines():
+                    n = line.find('filtertags')
+                    if n != -1:
+                        obj.filter_tags = line[(n+11):].split()
+                    else:
+                        newdoc += "%s\n" % line
+                obj.docs = newdoc
+
+            html = '<span title="%s">%s</>' % (
+                escape(obj.docs),
+                escape(obj.name)
+            )
+            obj.html_name = mark_safe(html)
+
+            roles.append(obj)
+
+        cache.set(key, roles, 300)
+
+    return roles
+
+
+def get_role_by_name(name):
+    allRoles = available_roles()
+    for role in allRoles:
+        if role.name == name:
+            return role
+    return None
diff --git a/modules/openstack2/files/mitaka/horizon/puppettab/puppet_tables.py b/modules/openstack2/files/mitaka/horizon/puppettab/puppet_tables.py
new file mode 100644
index 0000000..8f641c7
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/puppettab/puppet_tables.py
@@ -0,0 +1,137 @@
+# Copyright (c) 2016 Andrew Bogott for Wikimedia Foundation
+# All Rights Reserved.
+#
+#    Licensed under the Apache License, Version 2.0 (the "License"); you may
+#    not use this file except in compliance with the License. You may obtain
+#    a copy of the License at
+#
+#         http://www.apache.org/licenses/LICENSE-2.0
+#
+#    Unless required by applicable law or agreed to in writing, software
+#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+#    License for the specific language governing permissions and limitations
+#    under the License.
+
+from collections import defaultdict
+import logging
+
+from django.core import urlresolvers
+from django.utils.translation import ugettext_lazy as _
+
+from horizon import tables
+
+logging.basicConfig()
+LOG = logging.getLogger(__name__)
+
+
+class RemoveRole(tables.LinkAction):
+    name = 'remove'
+    verbose_name = _("Remove Class")
+    classes = ("ajax-modal",)
+    data_type_singular = _("Role")
+
+    policy_rules = (("compute", "compute:delete"),)
+
+    def get_link_url(self, datum):
+        url = "horizon:project:puppet:removepuppetrole"
+        kwargs = {
+            'prefix': datum.prefix,
+            'tenantid': datum.tenant_id,
+            'roleid': datum.name,
+        }
+        return urlresolvers.reverse(url, kwargs=kwargs)
+
+    def allowed(self, request, record=None):
+        return record.applied
+
+
+class ApplyRole(tables.LinkAction):
+    name = 'apply_role'
+    verbose_name = _("Apply Class")
+    classes = ("ajax-modal",)
+    icon = "plus"
+    policy_rules = (("compute", "compute:delete"),)
+
+    def get_link_url(self, datum):
+        url = "horizon:project:puppet:applypuppetrole"
+        kwargs = {
+            'prefix': datum.prefix,
+            'tenantid': datum.tenant_id,
+            'roleid': datum.name,
+        }
+        return urlresolvers.reverse(url, kwargs=kwargs)
+
+    def allowed(self, request, record=None):
+        return (not record.applied)
+
+
+def get_categories_for_role(role):
+    categories = set(['all'])
+    if 'labs-common' in role.filter_tags:
+        categories.add('common')
+    if "labs-project-%s" % role.tenant_id in role.filter_tags:
+        categories.add('project')
+    return categories
+
+
+# This shouldn't be needed, but FixedFilterAction
+#  is a bit broken and doesn't update unless we
+#  explicitly set those category-* classes.
+class UpdateRow(tables.Row):
+    ajax = True
+
+    def load_cells(self, role=None):
+        super(UpdateRow, self).load_cells(role)
+        # Tag the row with the image category for client-side filtering.
+        for cat in get_categories_for_role(self.datum):
+            self.classes.append('category-%s' % cat)
+
+
+class RoleFilter(tables.FixedFilterAction):
+    def get_fixed_buttons(self):
+        def make_dict(text, tenant, icon):
+            return dict(text=text, value=tenant, icon=icon)
+
+        buttons = [make_dict(_('project'), 'project', 'fa-star'),
+                   make_dict(_('common'), 'common', 'fa-cube'),
+                   make_dict(_('all'), 'all', 'fa-cubes')]
+        return buttons
+
+    def categorize(self, table, roles):
+        filtered_dict = defaultdict(list)
+        for role in roles:
+            categories = get_categories_for_role(role)
+            for cat in categories:
+                filtered_dict[cat].append(role)
+        return filtered_dict
+
+
+class PuppetTable(tables.DataTable):
+    applied = tables.Column('applied', verbose_name=_('Applied'), status=True)
+    name = tables.Column('html_name',
+                         verbose_name=_('Name'))
+    params = tables.Column('formatted_params',
+                           verbose_name=_('Parameters'),
+                           sortable=False)
+    instance = tables.Column('instance',
+                             verbose_name=_('Instance'),
+                             hidden=True)
+    tenant = tables.Column('tenant',
+                           verbose_name=_('Tenant'),
+                           hidden=True)
+    tenant = tables.Column('prefix',
+                           verbose_name=_('prefix'),
+                           hidden=True)
+    roleid = tables.Column('name', verbose_name=_('ID'), hidden=True)
+
+    class Meta(object):
+        name = 'puppet'
+        row_actions = (ApplyRole, RemoveRole)
+        table_actions = (RoleFilter,)
+        status_columns = ["applied"]
+        row_class = UpdateRow
+        multi_select = False
+
+    def get_object_id(self, datum):
+        return datum.name
diff --git a/modules/openstack2/files/mitaka/horizon/puppettab/static/dashboard/puppet/puppet.scss b/modules/openstack2/files/mitaka/horizon/puppettab/static/dashboard/puppet/puppet.scss
new file mode 100644
index 0000000..97e7174
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/puppettab/static/dashboard/puppet/puppet.scss
@@ -0,0 +1 @@
+#puppet.table-striped tbody tr.status_up td {background:lightgreen}
diff --git a/modules/openstack2/files/mitaka/horizon/puppettab/tab.py b/modules/openstack2/files/mitaka/horizon/puppettab/tab.py
new file mode 100644
index 0000000..e137e86
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/puppettab/tab.py
@@ -0,0 +1,140 @@
+# Copyright (c) 2016 Andrew Bogott for Wikimedia Foundation
+# All Rights Reserved.
+#
+#    Licensed under the Apache License, Version 2.0 (the "License"); you may
+#    not use this file except in compliance with the License. You may obtain
+#    a copy of the License at
+#
+#         http://www.apache.org/licenses/LICENSE-2.0
+#
+#    Unless required by applicable law or agreed to in writing, software
+#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+#    License for the specific language governing permissions and limitations
+#    under the License.
+
+import logging
+
+from django.core import urlresolvers
+from django.utils.translation import ugettext_lazy as _
+
+from horizon import tabs
+from django.conf import settings
+from django.utils.safestring import mark_safe
+
+import puppet_tables as p_tables
+from puppet_config import puppet_config
+
+logging.basicConfig()
+LOG = logging.getLogger(__name__)
+
+
+class PuppetTab(tabs.TableTab):
+    name = _("Puppet Configuration")
+    slug = "puppet"
+    table_classes = (p_tables.PuppetTable,)
+    template_name = "project/puppet/_detail_puppet.html"
+    preload = False
+
+    def __init__(self, *args, **kwargs):
+        # For some reason our parent class can't deal with these
+        #  args, so extract them now if they're present
+        if 'prefix' in kwargs:
+            self.prefix = kwargs['prefix']
+            self.name = self.prefix
+            del kwargs['prefix']
+
+        if 'tenant_id' in kwargs:
+            self.tenant_id = kwargs['tenant_id']
+            del kwargs['tenant_id']
+
+        if hasattr(self, 'tenant_id') and hasattr(self, 'prefix'):
+            self.slug += '-%s' % self.prefix
+            self.tab_type = 'prefix'
+
+        super(PuppetTab, self).__init__(*args, **kwargs)
+
+        if 'instance' in self.tab_group.kwargs:
+            self.tab_type = 'instance'
+            tld = getattr(settings,
+                          "INSTANCE_TLD",
+                          "eqiad.wmflabs")
+            self.instance = self.tab_group.kwargs['instance']
+
+            self.prefix = "%s.%s.%s" % (self.instance.name,
+                                        self.instance.tenant_id, tld)
+            self.tenant_id = self.instance.tenant_id
+
+        elif 'tenant_id' in self.tab_group.kwargs:
+            self.tab_type = 'project'
+            self.tenant_id = self.tab_group.kwargs['tenant_id']
+            self.prefix = self.tab_group.kwargs['prefix']
+        else:
+            self.tab_type = 'prefix'
+
+        self.add_caption()
+
+        self.config = puppet_config(self.prefix, self.tenant_id)
+
+    def add_caption(self):
+        self.capption = ""
+        if self.tab_type == 'prefix':
+            self.caption = _("These puppet settings will affect all VMs in the"
+                             " %s project whose names begin with \'%s\'.") % (
+                self.tenant_id, self.prefix)
+
+        elif self.tab_type == 'project':
+            self.caption = _("These puppet settings will affect all VMs"
+                             " in the %s project.") % self.tenant_id
+
+        elif self.tab_type == 'instance':
+            prefixes = puppet_config.get_prefixes(self.tenant_id)
+            links = []
+            for prefix in prefixes:
+                if '.' in prefix:
+                    continue
+                if prefix == '_':
+                    links.append("<a href=\"%s\">project config</a>" %
+                                 urlresolvers.reverse(
+                                     "horizon:project:puppet:index"))
+                elif self.instance.name.startswith(prefix):
+                    prefix_url = urlresolvers.reverse(
+                        "horizon:project:prefixpuppet:index",
+                        ) + "?tab=prefix_puppet__puppet-%s" % prefix
+                    links.append("<a href=\"%s\">%s</a>" % (prefix_url,
+                                                            prefix))
+
+            if links:
+                self.caption = mark_safe(_("This instance is also "
+                                           "affected by the following puppet "
+                                           "configs:  %s" % ", ".join(links)))
+
+    def get_context_data(self, request, **kwargs):
+        context = super(PuppetTab, self).get_context_data(request, **kwargs)
+        context['prefix'] = self.prefix
+        context['config'] = self.config
+        context['prefix_tab'] = (self.tab_type == 'prefix')
+
+        if hasattr(self, 'caption'):
+            context['caption'] = self.caption
+        elif 'caption' in self.tab_group.kwargs:
+            context['caption'] = self.tab_group.kwargs['caption']
+
+        kwargs = {
+            'prefix': self.prefix,
+            'tenantid': self.tenant_id,
+        }
+        context['edithieraurl'] = urlresolvers.reverse(
+            "horizon:project:puppet:edithiera", kwargs=kwargs)
+        context['editotherclassesurl'] = urlresolvers.reverse(
+            "horizon:project:puppet:editotherclasses", kwargs=kwargs)
+
+        url = "horizon:project:puppet:removepuppetprefix"
+        context['removepuppetprefixurl'] = urlresolvers.reverse(url,
+                                                                kwargs=kwargs)
+
+        return context
+
+    def get_puppet_data(self):
+        return [role.update_prefix_data(self.prefix, self.tenant_id) for
+                role in self.config.allroles]
diff --git a/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_apply.html b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_apply.html
new file mode 100644
index 0000000..570138e
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_apply.html
@@ -0,0 +1,25 @@
+{% extends "horizon/common/_modal_form.html" %}
+{% load i18n horizon humanize %}
+
+{% block form_attrs %}enctype="multipart/form-data"{% endblock %}
+
+{% block modal-header %}{% trans "Apply" %} {{ puppetrole.name }} {% endblock %}
+
+{% block modal-body %}
+<div class="row">
+ <div class="col-sm-6" style="width: {% if puppetrole.docs %}38{% else %}100{% endif %}%">
+  <h3>{{ ParamsCaption }}</h3>
+  <fieldset>
+   {% include "horizon/common/_form_fields.html" %}
+  </fieldset>
+ </div>
+ {% if puppetrole.docs %}
+  <div class="col-sm-6" style="width: 62%;">
+   <h3>{{ DocsCaption }}</h3>
+   <p>
+    <font size="1"><pre>{{ puppetrole.docs }}</pre></font>
+   </p>
+  </div>
+ {% endif %}
+</div>
+{% endblock %}
diff --git a/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_detail_puppet.html b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_detail_puppet.html
new file mode 100644
index 0000000..ce53ad3
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_detail_puppet.html
@@ -0,0 +1,17 @@
+{% load i18n %}
+
+<br>
+{{ caption }}
+{% if prefix_tab %}
+<br>
+<a href="{{ removepuppetprefixurl }}" class="btn btn-primary ajax-modal">{% trans "Remove prefix" %}</a>
+{% endif %}
+
+<div class="row-fluid">
+  <div class="span12">
+    <h3>{% trans "Roles and Profiles" %}</h3>
+    {{ table.render }}
+  </div>
+  {% include 'project/puppet/_other_classes.html' %}
+  {% include 'project/puppet/_hiera.html' %}
+</div>
diff --git a/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_edithiera.html b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_edithiera.html
new file mode 100644
index 0000000..b9d6be2
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_edithiera.html
@@ -0,0 +1,4 @@
+{% extends "horizon/common/_modal_form.html" %}
+{% load i18n horizon humanize %}
+
+{% block form_attrs %}enctype="multipart/form-data"{% endblock %}
diff --git a/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_editotherclasses.html b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_editotherclasses.html
new file mode 100644
index 0000000..ffbc95a
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_editotherclasses.html
@@ -0,0 +1,3 @@
+{% extends "horizon/common/_modal_form.html" %}
+
+{% block form_attrs %}enctype="multipart/form-data"{% endblock %}
diff --git a/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_hiera.html b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_hiera.html
new file mode 100644
index 0000000..7a89c64
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_hiera.html
@@ -0,0 +1,10 @@
+{% load i18n %}
+
+<div class="row-fluid">
+   <h3>{% trans "Hiera Config" %}</h3>
+   <p>
+     <pre>{{ config.hiera }}</pre>
+   </p>
+   <a href="{{ edithieraurl }}" class="btn btn-primary ajax-modal">{% trans "Edit" %}</a>
+</div>
+
diff --git a/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_other_classes.html b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_other_classes.html
new file mode 100644
index 0000000..1c4099d
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_other_classes.html
@@ -0,0 +1,9 @@
+{% load i18n %}
+
+<div class="row-fluid">
+   <h3>{% trans "Other Classes" %}</h3>
+   <p>
+     <pre>{{ config.other_classes_text }}</pre>
+   </p>
+   <a href="{{ editotherclassesurl }}" class="btn btn-primary ajax-modal">{% trans "Edit" %}</a>
+</div>
diff --git a/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_remove.html b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_remove.html
new file mode 100644
index 0000000..b3c8816
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_remove.html
@@ -0,0 +1,22 @@
+{% extends "horizon/common/_modal_form.html" %}
+{% load i18n horizon humanize %}
+
+{% block form_attrs %}enctype="multipart/form-data"{% endblock %}
+
+{% block modal-header %}{% trans "Remove" %} {{ puppetrole.name }} {% endblock %}
+
+{% block modal-body %}
+<div class="row">
+ <div class="col-sm-6" style="width: {% if puppetrole.docs %}38{% else %}100{% endif %}%">
+  <h3>Are you sure you want to remove this role?</h3>
+ </div>
+ {% if puppetrole.docs %}
+  <div class="col-sm-6" style="width: 62%;">
+   <h3>{{ DocsCaption }}</h3>
+   <p>
+    <font size="1"><pre>{{ puppetrole.docs }}</pre></font>
+   </p>
+  </div>
+ {% endif %}
+</div>
+{% endblock %}
diff --git a/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_removeprefix.html b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_removeprefix.html
new file mode 100644
index 0000000..00413aa
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/_removeprefix.html
@@ -0,0 +1,15 @@
+{% extends "horizon/common/_modal_form.html" %}
+{% load i18n horizon humanize %}
+
+{% block form_attrs %}enctype="multipart/form-data"{% endblock %}
+
+{% block modal-header %}{% trans "Remove" %} {{ prefix }} {% endblock %}
+
+{% block modal-body %}
+<div class="row">
+ <div class="col-sm-6" style="width: 100%">
+  <h3>{% trans "Are you sure you want to remove this prefix?" %}</h3>
+  {% trans "All hiera and puppet roles associated with this prefix will be discarded." %}
+ </div>
+</div>
+{% endblock %}
diff --git a/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/apply.html b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/apply.html
new file mode 100644
index 0000000..a4e7d38
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/apply.html
@@ -0,0 +1,8 @@
+{% extends 'base.html' %}
+{% load i18n %}
+{% block title %}{% trans "Apply A Role" %}{% endblock %}
+
+{% block main %}
+  {% include 'project/puppet/_apply.html' %}
+{% endblock %}
+
diff --git a/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/edithiera.html b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/edithiera.html
new file mode 100644
index 0000000..2416c95
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/edithiera.html
@@ -0,0 +1,6 @@
+{% extends 'base.html' %}
+{% load i18n %}
+
+{% block main %}
+  {% include 'project/puppet/_edithiera.html' %}
+{% endblock %}
diff --git a/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/editotherclasses.html b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/editotherclasses.html
new file mode 100644
index 0000000..55b0a00
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/editotherclasses.html
@@ -0,0 +1,5 @@
+{% extends 'base.html' %}
+
+{% block main %}
+  {% include 'project/puppet/_editotherclasses.html' %}
+{% endblock %}
diff --git a/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/plus_tab.html b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/plus_tab.html
new file mode 100644
index 0000000..f5338a3
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/plus_tab.html
@@ -0,0 +1,15 @@
+{% load i18n %}
+
+{% if prefix_name %}
+Name: {{ prefix_name }}
+{% else %}
+<br>
+{% trans "A prefix must start with a letter and consist of only letters, numbers, - and _." %}
+<form action="" method="POST">
+    {% csrf_token %}
+    <input type="hidden" name="action" value="puppetprefixplus__undefined">
+    <input type="text" name="prefix_name" placeholder="prefix name:" pattern="^[A-Za-z][A-Za-z0-9-_]*$">
+    <input type="submit" value="Add prefix"><br>
+</form>
+{% endif %}
+
diff --git a/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/prefix_panel.html b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/prefix_panel.html
new file mode 100644
index 0000000..6d74e64
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/prefix_panel.html
@@ -0,0 +1,14 @@
+{% extends 'base.html' %}
+{% load i18n %}
+
+{% block title %}
+  {{ page_title }}
+{% endblock %}
+
+{% block main %}
+  <div class="row">
+    <div class="col-sm-12">
+      {{ tab_group.render }}
+    </div>
+  </div>
+{% endblock %}
diff --git a/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/project_panel.html b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/project_panel.html
new file mode 100644
index 0000000..6d74e64
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/project_panel.html
@@ -0,0 +1,14 @@
+{% extends 'base.html' %}
+{% load i18n %}
+
+{% block title %}
+  {{ page_title }}
+{% endblock %}
+
+{% block main %}
+  <div class="row">
+    <div class="col-sm-12">
+      {{ tab_group.render }}
+    </div>
+  </div>
+{% endblock %}
diff --git a/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/remove.html b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/remove.html
new file mode 100644
index 0000000..a8e6cd8
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/remove.html
@@ -0,0 +1,8 @@
+{% extends 'base.html' %}
+{% load i18n %}
+{% block title %}{% trans "Remove A Role" %}{% endblock %}
+
+{% block main %}
+  {% include 'project/puppet/_remove.html' %}
+{% endblock %}
+
diff --git a/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/removeprefix.html b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/removeprefix.html
new file mode 100644
index 0000000..4ab70e4
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/puppettab/templates/puppet/removeprefix.html
@@ -0,0 +1,8 @@
+{% extends 'base.html' %}
+{% load i18n %}
+{% block title %}{% trans "Remove A Puppet Rule Prefix" %}{% endblock %}
+
+{% block main %}
+  {% include 'project/puppet/_remove.html' %}
+{% endblock %}
+
diff --git a/modules/openstack2/files/mitaka/horizon/puppettab/urls.py b/modules/openstack2/files/mitaka/horizon/puppettab/urls.py
new file mode 100644
index 0000000..190a9c7
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/puppettab/urls.py
@@ -0,0 +1,38 @@
+# Copyright (c) 2016 Andrew Bogott for Wikimedia Foundation
+# All Rights Reserved.
+#
+#    Licensed under the Apache License, Version 2.0 (the "License"); you may
+#    not use this file except in compliance with the License. You may obtain
+#    a copy of the License at
+#
+#         http://www.apache.org/licenses/LICENSE-2.0
+#
+#    Unless required by applicable law or agreed to in writing, software
+#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+#    License for the specific language governing permissions and limitations
+#    under the License.
+from django.conf.urls import url, patterns
+
+from wikimediapuppettab import projectpanel
+from wikimediapuppettab import views
+
+urlpatterns = patterns(
+    '',
+    url(r'^$', projectpanel.IndexView.as_view(), name='index'),
+    url(r'^(?P<prefix>[^/]+)/(?P<tenantid>[^/]+)/'
+        '(?P<roleid>[^/]+)/applypuppetrole$',
+        views.ApplyRoleView.as_view(), name='applypuppetrole'),
+    url(r'^(?P<prefix>[^/]+)/(?P<tenantid>[^/]+)/'
+        '(?P<roleid>[^/]+)/removepuppetrole$',
+        views.RemoveRoleView.as_view(), name='removepuppetrole'),
+    url(r'^(?P<prefix>[^/]+)/(?P<tenantid>[^/]+)/'
+        'edithiera$',
+        views.EditHieraView.as_view(), name='edithiera'),
+    url(r'^(?P<prefix>[^/]+)/(?P<tenantid>[^/]+)/'
+        'editotherclasses$',
+        views.EditOtherClassesView.as_view(), name='editotherclasses'),
+    url(r'^(?P<prefix>[^/]+)/(?P<tenantid>[^/]+)/'
+        'removepuppetprefix$',
+        views.RemovePrefixView.as_view(), name='removepuppetprefix'),
+)
diff --git a/modules/openstack2/files/mitaka/horizon/puppettab/views.py b/modules/openstack2/files/mitaka/horizon/puppettab/views.py
new file mode 100644
index 0000000..1eaf027
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/puppettab/views.py
@@ -0,0 +1,319 @@
+# Copyright (c) 2016 Andrew Bogott for Wikimedia Foundation
+# All Rights Reserved.
+#
+#    Licensed under the Apache License, Version 2.0 (the "License"); you may
+#    not use this file except in compliance with the License. You may obtain
+#    a copy of the License at
+#
+#         http://www.apache.org/licenses/LICENSE-2.0
+#
+#    Unless required by applicable law or agreed to in writing, software
+#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+#    License for the specific language governing permissions and limitations
+#    under the License.
+
+import logging
+
+from django.core import urlresolvers
+from django.core.validators import URLValidator
+from django.utils.safestring import mark_safe
+from django.utils.translation import ugettext_lazy as _
+
+from horizon import forms
+
+from puppet_config import puppet_config
+
+import puppet_roles
+
+import yaml
+
+logging.basicConfig()
+LOG = logging.getLogger(__name__)
+
+
+class EditHieraForm(forms.SelfHandlingForm):
+    prefix = forms.CharField(widget=forms.HiddenInput())
+    tenant_id = forms.CharField(widget=forms.HiddenInput())
+    hieradata = forms.CharField(label=_("Instance hiera config:"),
+                                widget=forms.Textarea(attrs={
+                                                      'cols': 80,
+                                                      'rows': 15}),
+                                required=False)
+
+    def handle(self, request, data):
+        config = puppet_config(data['prefix'], data['tenant_id'])
+        config.set_hiera(yaml.safe_load(data['hieradata']))
+        return True
+
+
+class EditHieraView(forms.ModalFormView):
+    form_class = EditHieraForm
+    form_id = "edit_hiera_form"
+    modal_header = _("Edit Hiera")
+    submit_label = _("Apply Changes")
+    submit_url = "horizon:project:puppet:edithiera"
+    template_name = "project/puppet/edithiera.html"
+    context_object_name = 'hieraconfig'
+
+    def get_context_data(self, **kwargs):
+        context = super(EditHieraView, self).get_context_data(**kwargs)
+        context['prefix'] = self.prefix
+        context['hieradata'] = self.hieradata.hiera
+        urlkwargs = {
+            'prefix': self.prefix,
+            'tenantid': self.tenant_id,
+        }
+        context['submit_url'] = urlresolvers.reverse(self.submit_url,
+                                                     kwargs=urlkwargs)
+        return context
+
+    def get_success_url(self):
+        validate = URLValidator()
+        refer = self.request.META.get('HTTP_REFERER', '/')
+        validate(refer)
+        return refer
+
+    def get_prefix(self):
+        return self.kwargs['prefix']
+
+    def get_tenant_id(self):
+        return self.kwargs['tenantid']
+
+    def get_initial(self):
+        initial = {}
+        self.prefix = self.get_prefix()
+        self.tenant_id = self.get_tenant_id()
+        self.hieradata = puppet_config(self.prefix, self.tenant_id)
+        initial['hieradata'] = self.hieradata.hiera
+        initial['prefix'] = self.prefix
+        initial['tenant_id'] = self.tenant_id
+
+        return initial
+
+
+class RoleViewBase(forms.ModalFormView):
+    context_object_name = 'puppetrole'
+
+    puppetrole_name = forms.CharField(widget=forms.HiddenInput())
+
+    def get_context_data(self, **kwargs):
+        context = super(RoleViewBase, self).get_context_data(**kwargs)
+        context['puppetrole'] = self.puppet_role
+        urlkwargs = {
+            'prefix': self.prefix,
+            'tenantid': self.tenant_id,
+            'roleid': self.role_id,
+        }
+        context['prefix'] = self.prefix
+        context['submit_url'] = urlresolvers.reverse(self.submit_url,
+                                                     kwargs=urlkwargs)
+        if self.puppet_role.docs:
+            context['DocsCaption'] = _('Description:')
+        else:
+            context['DocsCaption'] = _('(No Description)')
+        if self.puppet_role.params:
+            context['ParamsCaption'] = _('Parameters:')
+        else:
+            context['ParamsCaption'] = _('(No Parameters)')
+        return context
+
+    def get_success_url(self):
+        validate = URLValidator()
+        refer = self.request.META.get('HTTP_REFERER', '/')
+        validate(refer)
+        return refer
+
+    def get_puppet_role(self):
+        rolename = self.kwargs['roleid']
+        puppet_role = puppet_roles.get_role_by_name(rolename)
+        return puppet_role
+
+    def get_prefix(self):
+        return self.kwargs['prefix']
+
+    def get_tenant_id(self):
+        return self.kwargs['tenantid']
+
+    def get_initial(self):
+        initial = {}
+        self.prefix = self.get_prefix()
+        self.tenant_id = self.get_tenant_id()
+        self.role_id = self.kwargs['roleid']
+        self.puppet_role = self.get_puppet_role()
+        initial['puppet_role'] = self.puppet_role
+        initial['tenant_id'] = self.tenant_id
+        initial['prefix'] = self.prefix
+        return initial
+
+
+class ApplyRoleForm(forms.SelfHandlingForm):
+    def __init__(self, request, *args, **kwargs):
+        super(ApplyRoleForm, self).__init__(request, *args, **kwargs)
+        initial = kwargs.get('initial', {})
+        self.tenant_id = initial['tenant_id']
+        self.prefix = initial['prefix']
+        self.role = initial['puppet_role']
+        if self.role.params:
+            for key in self.role.params.keys():
+                defaultval = self.role.params.get(key, '')
+                if defaultval:
+                    defaultval = "default: %s" % defaultval
+                self.fields[key] = forms.CharField(
+                    label=mark_safe("%s  <i><small>%s</small></i>" % (
+                        key,
+                        defaultval)),
+                    required=False
+                )
+
+    def handle(self, request, data):
+        config = puppet_config(self.prefix, self.tenant_id)
+        config.apply_role(self.role, data)
+        return True
+
+
+class ApplyRoleView(RoleViewBase):
+    form_class = ApplyRoleForm
+    form_id = "apply_role_form"
+    modal_header = _("Apply Class")
+    submit_label = _("Apply")
+    submit_url = "horizon:project:puppet:applypuppetrole"
+    template_name = "project/puppet/apply.html"
+
+
+class RemoveRoleForm(forms.SelfHandlingForm):
+    def __init__(self, request, *args, **kwargs):
+        super(RemoveRoleForm, self).__init__(request, *args, **kwargs)
+        initial = kwargs.get('initial', {})
+        self.tenant_id = initial['tenant_id']
+        self.prefix = initial['prefix']
+        self.role = initial['puppet_role']
+
+    def handle(self, request, data):
+        config = puppet_config(self.prefix, self.tenant_id)
+        config.remove_role(self.role)
+        return True
+
+
+class RemoveRoleView(RoleViewBase):
+    form_class = RemoveRoleForm
+    form_id = "remove_role_form"
+    modal_header = _("Remove Class")
+    submit_label = _("Remove")
+    submit_url = "horizon:project:puppet:removepuppetrole"
+    template_name = "project/puppet/remove.html"
+
+
+class RemovePrefixForm(forms.SelfHandlingForm):
+    def __init__(self, request, *args, **kwargs):
+        super(RemovePrefixForm, self).__init__(request, *args, **kwargs)
+        initial = kwargs.get('initial', {})
+        self.tenant_id = initial['tenant_id']
+        self.prefix = initial['prefix']
+
+    def handle(self, request, data):
+        puppet_config.delete_prefix(self.tenant_id, self.prefix)
+        return True
+
+
+class RemovePrefixView(forms.ModalFormView):
+    form_class = RemovePrefixForm
+    form_id = "remove_prefix_form"
+    modal_header = _("Remove Prefix")
+    submit_label = _("Remove")
+    submit_url = "horizon:project:puppet:removepuppetprefix"
+    template_name = "project/puppet/removeprefix.html"
+
+    def get_prefix(self):
+        return self.kwargs['prefix']
+
+    def get_tenant_id(self):
+        return self.kwargs['tenantid']
+
+    def get_initial(self):
+        initial = {}
+        self.prefix = self.get_prefix()
+        self.tenant_id = self.get_tenant_id()
+        initial['prefix'] = self.prefix
+        initial['tenant_id'] = self.tenant_id
+
+        return initial
+
+    def get_context_data(self, **kwargs):
+        context = super(RemovePrefixView, self).get_context_data(**kwargs)
+        context['prefix'] = self.prefix
+        urlkwargs = {
+            'prefix': self.prefix,
+            'tenantid': self.tenant_id,
+        }
+        context['prefix'] = self.prefix
+        context['submit_url'] = urlresolvers.reverse(self.submit_url,
+                                                     kwargs=urlkwargs)
+        return context
+
+    def get_success_url(self):
+        validate = URLValidator()
+        refer = self.request.META.get('HTTP_REFERER', '/')
+        validate(refer)
+        return refer
+
+
+class EditOtherClassesForm(forms.SelfHandlingForm):
+    prefix = forms.CharField(widget=forms.HiddenInput())
+    tenant_id = forms.CharField(widget=forms.HiddenInput())
+    classes = forms.CharField(label=_("Other classes:"),
+                              widget=forms.Textarea(attrs={
+                                                    'cols': 80,
+                                                    'rows': 15}),
+                              required=False)
+
+    def handle(self, request, data):
+        other_class_list = [cls.strip() for cls in data['classes'].strip().split("\n") if cls]
+        config = puppet_config(data['prefix'], data['tenant_id'])
+        config.set_other_class_list(other_class_list)
+        return True
+
+
+class EditOtherClassesView(forms.ModalFormView):
+    form_class = EditOtherClassesForm
+    form_id = "edit_otherclasses_form"
+    modal_header = _("Edit Other Classes")
+    submit_label = _("Apply Changes")
+    submit_url = "horizon:project:puppet:editotherclasses"
+    template_name = "project/puppet/editotherclasses.html"
+    context_object_name = 'otherclassesconfig'
+
+    def get_context_data(self, **kwargs):
+        context = super(EditOtherClassesView, self).get_context_data(**kwargs)
+        context['prefix'] = self.prefix
+        context['classes'] = self.classdata.other_classes
+        urlkwargs = {
+            'prefix': self.prefix,
+            'tenantid': self.tenant_id,
+        }
+        context['submit_url'] = urlresolvers.reverse(self.submit_url,
+                                                     kwargs=urlkwargs)
+        return context
+
+    def get_success_url(self):
+        validate = URLValidator()
+        refer = self.request.META.get('HTTP_REFERER', '/')
+        validate(refer)
+        return refer
+
+    def get_prefix(self):
+        return self.kwargs['prefix']
+
+    def get_tenant_id(self):
+        return self.kwargs['tenantid']
+
+    def get_initial(self):
+        initial = {}
+        self.prefix = self.get_prefix()
+        self.tenant_id = self.get_tenant_id()
+        self.classdata = puppet_config(self.prefix, self.tenant_id)
+        initial['classes'] = self.classdata.other_classes_text
+        initial['prefix'] = self.prefix
+        initial['tenant_id'] = self.tenant_id
+
+        return initial
diff --git a/modules/openstack2/files/mitaka/horizon/sudo/__init__.py b/modules/openstack2/files/mitaka/horizon/sudo/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/modules/openstack2/files/mitaka/horizon/sudo/panel.py b/modules/openstack2/files/mitaka/horizon/sudo/panel.py
new file mode 100644
index 0000000..55e4663
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/sudo/panel.py
@@ -0,0 +1,28 @@
+# Copyright (c) 2016 Andrew Bogott for Wikimedia Foundation
+# All Rights Reserved.
+#
+#    Licensed under the Apache License, Version 2.0 (the "License"); you may
+#    not use this file except in compliance with the License. You may obtain
+#    a copy of the License at
+#
+#         http://www.apache.org/licenses/LICENSE-2.0
+#
+#    Unless required by applicable law or agreed to in writing, software
+#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+#    License for the specific language governing permissions and limitations
+#    under the License.
+
+import logging
+
+from django.utils.translation import ugettext_lazy as _
+import horizon
+
+logging.basicConfig()
+LOG = logging.getLogger(__name__)
+
+
+class ProjectSudoPanel(horizon.Panel):
+    name = _("Project Sudo")
+    slug = "sudo"
+    policy_rules = (("compute", "sudorule:list"),)
diff --git a/modules/openstack2/files/mitaka/horizon/sudo/sudorules.py b/modules/openstack2/files/mitaka/horizon/sudo/sudorules.py
new file mode 100644
index 0000000..1172a11
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/sudo/sudorules.py
@@ -0,0 +1,217 @@
+# Copyright (c) 2017 Andrew Bogott for Wikimedia Foundation
+# All Rights Reserved.
+#
+#    Licensed under the Apache License, Version 2.0 (the "License"); you may
+#    not use this file except in compliance with the License. You may obtain
+#    a copy of the License at
+#
+#         http://www.apache.org/licenses/LICENSE-2.0
+#
+#    Unless required by applicable law or agreed to in writing, software
+#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+#    License for the specific language governing permissions and limitations
+#    under the License.
+
+import ldap
+import ldap.modlist
+import logging
+
+from django.conf import settings
+
+from horizon import exceptions
+
+logging.basicConfig()
+LOG = logging.getLogger(__name__)
+
+
+# A single sudoer rule, with some human readable labels
+class SudoRule:
+    def _get_formatted_user_list(self, userlist):
+        projmembers = '%%project-%s' % self.project
+        listcopy = list(userlist)
+        if projmembers in listcopy:
+            listcopy.remove(projmembers)
+            listcopy.insert(0, "[Any project member]")
+
+        if 'ALL' in listcopy:
+            listcopy.remove('ALL')
+            listcopy.insert(0, "[Anyone]")
+
+        return ', '.join(listcopy)
+
+    def __init__(self,
+                 project,
+                 name,
+                 users,
+                 runas,
+                 commands,
+                 options):
+        self.id = name
+        self.project = project
+        self.name = name
+        self.users = users
+        self.runas = runas
+        self.commands = commands
+        self.options = options
+
+        self.users_hr = self._get_formatted_user_list(users)
+        self.runas_hr = self._get_formatted_user_list(runas)
+
+        self.commands_hr = ', '.join(commands)
+
+        if '!authenticate' in self.options:
+            self.authrequired = False
+        else:
+            self.authrequired = True
+
+        if '!authenticate' in options:
+            options.remove('!authenticate')
+        if 'authenticate' in options:
+            options.remove('authenticate')
+
+        self.options_hr = ', '.join(options)
+
+
+def _getLdapInfo(attr, conffile="/etc/ldap.conf"):
+    try:
+        f = open(conffile)
+    except IOError:
+        if conffile == "/etc/ldap.conf":
+            # fallback to /etc/ldap/ldap.conf, which will likely
+            # have less information
+            f = open("/etc/ldap/ldap.conf")
+    for line in f:
+        if line.strip() == "":
+            continue
+        if line.split()[0].lower() == attr.lower():
+            return line.split(None, 1)[1].strip()
+            break
+
+
+def _open_ldap():
+    ldapHost = _getLdapInfo("uri")
+    sslType = _getLdapInfo("ssl")
+
+    binddn = getattr(settings, "LDAP_USER", '')
+    bindpw = getattr(settings, "LDAP_USER_PASSWORD", '')
+
+    ds = ldap.initialize(ldapHost)
+    ds.protocol_version = ldap.VERSION3
+    if sslType == "start_tls":
+        ds.start_tls_s()
+
+    try:
+        ds.simple_bind_s(binddn, bindpw)
+        return ds
+    except ldap.CONSTRAINT_VIOLATION:
+        LOG.error("LDAP bind failure:  Too many failed attempts.\n")
+    except ldap.INVALID_DN_SYNTAX:
+        LOG.error("LDAP bind failure:  The bind DN is incorrect... \n")
+    except ldap.NO_SUCH_OBJECT:
+        LOG.error("LDAP bind failure:  "
+                  "Unable to locate the bind DN account.\n")
+    except ldap.UNWILLING_TO_PERFORM as msg:
+        LOG.error("LDAP bind failure:  "
+                  "The LDAP server was unwilling to perform the action"
+                  " requested.\nError was: %s\n" % msg[0]["info"])
+    except ldap.INVALID_CREDENTIALS:
+        LOG.error("LDAP bind failure:  Password incorrect.\n")
+
+    LOG.error("Failed to connect to ldap.")
+    raise exceptions.ConfigurationError()
+
+
+def rules_for_project(project, rulename=None):
+    LOG.debug("getting rules for %s" % project)
+    projects_basedn = getattr(settings, "LDAP_PROJECTS_BASE", '')
+    sudoer_base = "ou=sudoers,cn=%s,%s" % (project, projects_basedn)
+    rules = []
+
+    ds = _open_ldap()
+
+    if rulename:
+        filter = "(&(objectClass=sudorole)(cn=%s))" % rulename
+    else:
+        filter = '(objectClass=sudorole)'
+
+    sudorecords = ds.search_s(sudoer_base,
+                              ldap.SCOPE_ONELEVEL,
+                              filterstr=filter)
+
+    for record in sudorecords:
+        content = record[1]
+
+        name = content.get('cn', [''])[0]
+        users = content.get("sudoUser", [])
+        runas = content.get("sudoRunAsUser", [])
+        command = content.get("sudoCommand", [])
+        options = content.get("sudoOption", [])
+
+        rule = SudoRule(project,
+                        name,
+                        users,
+                        runas,
+                        command,
+                        options)
+        rules.append(rule)
+
+    return rules
+
+
+def _dn_for_rule(rule):
+    projects_basedn = getattr(settings, "LDAP_PROJECTS_BASE", '')
+    sudoer_base = "ou=sudoers,cn=%s,%s" % (rule.project, projects_basedn)
+    return "cn=%s,%s" % (rule.name, sudoer_base)
+
+
+def _modentry_for_rule(rule):
+    ruleEntry = {}
+    ruleEntry['cn'] = rule.name.encode('utf8')
+    ruleEntry['objectClass'] = 'sudoRole'
+    ruleEntry['sudoHost'] = 'ALL'
+    ruleEntry['sudoOption'] = [opt.encode('utf8') for opt in rule.options]
+    ruleEntry['sudoCommand'] = [cmd.encode('utf8') for cmd in rule.commands]
+    ruleEntry['sudoUser'] = [usr.encode('utf8') for usr in rule.users]
+    ruleEntry['sudoRunAsUser'] = [usr.encode('utf8') for usr in rule.runas]
+
+    if not rule.authrequired:
+        ruleEntry['sudoOption'].append("!authenticate")
+
+    return ruleEntry
+
+
+def add_rule(rule):
+    ds = _open_ldap()
+
+    dn = _dn_for_rule(rule)
+    modentry = _modentry_for_rule(rule)
+    modlist = ldap.modlist.addModlist(modentry)
+    ds.add_s(dn, modlist)
+    return True
+
+
+def update_rule(rule):
+    ds = _open_ldap()
+
+    dn = _dn_for_rule(rule)
+    newentry = _modentry_for_rule(rule)
+
+    # get the old rule so we can make a proper modlist.  This is potentially
+    #  racy but less racy than caching it elsewhere.
+    oldrecords = ds.search_s(dn, ldap.SCOPE_BASE)
+
+    modlist = ldap.modlist.modifyModlist(oldrecords[0][1], newentry)
+    ds.modify_s(dn, modlist)
+    return True
+
+
+def delete_rule(project, rulename):
+    ds = _open_ldap()
+
+    projects_basedn = getattr(settings, "LDAP_PROJECTS_BASE", '')
+    sudoer_base = "ou=sudoers,cn=%s,%s" % (project, projects_basedn)
+
+    dn = "cn=%s,%s" % (rulename, sudoer_base)
+    ds.delete_s(dn)
+    return True
diff --git a/modules/openstack2/files/mitaka/horizon/sudo/templates/sudo/_common_horizontal_form.html b/modules/openstack2/files/mitaka/horizon/sudo/templates/sudo/_common_horizontal_form.html
new file mode 100644
index 0000000..97f0ef9
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/sudo/templates/sudo/_common_horizontal_form.html
@@ -0,0 +1,3 @@
+<div class="form-horizontal">
+  {% include "horizon/common/_horizontal_fields.html" %}
+</div>
diff --git a/modules/openstack2/files/mitaka/horizon/sudo/templates/sudo/index.html b/modules/openstack2/files/mitaka/horizon/sudo/templates/sudo/index.html
new file mode 100644
index 0000000..6f667f2
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/sudo/templates/sudo/index.html
@@ -0,0 +1,13 @@
+{% extends 'base.html' %}
+{% load i18n %}
+{% block title %}{% trans "Sudoer Policies" %}{% endblock %}
+
+{% block page_header %}
+  {% include "horizon/common/_page_header.html" with title=_("Sudoer Policy") %}
+{% endblock page_header %}
+
+{% block main %}
+  {{ table.render }}
+{% endblock %}
+
+
diff --git a/modules/openstack2/files/mitaka/horizon/sudo/urls.py b/modules/openstack2/files/mitaka/horizon/sudo/urls.py
new file mode 100644
index 0000000..955fa7e
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/sudo/urls.py
@@ -0,0 +1,26 @@
+# Copyright (c) 2016 Andrew Bogott for Wikimedia Foundation
+# All Rights Reserved.
+#
+#    Licensed under the Apache License, Version 2.0 (the "License"); you may
+#    not use this file except in compliance with the License. You may obtain
+#    a copy of the License at
+#
+#         http://www.apache.org/licenses/LICENSE-2.0
+#
+#    Unless required by applicable law or agreed to in writing, software
+#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+#    License for the specific language governing permissions and limitations
+#    under the License.
+from django.conf.urls import url, patterns
+
+from wikimediasudodashboard import views
+
+urlpatterns = patterns(
+    '',
+    url(r'^$', views.IndexView.as_view(), name='index'),
+    url(r'^create/$', views.CreateView.as_view(), name='create'),
+    url(r'^(?P<rule_name>[^/]+)/modify/$',
+        views.ModifyView.as_view(), name='modify'),
+
+)
diff --git a/modules/openstack2/files/mitaka/horizon/sudo/views.py b/modules/openstack2/files/mitaka/horizon/sudo/views.py
new file mode 100644
index 0000000..c82068d
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/sudo/views.py
@@ -0,0 +1,138 @@
+# Copyright (c) 2016 Andrew Bogott for Wikimedia Foundation
+# All Rights Reserved.
+#
+#    Licensed under the Apache License, Version 2.0 (the "License"); you may
+#    not use this file except in compliance with the License. You may obtain
+#    a copy of the License at
+#
+#         http://www.apache.org/licenses/LICENSE-2.0
+#
+#    Unless required by applicable law or agreed to in writing, software
+#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+#    License for the specific language governing permissions and limitations
+#    under the License.
+
+import logging
+
+from django.utils.translation import ungettext_lazy
+from django.utils.translation import ugettext_lazy as _
+
+from horizon import exceptions
+from horizon import tables
+from horizon import workflows
+
+import sudorules
+import workflows as sudo_workflows
+
+logging.basicConfig()
+LOG = logging.getLogger(__name__)
+
+
+class AddRule(tables.LinkAction):
+    name = "addsudorule"
+    verbose_name = _("Add Rule")
+    url = "horizon:project:sudo:create"
+    classes = ("ajax-modal",)
+    icon = "plus"
+    policy_rules = (("compute", "sudorule:create"),)
+
+
+class ModifyRule(tables.LinkAction):
+    name = "modifysudorule"
+    verbose_name = _("Modify Rule")
+    url = "horizon:project:sudo:modify"
+    classes = ("ajax-modal",)
+
+    policy_rules = (("compute", "sudorule:modify"),)
+
+
+class DeleteRule(tables.DeleteAction):
+
+    @staticmethod
+    def action_present(count):
+        return ungettext_lazy(u"Delete Rule", u"Delete Rules", count)
+
+    @staticmethod
+    def action_past(count):
+        return ungettext_lazy(u"Deleted Rule", u"Deleted Rules", count)
+
+    policy_rules = (("compute", "sudorule:delete"),)
+
+    def delete(self, request, obj_id):
+        project_id = request.user.tenant_id
+        sudorules.delete_rule(project_id, obj_id)
+
+
+class SudoTable(tables.DataTable):
+    name = tables.Column("name", verbose_name=_("Sudo policy name"),)
+    users = tables.Column("users_hr", verbose_name=_("Users"),)
+    runas = tables.Column("runas_hr", verbose_name=_("Allow running as"),)
+    commands = tables.Column("commands_hr", verbose_name=_("Commands"),)
+    options = tables.Column("options_hr", verbose_name=_("Options"),)
+    authenticate = tables.Column("authrequired",
+                                 verbose_name=_("Require Password"),)
+
+    class Meta(object):
+        name = "proxies"
+        verbose_name = _("Sudo Policies")
+        table_actions = (AddRule, DeleteRule, )
+        row_actions = (ModifyRule, DeleteRule, )
+
+
+def get_sudo_rule_list(request):
+    project = request.user.tenant_id
+    rules = []
+    try:
+        rules = sudorules.rules_for_project(project)
+    except Exception:
+        exceptions.handle(request, _("Unable to retrieve sudo rules."))
+    return rules
+
+
+class IndexView(tables.DataTableView):
+    table_class = SudoTable
+    template_name = 'project/sudo/index.html'
+    page_title = _("Sudo Policies")
+
+    def get_data(self):
+        return get_sudo_rule_list(self.request)
+
+
+class CreateView(workflows.WorkflowView):
+    workflow_class = sudo_workflows.CreateRule
+
+    def get_initial(self):
+        initial = super(CreateView, self).get_initial()
+        initial['project_id'] = self.request.user.tenant_id
+        initial['rulename'] = 'newrule'
+        initial['commands'] = 'ALL'
+        initial[sudo_workflows.SUDO_USER_ROLE_NAME] = [sudo_workflows.allUsersTuple(
+            self.request.user.tenant_id)[0]]
+        initial[sudo_workflows.SUDO_RUNAS_ROLE_NAME] = []
+
+        return initial
+
+
+class ModifyView(workflows.WorkflowView):
+    workflow_class = sudo_workflows.ModifyRule
+
+    def get_initial(self):
+        initial = super(ModifyView, self).get_initial()
+
+        project = self.request.user.tenant_id
+        rulename = self.kwargs['rule_name']
+
+        rule = sudorules.rules_for_project(project, rulename)[0]
+
+        initial['project_id'] = project
+        initial['rulename'] = rulename
+
+        initial['commands'] = "\n".join(rule.commands)
+        initial[sudo_workflows.SUDO_USER_ROLE_NAME] = rule.users
+        initial[sudo_workflows.SUDO_RUNAS_ROLE_NAME] = rule.runas
+        initial['options'] = "\n".join(rule.options)
+
+        initial['authrequired'] = rule.authrequired
+
+        return initial
diff --git a/modules/openstack2/files/mitaka/horizon/sudo/workflows.py b/modules/openstack2/files/mitaka/horizon/sudo/workflows.py
new file mode 100644
index 0000000..26f2502
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/sudo/workflows.py
@@ -0,0 +1,291 @@
+# Copyright (c) 2017 Andrew Bogott for Wikimedia Foundation
+# All Rights Reserved.
+#
+#    Licensed under the Apache License, Version 2.0 (the "License"); you may
+#    not use this file except in compliance with the License. You may obtain
+#    a copy of the License at
+#
+#         http://www.apache.org/licenses/LICENSE-2.0
+#
+#    Unless required by applicable law or agreed to in writing, software
+#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+#    License for the specific language governing permissions and limitations
+#    under the License.
+
+import ldap
+import logging
+
+from django.utils.translation import ugettext_lazy as _
+
+from horizon import exceptions
+from horizon import forms
+from horizon import workflows
+
+from openstack_dashboard.api import keystone
+
+import sudorules
+
+LOG = logging.getLogger(__name__)
+
+SUDO_USER_MEMBER_SLUG = 'sudo_users'
+SUDO_RUNAS_SLUG = 'sudo_runas'
+COMMON_HORIZONTAL_TEMPLATE = "project/sudo/_common_horizontal_form.html"
+
+SUDO_USER_ROLE_NAME = 'user'
+SUDO_RUNAS_ROLE_NAME = 'runas'
+
+NO_SUDO_FOR = ['novaadmin', 'novaobserver']
+
+
+def allUsersTuple(project_id):
+    return ("%%project-%s" % project_id, "[Any project member]")
+
+
+def anyUserTuple():
+    return ("ALL", "[Anyone]")
+
+
+class UpdateRuleUsersAction(workflows.MembershipAction):
+    role_name = SUDO_USER_ROLE_NAME
+
+    def __init__(self, request, *args, **kwargs):
+        super(UpdateRuleUsersAction, self).__init__(request,
+                                                    *args,
+                                                    **kwargs)
+        err_msg = _('Unable to retrieve user list. Please try again later.')
+
+        project_id = self.initial['project_id']
+
+        # The user-selection widget we're using thinks in terms of roles.  We only want
+        #  one, simple list so we will collect them in the stand-in 'user' role.
+        default_role_name = self.get_default_role_field_name()
+        self.fields[default_role_name] = forms.CharField(required=False)
+        self.fields[default_role_name].initial = self.role_name
+
+        # Get list of available users
+        all_users = []
+        try:
+            # We can't use the default user_list function because it requires
+            #  us to be an admin user.
+            users = keystone.keystoneclient(request).users.list(default_project=project_id)
+            all_users = [keystone.VERSIONS.upgrade_v2_user(user) for user in users]
+            all_users_dict = {user.id: user for user in all_users}
+        except Exception:
+            exceptions.handle(request, err_msg)
+
+        # The v3 user list doesn't actually filter by project (code comments
+        #  to the contrary) so we have to dig through the role list to find
+        #  out who's actually in our project.
+        # Anyone who is in all_users_dict and also has a role in the
+        #  project is a potential sudoer.
+        project_users = set()
+        manager = keystone.keystoneclient(request).role_assignments
+        project_role_assignments = manager.list(project=project_id)
+        for role_assignment in project_role_assignments:
+            if not hasattr(role_assignment, 'user'):
+                continue
+            user_id = role_assignment.user['id']
+            if user_id in NO_SUDO_FOR:
+                continue
+            if user_id in all_users_dict:
+                project_users.add(all_users_dict[user_id])
+
+        users_list = [(user.id, user.name) for user in project_users]
+        users_list.insert(0, anyUserTuple())
+        users_list.insert(0, allUsersTuple(project_id))
+
+        # Add a field to collect the list of users with role 'user'
+        field_name = self.get_member_field_name(self.role_name)
+        label = self.role_name
+        self.fields[field_name] = forms.MultipleChoiceField(required=False,
+                                                            label=label)
+        self.fields[field_name].choices = users_list
+        self.fields[field_name].initial = self.initial[self.role_name]
+
+    class Meta(object):
+        name = _("Users")
+        slug = SUDO_USER_MEMBER_SLUG
+
+
+class UpdateRuleUsers(workflows.UpdateMembersStep):
+    action_class = UpdateRuleUsersAction
+    available_list_title = _("")
+    members_list_title = _("Rule Users")
+    no_available_text = _("No users found.")
+    no_members_text = _("No users.")
+    show_roles = False
+    role_name = SUDO_USER_ROLE_NAME
+    contributes = (SUDO_USER_ROLE_NAME,)
+
+    def contribute(self, data, context):
+        if data:
+            post = self.workflow.request.POST
+
+            field_name = self.get_member_field_name(self.role_name)
+            context[self.role_name] = post.getlist(field_name)
+        return context
+
+
+class UpdateRuleRunAsUsersAction(UpdateRuleUsersAction):
+    role_name = SUDO_RUNAS_ROLE_NAME
+
+    class Meta(object):
+        name = _("Run as")
+        slug = SUDO_RUNAS_SLUG
+
+
+class UpdateRuleRunAsUsers(UpdateRuleUsers):
+    action_class = UpdateRuleRunAsUsersAction
+    available_list_title = _("")
+    members_list_title = _("Allow running as")
+    role_name = SUDO_RUNAS_ROLE_NAME
+    contributes = (SUDO_RUNAS_ROLE_NAME,)
+
+
+LDAP_TEXT_VALIDATOR = "^[A-Za-z][\w_\-\.]*$"
+LDAP_TEXT_VALIDATOR_MESSAGES = {'invalid':
+                                _("This must start with a letter, "
+                                  "followed by only letters, numbers, ., -, or _.")}
+
+
+class CreateRuleInfoAction(workflows.Action):
+    # Hide the domain_id and domain_name by default
+    project_id = forms.CharField(label=_("Project ID"),
+                                 required=False,
+                                 widget=forms.HiddenInput())
+    rulename = forms.RegexField(label=_("Rule Name"),
+                                max_length=64,
+                                help_text=_("Name of this sudo rule. "
+                                            "Must be a unique name within this project."),
+                                regex=LDAP_TEXT_VALIDATOR,
+                                error_messages=LDAP_TEXT_VALIDATOR_MESSAGES,
+                                required=True)
+    commands = forms.CharField(widget=forms.widgets.Textarea(
+                               attrs={'rows': 4}),
+                               label=_("Commands"),
+                               help_text=_("List of permitted commands, one per line, "
+                                           "or ALL to permit all actions."),
+                               required=True)
+    options = forms.CharField(widget=forms.widgets.Textarea(
+                              attrs={'rows': 2}),
+                              label=_("Options"),
+                              required=False)
+    authrequired = forms.BooleanField(label=_("Passphrase required"),
+                                      required=False,
+                                      initial=False)
+
+    def __init__(self, request, *args, **kwargs):
+        super(CreateRuleInfoAction, self).__init__(request,
+                                                   *args,
+                                                   **kwargs)
+
+    class Meta(object):
+        name = _("Rule")
+        help_text = _("Create a rule to permit certain sudo commands.")
+        slug = "rule_info"
+
+
+class ModifyRuleInfoAction(CreateRuleInfoAction):
+    def __init__(self, request, *args, **kwargs):
+        super(ModifyRuleInfoAction, self).__init__(request,
+                                                   *args,
+                                                   **kwargs)
+        self.fields['rulename'].widget.attrs['readonly'] = True
+
+    class Meta(object):
+        name = _("Rule")
+        help_text = _("Update a sudo rule.")
+        slug = "modify_rule_info"
+
+
+class CreateRuleInfo(workflows.Step):
+    action_class = CreateRuleInfoAction
+    template_name = COMMON_HORIZONTAL_TEMPLATE
+    contributes = ("rulename",
+                   "commands",
+                   "project_id",
+                   "options",
+                   "authrequired")
+
+    def contribute(self, data, context):
+        if data:
+            post = self.workflow.request.POST
+
+            context['commands'] = post.getlist('commands')[0].splitlines()
+            context['options'] = post.getlist('options')[0].splitlines()
+            if not post.getlist('authrequired'):
+                context['options'].append("!authenticate")
+            context['rulename'] = post.getlist('rulename')[0]
+
+        return context
+
+
+class ModifyRuleInfo(CreateRuleInfo):
+    action_class = ModifyRuleInfoAction
+
+
+class CreateRule(workflows.Workflow):
+    slug = "create_sudo_rule"
+    name = _("Create Rule")
+    finalize_button_name = _("Create Rule")
+    success_message = _('Created sudo rule "%s".')
+    failure_message = _('Unable to create sudo rule.')
+    success_url = "horizon:project:sudo:index"
+    default_steps = (CreateRuleInfo,
+                     UpdateRuleUsers,
+                     UpdateRuleRunAsUsers)
+
+    def __init__(self, request=None, context_seed=None, entry_point=None,
+                 *args, **kwargs):
+        super(CreateRule, self).__init__(request=request,
+                                         context_seed=context_seed,
+                                         entry_point=entry_point,
+                                         *args,
+                                         **kwargs)
+
+    def handle(self, request, data):
+        rule = sudorules.SudoRule(project=data['project_id'],
+                                  name=data['rulename'],
+                                  users=data[SUDO_USER_ROLE_NAME],
+                                  runas=data[SUDO_RUNAS_ROLE_NAME],
+                                  commands=data['commands'],
+                                  options=data['options'])
+
+        try:
+            sudorules.add_rule(rule)
+        except ldap.ALREADY_EXISTS:
+            exceptions.handle(request, _("A rule named %s already exists.") % data['rulename'])
+            return False
+
+        return True
+
+
+class ModifyRule(workflows.Workflow):
+    slug = "modify_sudo_rule"
+    name = _("Modify Rule")
+    finalize_button_name = _("Update Rule")
+    success_message = _('Changed sudo rule "%s".')
+    failure_message = _('Unable to change sudo rule "%s".')
+    success_url = "horizon:project:sudo:index"
+    default_steps = (ModifyRuleInfo,
+                     UpdateRuleUsers,
+                     UpdateRuleRunAsUsers)
+
+    def __init__(self, request=None, context_seed=None, entry_point=None,
+                 *args, **kwargs):
+        super(ModifyRule, self).__init__(request=request,
+                                         context_seed=context_seed,
+                                         entry_point=entry_point,
+                                         *args,
+                                         **kwargs)
+
+    def handle(self, request, data):
+        rule = sudorules.SudoRule(project=data['project_id'],
+                                  name=data['rulename'],
+                                  users=data[SUDO_USER_ROLE_NAME],
+                                  runas=data[SUDO_RUNAS_ROLE_NAME],
+                                  commands=data['commands'],
+                                  options=data['options'])
+
+        return sudorules.update_rule(rule)
diff --git a/modules/openstack2/files/mitaka/horizon/sudo_enable.py b/modules/openstack2/files/mitaka/horizon/sudo_enable.py
new file mode 100644
index 0000000..4b6061a
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/sudo_enable.py
@@ -0,0 +1,6 @@
+PANEL = 'projectsudopanel'
+PANEL_GROUP = 'sudoers'
+PANEL_DASHBOARD = 'project'
+ADD_PANEL = ('wikimediasudodashboard.panel.ProjectSudoPanel')
+ADD_INSTALLED_APPS = ['wikimediasudodashboard']
+AUTO_DISCOVER_STATIC_FILES = True
diff --git a/modules/openstack2/files/mitaka/horizon/sudo_group_add.py b/modules/openstack2/files/mitaka/horizon/sudo_group_add.py
new file mode 100644
index 0000000..63e8a5c
--- /dev/null
+++ b/modules/openstack2/files/mitaka/horizon/sudo_group_add.py
@@ -0,0 +1,6 @@
+# The name of the panel group to be added to HORIZON_CONFIG. Required.
+PANEL_GROUP = 'sudoers'
+# The display name of the PANEL_GROUP. Required.
+PANEL_GROUP_NAME = 'Sudoer Policies'
+# The name of the dashboard the PANEL_GROUP associated with. Required.
+PANEL_GROUP_DASHBOARD = 'project'
diff --git a/modules/openstack2/files/mitaka/keystoneclient/__init__.py b/modules/openstack2/files/mitaka/keystoneclient/__init__.py
new file mode 100644
index 0000000..c9ecd12
--- /dev/null
+++ b/modules/openstack2/files/mitaka/keystoneclient/__init__.py
@@ -0,0 +1,34 @@
+# Licensed under the Apache License, Version 2.0 (the "License"); you may
+# not use this file except in compliance with the License. You may obtain
+# a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+# License for the specific language governing permissions and limitations
+# under the License.
+
+from keystoneclient.auth.identity.v3.base import *  # noqa
+from keystoneclient.auth.identity.v3.federated import *  # noqa
+from keystoneclient.auth.identity.v3.password import *  # noqa
+from keystoneclient.auth.identity.v3.token import *  # noqa
+from keystoneclient.auth.identity.v3.wmtotp import *  # noqa
+
+
+__all__ = ['Auth',
+           'AuthConstructor',
+           'AuthMethod',
+           'BaseAuth',
+
+           'FederatedBaseAuth',
+
+           'Password',
+           'PasswordMethod',
+
+           'Mwtotp',
+           'MwtotpMethod',
+
+           'Token',
+           'TokenMethod']
diff --git a/modules/openstack2/files/mitaka/keystoneclient/wmtotp.py b/modules/openstack2/files/mitaka/keystoneclient/wmtotp.py
new file mode 100644
index 0000000..c911801
--- /dev/null
+++ b/modules/openstack2/files/mitaka/keystoneclient/wmtotp.py
@@ -0,0 +1,113 @@
+#
+#  Custom addition for Wikimedia Labs to add a totp plugin to keystoneclient
+#
+# Licensed under the Apache License, Version 2.0 (the "License"); you may
+# not use this file except in compliance with the License. You may obtain
+# a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+# License for the specific language governing permissions and limitations
+# under the License.
+
+import getpass
+import sys
+
+from oslo_config import cfg
+
+from keystoneclient.auth.identity.v3 import base
+from keystoneclient import utils
+
+__all__ = ['WmtotpMethod', 'Wmtotp']
+
+
+class WmtotpMethod(base.AuthMethod):
+    """Construct a User/Password/totp based authentication method.
+
+    :param string password: Password for authentication.
+    :param string totp: 2FA (TOTP) token for authentication.
+    :param string username: Username for authentication.
+    :param string user_id: User ID for authentication.
+    :param string user_domain_id: User's domain ID for authentication.
+    :param string user_domain_name: User's domain name for authentication.
+    """
+
+    _method_parameters = ['user_id',
+                          'username',
+                          'user_domain_id',
+                          'user_domain_name',
+                          'password',
+                          'totp']
+
+    def get_auth_data(self, session, auth, headers, **kwargs):
+        user = {'password': self.password, 'totp': self.totp}
+
+        if self.user_id:
+            user['id'] = self.user_id
+        elif self.username:
+            user['name'] = self.username
+
+            if self.user_domain_id:
+                user['domain'] = {'id': self.user_domain_id}
+            elif self.user_domain_name:
+                user['domain'] = {'name': self.user_domain_name}
+
+        return 'wmtotp', {'user': user}
+
+
+class Wmtotp(base.AuthConstructor):
+    """A plugin for authenticating with a username, password, totp token
+
+    :param string auth_url: Identity service endpoint for authentication.
+    :param string password: Password for authentication.
+    :param string totp: totp token for authentication
+    :param string username: Username for authentication.
+    :param string user_id: User ID for authentication.
+    :param string user_domain_id: User's domain ID for authentication.
+    :param string user_domain_name: User's domain name for authentication.
+    :param string trust_id: Trust ID for trust scoping.
+    :param string domain_id: Domain ID for domain scoping.
+    :param string domain_name: Domain name for domain scoping.
+    :param string project_id: Project ID for project scoping.
+    :param string project_name: Project name for project scoping.
+    :param string project_domain_id: Project's domain ID for project.
+    :param string project_domain_name: Project's domain name for project.
+    :param bool reauthenticate: Allow fetching a new token if the current one
+                                is going to expire. (optional) default True
+    """
+
+    _auth_method_class = WmtotpMethod
+
+    @classmethod
+    def get_options(cls):
+        options = super(Wmtotp, cls).get_options()
+
+        options.extend([
+            cfg.StrOpt('user-id', help='User ID'),
+            cfg.StrOpt('user-name', dest='username', help='Username',
+                       deprecated_name='username'),
+            cfg.StrOpt('user-domain-id', help="User's domain id"),
+            cfg.StrOpt('user-domain-name', help="User's domain name"),
+            cfg.StrOpt('password', secret=True, help="User's password"),
+            cfg.StrOpt('totp', secret=True, help="2FA (TOTP) token"),
+        ])
+
+        return options
+
+    @classmethod
+    def load_from_argparse_arguments(cls, namespace, **kwargs):
+        if not (kwargs.get('password') or namespace.os_password):
+            kwargs['password'] = utils.prompt_user_password()
+
+        if not kwargs.get('totp') and (hasattr(sys.stdin, 'isatty') and
+                                       sys.stdin.isatty()):
+            try:
+                kwargs['totp'] = getpass.getpass('2FA (TOTP) token: ')
+            except EOFError:
+                pass
+
+        return super(Wmtotp, cls).load_from_argparse_arguments(namespace,
+                                                               **kwargs)
diff --git a/modules/openstack2/manifests/horizon/puppetpanel.pp b/modules/openstack2/manifests/horizon/puppetpanel.pp
new file mode 100644
index 0000000..689f753
--- /dev/null
+++ b/modules/openstack2/manifests/horizon/puppetpanel.pp
@@ -0,0 +1,42 @@
+# Install a custom-for-wikimedia Horizon panel
+#  to manage instance puppet configuration
+class openstack2::horizon::puppetpanel(
+    $version,
+    ) {
+    file { '/usr/lib/python2.7/dist-packages/wikimediapuppettab':
+        source  => "puppet:///modules/openstack2/${version}/horizon/puppettab",
+        owner   => 'root',
+        group   => 'root',
+        mode    => '0644',
+        require => Package['openstack-dashboard'],
+        notify  => Exec['djangorefresh'],
+        recurse => true,
+    }
+
+    file { '/usr/share/openstack-dashboard/openstack_dashboard/local/enabled/_1923_puppet_group_add.py':
+        source  => "puppet:///modules/openstack2/${version}/horizon/puppet_group_add.py",
+        owner   => 'root',
+        group   => 'root',
+        mode    => '0644',
+        notify  => Exec['djangorefresh'],
+        require => Package['openstack-dashboard'],
+    }
+
+    file { '/usr/share/openstack-dashboard/openstack_dashboard/local/enabled/_1924_puppet_project_panel.py':
+        source  => "puppet:///modules/openstack2/${version}/horizon/puppet_tab_enable.py",
+        owner   => 'root',
+        group   => 'root',
+        mode    => '0644',
+        notify  => Exec['djangorefresh'],
+        require => Package['openstack-dashboard'],
+    }
+
+    file { '/usr/share/openstack-dashboard/openstack_dashboard/local/enabled/_1925_puppet_prefix_panel.py':
+        source  => "puppet:///modules/openstack2/${version}/horizon/puppet_prefix_tab_enable.py",
+        owner   => 'root',
+        group   => 'root',
+        mode    => '0644',
+        notify  => Exec['djangorefresh'],
+        require => Package['openstack-dashboard'],
+    }
+}
diff --git a/modules/openstack2/manifests/horizon/service.pp b/modules/openstack2/manifests/horizon/service.pp
new file mode 100644
index 0000000..0a283f8
--- /dev/null
+++ b/modules/openstack2/manifests/horizon/service.pp
@@ -0,0 +1,303 @@
+# The OpenStack Das2hboard Project
+# http://docs.openstack.org/developer/horizon/
+class openstack2::horizon::service(
+    $version,
+    $nova_controller,
+    $wmflabsdotorg_admin,
+    $wmflabsdotorg_pass,
+    $dhcp_domain,
+    $ldap_user_pass,
+    $webserver_hostname = 'horizon.wikimedia.org'
+) {
+
+    include ::apache
+    include ::apache::mod::ssl
+    include ::apache::mod::wsgi
+    include ::apache::mod::rewrite
+    include ::apache::mod::headers
+    include ::memcached
+
+    package { 'openstack-dashboard':
+        ensure  => 'present',
+        require => Class['::apache::mod::wsgi'];
+    }
+
+    require_package([
+        'python-keystoneclient',
+        'python-keystone',
+        'python-mysqldb',
+    )
+
+    package { [ 'python-openstack-auth',
+                'python-designate-dashboard' ]:
+        ensure  => 'present',
+    }
+
+    # Blank out these files so that the (broken) dashboard
+    #  package doesn't fret.
+    file { ['/etc/apache2/conf-available/openstack-dashboard.conf',
+            '/etc/apache2/conf-enabled/openstack-dashboard.conf']:
+        ensure  => file,
+        content => '# This empty file is here to keep the openstack-dashboard package happy.',
+        require => Package['openstack-dashboard'],
+    }
+
+    file { '/etc/openstack-dashboard/local_settings.py':
+        content => template("openstack2/${version}/horizon/local_settings.py.erb"),
+        owner   => 'horizon',
+        group   => 'horizon',
+        mode    => '0440',
+        require => Package['openstack-dashboard'],
+        notify  => [Service['apache2'], Exec['djangorefresh']],
+    }
+
+    # In the perfect future, Horizon policies will be the same
+    #  files that the respective services use.  In the meantime, though
+    #  it's useful to be able to disable not-yet-supported horizon features.
+    file { '/etc/openstack-dashboard/nova_policy.json':
+        source  => "puppet:///modules/openstack2/${version}/horizon/nova_policy.json",
+        owner   => 'horizon',
+        group   => 'horizon',
+        mode    => '0440',
+        require => Package['openstack-dashboard'],
+        notify  => Service['apache2'],
+    }
+    file { '/etc/openstack-dashboard/glance_policy.json':
+        source  => "puppet:///modules/openstack2/${version}/horizon/glance_policy.json",
+        owner   => 'horizon',
+        group   => 'horizon',
+        mode    => '0440',
+        require => Package['openstack-dashboard'],
+        notify  => Service['apache2'],
+    }
+
+    # We need a horizon-specific keystone policy because horizon does weird/special
+    #  things for admin_required policies which I don't totally understand.  In particular,
+    #  some permissive policies here (e.g. "") cause Horizon to panic, not ask Keystone for permission,
+    #  and log out the user.
+    file { '/etc/openstack-dashboard/keystone_policy.json':
+        source  => "puppet:///modules/openstack2/${version}/horizon/keystone_policy.json",
+        owner   => 'horizon',
+        group   => 'horizon',
+        mode    => '0440',
+        require => Package['openstack-dashboard'],
+        notify  => Service['apache2'],
+    }
+
+    file { '/etc/openstack-dashboard/designate_policy.json':
+        source  => "puppet:///modules/openstack2/${version}/designate/policy.json",
+        owner   => 'horizon',
+        group   => 'horizon',
+        mode    => '0440',
+        require => Package['openstack-dashboard'],
+        notify  => Service['apache2'],
+    }
+
+    # This is a trivial policy file that forbids everything.  We'll use it
+    #  for services that we don't support to prevent Horizon from
+    #  displaying spurious panels.
+    file { '/etc/openstack-dashboard/disabled_policy.json':
+        source  => "puppet:///modules/openstack2/${version}/horizon/disabled_policy.json",
+        owner   => 'horizon',
+        group   => 'horizon',
+        mode    => '0440',
+        require => Package['openstack-dashboard'],
+        notify  => Service['apache2'],
+    }
+
+    file { '/usr/share/openstack-dashboard/openstack_dashboard/static/dashboard/img/logo.png':
+        source  => 'puppet:///modules/openstack2/horizon/216px-Wikimedia_labs_dashboard_logo.png',
+        owner   => 'horizon',
+        group   => 'horizon',
+        mode    => '0444',
+        require => Package['openstack-dashboard'],
+    }
+
+    file { '/usr/share/openstack-dashboard/openstack_dashboard/static/dashboard/img/logo-splash.png':
+        source  => 'puppet:///modules/openstack2/horizon/180px-Wikimedia_labs_dashboard_splash.png',
+        owner   => 'horizon',
+        group   => 'horizon',
+        mode    => '0444',
+        require => Package['openstack-dashboard'],
+    }
+
+    file { '/usr/share/openstack-dashboard/openstack_dashboard/static/dashboard/img/favicon.ico':
+        source  => 'puppet:///modules/openstack2/horizon/Wikimedia_labs.ico',
+        owner   => 'horizon',
+        group   => 'horizon',
+        mode    => '0444',
+        require => Package['openstack-dashboard'],
+    }
+
+    # Homemade totp plugin for keystoneclient
+    file { '/usr/lib/python2.7/dist-packages/keystoneclient/auth/identity/v3/wmtotp.py':
+        source => "puppet:///modules/openstack2/${version}/keystoneclient/wmtotp.py",
+        owner  => 'root',
+        group  => 'root',
+        mode   => '0644',
+    }
+
+    file { '/usr/lib/python2.7/dist-packages/keystoneclient/auth/identity/v3/__init__.py':
+        source => "puppet:///modules/openstack2/${version}/keystoneclient/__init__.py",
+        owner  => 'root',
+        group  => 'root',
+        mode   => '0644',
+    }
+
+    # Homemade totp plugin for openstack_auth
+    file { '/usr/lib/python2.7/dist-packages/openstack_auth/plugin/wmtotp.py':
+        source  => "puppet:///modules/openstack2/${version}/horizon/openstack_auth/wmtotp.py",
+        owner   => 'root',
+        group   => 'root',
+        mode    => '0644',
+        require => Package['python-openstack-auth'],
+    }
+
+    # Replace the standard horizon login form to support 2fa
+    file { '/usr/lib/python2.7/dist-packages/openstack_auth/forms.py':
+        source  => "puppet:///modules/openstack2/${version}/horizon/openstack_auth/forms.py",
+        owner   => 'root',
+        group   => 'root',
+        mode    => '0644',
+        require => Package['python-openstack-auth'],
+    }
+
+    # Replace the standard login backend.py to fix
+    #  https://bugs.launchpad.net/django-openstack-auth/+bug/1562452
+    # and also to implement the 'rememberme' checkbox
+    file { '/usr/lib/python2.7/dist-packages/openstack_auth/backend.py':
+        source  => "puppet:///modules/openstack2/${version}/horizon/openstack_auth/backend.py",
+        owner   => 'root',
+        group   => 'root',
+        mode    => '0644',
+        require => Package['python-openstack-auth'],
+    }
+
+    # Install the designate dashboard
+    file { '/usr/share/openstack-dashboard/openstack_dashboard/local':
+        ensure  => 'directory',
+        owner   => 'root',
+        group   => 'root',
+        mode    => '0644',
+        require => Package['python-designate-dashboard', 'openstack-dashboard'],
+    }
+
+    file { '/usr/share/openstack-dashboard/openstack_dashboard/local/enabled':
+        ensure  => 'directory',
+        owner   => 'root',
+        group   => 'root',
+        mode    => '0644',
+        require => Package['python-designate-dashboard', 'openstack-dashboard'],
+    }
+
+    file { '/usr/share/openstack-dashboard/openstack_dashboard/local/enabled/_70_dns_add_group.py':
+        source  => "puppet:///modules/openstack2/${version}/designate/dashboard/_70_dns_add_group.py",
+        owner   => 'root',
+        group   => 'root',
+        mode    => '0644',
+        require => Package['python-designate-dashboard', 'openstack-dashboard'],
+    }
+
+    file { '/usr/share/openstack-dashboard/openstack_dashboard/local/enabled/_71_dns_project.py':
+        source  => "puppet:///modules/openstack2/${version}/designate/dashboard/_71_dns_project.py",
+        owner   => 'root',
+        group   => 'root',
+        mode    => '0644',
+        require => Package['python-designate-dashboard', 'openstack-dashboard'],
+    }
+
+    # Proxy panel
+    file { '/usr/lib/python2.7/dist-packages/wikimediaproxydashboard':
+        source  => "puppet:///modules/openstack2/${version}/horizon/proxy",
+        owner   => 'root',
+        group   => 'root',
+        mode    => '0644',
+        recurse => true,
+        require => Package['python-designate-dashboard', 'openstack-dashboard'],
+        notify  => Exec['djangorefresh'],
+    }
+
+    file { '/usr/share/openstack-dashboard/openstack_dashboard/local/enabled/_1922_project_proxy_panel.py':
+        source  => "puppet:///modules/openstack2/${version}/horizon/proxy_enable.py",
+        owner   => 'root',
+        group   => 'root',
+        mode    => '0644',
+        require => Package['python-designate-dashboard', 'openstack-dashboard'],
+        notify  => Exec['djangorefresh'],
+    }
+
+    # sudo dashboard
+    file { '/usr/lib/python2.7/dist-packages/wikimediasudodashboard':
+        source  => "puppet:///modules/openstack2/${version}/horizon/sudo",
+        owner   => 'root',
+        group   => 'root',
+        mode    => '0644',
+        recurse => true,
+        require => Package['python-designate-dashboard', 'openstack-dashboard'],
+        notify  => Exec['djangorefresh'],
+    }
+
+    file { '/usr/share/openstack-dashboard/openstack_dashboard/local/enabled/_1926_project_sudo_panel.py':
+        source  => "puppet:///modules/openstack2/${version}/horizon/sudo_enable.py",
+        owner   => 'root',
+        group   => 'root',
+        mode    => '0644',
+        require => Package['python-designate-dashboard', 'openstack-dashboard'],
+        notify  => Exec['djangorefresh'],
+    }
+
+    file { '/usr/share/openstack-dashboard/openstack_dashboard/local/enabled/_72_sudoers_add_group.py':
+        source  => "puppet:///modules/openstack2/${version}/horizon/sudo_group_add.py",
+        owner   => 'root',
+        group   => 'root',
+        mode    => '0644',
+        require => Package['python-designate-dashboard', 'openstack-dashboard'],
+        notify  => Exec['djangorefresh'],
+    }
+
+    if $version != 'liberty' {
+        # Override some .js files to provide a simplified user experience.  Alas
+        #  we can't do this via the overrides.py monkeypatch below
+
+        file { '/usr/share/openstack-dashboard/openstack_dashboard/dashboards/project/static/dashboard/project/workflow/launch-instance/launch-instance-workflow.service.js':
+            source  => "puppet:///modules/openstack2/${version}/horizon/jsoverrides/launch-instance-workflow.service.js",
+            owner   => 'root',
+            group   => 'root',
+            mode    => '0644',
+            require => Package['openstack-dashboard'],
+            notify  => Exec['djangorefresh'],
+        }
+    }
+
+    # Monkeypatches for Horizon customization
+    file { '/usr/lib/python2.7/dist-packages/horizon/overrides.py':
+        source  => "puppet:///modules/openstack2/${version}/horizon/overrides.py",
+        owner   => 'root',
+        group   => 'root',
+        mode    => '0644',
+        require => Package['python-openstack-auth'],
+    }
+
+    # Arbitrary handy script that needs to be on the horizon host because it only works with Liberty
+    file { '/root/makedomain':
+        source => "puppet:///modules/openstack2/${version}/admin_scripts/makedomain",
+        owner  => 'root',
+        group  => 'root',
+        mode   => '0744',
+    }
+
+    apache::site { $webserver_hostname:
+        content => template("openstack2/${version}/horizon/${webserver_hostname}.erb"),
+        require => File['/etc/openstack-dashboard/local_settings.py'],
+    }
+
+    # Collect and compress static web content
+    exec { 'djangorefresh':
+        command     => 'python manage.py collectstatic --noinput && python manage.py compress',
+        path        => '/usr/bin',
+        cwd         => '/usr/share/openstack-dashboard',
+        require     => File['/etc/openstack-dashboard/local_settings.py'],
+        notify      => Service['apache2'],
+        refreshonly => true,
+    }
+}
diff --git a/modules/openstack2/templates/mitaka/horizon/horizon.wikimedia.org.erb b/modules/openstack2/templates/mitaka/horizon/horizon.wikimedia.org.erb
new file mode 100644
index 0000000..2f27ceb
--- /dev/null
+++ b/modules/openstack2/templates/mitaka/horizon/horizon.wikimedia.org.erb
@@ -0,0 +1,24 @@
+#####################################################################
+### THIS FILE IS MANAGED BY PUPPET
+### puppet:///openstack/mitaka/horizon/horizon.wikimedia.org.erb
+#####################################################################
+# vim: filetype=apache
+
+# This config is behind misc-web which handles ssl for us.
+<VirtualHost *:80>
+    ServerName <%= @webserver_hostname %>
+
+    RewriteEngine on
+    RewriteCond %{HTTP:X-Forwarded-Proto} !https
+    RewriteCond %{REQUEST_URI} !^/status$
+    RewriteRule ^/(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [R=301,E=ProtoRedirect]
+    Header always merge Vary X-Forwarded-Proto env=ProtoRedirect
+
+    WSGIScriptAlias / /usr/share/openstack-dashboard/openstack_dashboard/wsgi/django.wsgi
+    WSGIDaemonProcess horizon user=horizon group=horizon processes=3 threads=10
+    WSGIProcessGroup horizon
+    Alias /static /usr/share/openstack-dashboard/openstack_dashboard/static/
+    <Directory /usr/share/openstack-dashboard/openstack_dashboard/wsgi>
+        Require all granted
+    </Directory>
+</VirtualHost>
diff --git a/modules/openstack2/templates/mitaka/horizon/labtesthorizon.wikimedia.org.erb b/modules/openstack2/templates/mitaka/horizon/labtesthorizon.wikimedia.org.erb
new file mode 100644
index 0000000..d5426b8
--- /dev/null
+++ b/modules/openstack2/templates/mitaka/horizon/labtesthorizon.wikimedia.org.erb
@@ -0,0 +1,24 @@
+#####################################################################
+### THIS FILE IS MANAGED BY PUPPET
+### puppet:///openstack/mitaka/horizon/labtesthorizon.wikimedia.org.erb
+#####################################################################
+# vim: filetype=apache
+
+# This config is behind misc-web which handles ssl for us.
+<VirtualHost *:80>
+    ServerName <%= @webserver_hostname %>
+
+    RewriteEngine on
+    RewriteCond %{HTTP:X-Forwarded-Proto} !https
+    RewriteCond %{REQUEST_URI} !^/status$
+    RewriteRule ^/(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [R=301,E=ProtoRedirect]
+    Header always merge Vary X-Forwarded-Proto env=ProtoRedirect
+
+    WSGIScriptAlias / /usr/share/openstack-dashboard/openstack_dashboard/wsgi/django.wsgi
+    WSGIDaemonProcess horizon user=horizon group=horizon processes=3 threads=10
+    WSGIProcessGroup horizon
+    Alias /static /usr/share/openstack-dashboard/openstack_dashboard/static/
+    <Directory /usr/share/openstack-dashboard/openstack_dashboard/wsgi>
+        Require all granted
+    </Directory>
+</VirtualHost>
diff --git a/modules/openstack2/templates/mitaka/horizon/local_settings.py.erb b/modules/openstack2/templates/mitaka/horizon/local_settings.py.erb
new file mode 100644
index 0000000..6a36f2c
--- /dev/null
+++ b/modules/openstack2/templates/mitaka/horizon/local_settings.py.erb
@@ -0,0 +1,550 @@
+#####################################################################
+### THIS FILE IS MANAGED BY PUPPET
+### puppet:///openstack/mitaka/horizon/local_settings.py.erb
+#####################################################################
+import os
+
+from django.utils.translation import ugettext_lazy as _
+
+from openstack_dashboard import exceptions
+
+DEBUG = False
+TEMPLATE_DEBUG = DEBUG
+
+# Required for Django 1.5.
+# If horizon is running in production (DEBUG is False), set this
+# with the list of host/domain names that the application can serve.
+# For more information see:
+# https://docs.djangoproject.com/en/dev/ref/settings/#allowed-hosts
+ALLOWED_HOSTS = ['horizon.wikimedia.org', ]
+
+AUTHENTICATION_PLUGINS = ['openstack_auth.plugin.wmtotp.WmtotpPlugin', 'openstack_auth.plugin.token.TokenPlugin']
+
+# Set SSL proxy settings:
+# For Django 1.4+ pass this header from the proxy after terminating the SSL,
+# and don't forget to strip it from the client's request.
+# For more information see:
+# https://docs.djangoproject.com/en/1.4/ref/settings/#secure-proxy-ssl-header
+# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTOCOL', 'https')
+
+# SESSION_TIMEOUT is in seconds and defaults to 1800.  Change to 7 days
+#  by default, and also support SESSION_SHORT_TIMEOUT of 30 minutes.
+#
+# SESSION_SHORT is a WMF hack.  SESSION_TIMEOUT is used in multiple
+#  places as a maximum in Horizon code, so it was easier to add
+#  a special case extra-short token for when the user does not
+#  check 'Remember me'.
+SESSION_SHORT_TIMEOUT = 1800
+SESSION_TIMEOUT = 604800
+SESSION_COOKIE_AGE = 604800
+CSRF_COOKIE_SECURE = True
+SESSION_COOKIE_SECURE = True
+
+# Overrides for OpenStack API versions. Use this setting to force the
+# OpenStack dashboard to use a specific API version for a given service API.
+# NOTE: The version should be formatted as it appears in the URL for the
+# service API. For example, The identity service APIs have inconsistent
+# use of the decimal point, so valid options would be "2.0" or "3".
+# OPENSTACK_API_VERSIONS = {
+#     "identity": 3,
+#     "volume": 2
+# }
+
+OPENSTACK_API_VERSIONS = {
+     "identity": 3,
+}
+
+# Set this to True if running on multi-domain model. When this is enabled, it
+# will require user to enter the Domain name in addition to username for login.
+# OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = False
+
+# Overrides the default domain used when running on single-domain model
+# with Keystone V3. All entities will be created in the default domain.
+# OPENSTACK_KEYSTONE_DEFAULT_DOMAIN = 'Default'
+
+# Set Console type:
+# valid options would be "AUTO", "VNC", "SPICE" or "RDP"
+# CONSOLE_TYPE = "AUTO"
+
+# Default OpenStack Dashboard configuration.
+HORIZON_CONFIG = {
+    'user_home': 'openstack_dashboard.views.get_user_home',
+    'ajax_queue_limit': 10,
+    'auto_fade_alerts': {
+        'delay': 3000,
+        'fade_duration': 1500,
+        'types': ['alert-success', 'alert-info']
+    },
+    'help_url': "https://wikitech.wikimedia.org/wiki/Horizon",
+    'exceptions': {'recoverable': exceptions.RECOVERABLE,
+                   'not_found': exceptions.NOT_FOUND,
+                   'unauthorized': exceptions.UNAUTHORIZED},
+    'customization_module': 'horizon.overrides',
+}
+
+# Specify a regular expression to validate user passwords.
+# HORIZON_CONFIG["password_validator"] = {
+#     "regex": '.*',
+#     "help_text": _("Your password does not meet the requirements.")
+# }
+
+# Disable simplified floating IP address management for deployments with
+# multiple floating IP pools or complex network requirements.
+# HORIZON_CONFIG["simple_ip_management"] = False
+
+# Turn on browser autocompletion for the login form
+HORIZON_CONFIG["password_autocomplete"] = "on"
+
+LOCAL_PATH = os.path.dirname(os.path.abspath(__file__))
+
+# Set custom secret key:
+# You can either set it to a specific value or you can let horizion generate a
+# default secret key that is unique on this machine, e.i. regardless of the
+# amount of Python WSGI workers (if used behind Apache+mod_wsgi): However, there
+# may be situations where you would want to set this explicitly, e.g. when
+# multiple dashboard instances are distributed on different machines (usually
+# behind a load-balancer). Either you have to make sure that a session gets all
+# requests routed to the same dashboard instance or you set the same SECRET_KEY
+# for all of them.
+from horizon.utils import secret_key
+SECRET_KEY = secret_key.generate_or_read_from_file('/var/lib/openstack-dashboard/secret_key')
+
+# We recommend you use memcached for development; otherwise after every reload
+# of the django development server, you will have to login again.
+SESSION_ENGINE='django.contrib.sessions.backends.cache'
+CACHES = {
+   'default': {
+       'BACKEND' : 'django.core.cache.backends.memcached.MemcachedCache',
+       'LOCATION' : '127.0.0.1:11000',
+   }
+}
+
+# Enable the Ubuntu theme if it is present.
+try:
+	from ubuntu_theme import *
+except ImportError:
+	pass
+
+# Default Ubuntu apache configuration uses /horizon as the application root.
+# Configure auth redirects here accordingly.
+LOGIN_URL='/auth/login/'
+LOGOUT_URL='/auth/logout/'
+LOGIN_REDIRECT_URL='/'
+
+# The Ubuntu package includes pre-compressed JS and compiled CSS to allow
+# offline compression by default.  To enable online compression, install
+# the node-less package and enable the following option.
+COMPRESS_OFFLINE = True
+COMPRESS_ENABLED = True
+
+# By default, validation of the HTTP Host header is disabled.  Production
+# installations should have this set accordingly.  For more information
+# see https://docs.djangoproject.com/en/dev/ref/settings/.
+ALLOWED_HOSTS = '*'
+
+# Send email to the console by default
+EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
+# Or send them to /dev/null
+#EMAIL_BACKEND = 'django.core.mail.backends.dummy.EmailBackend'
+
+# Configure these for your outgoing email host
+# EMAIL_HOST = 'smtp.my-company.com'
+# EMAIL_PORT = 25
+# EMAIL_HOST_USER = 'djangomail'
+# EMAIL_HOST_PASSWORD = 'top-secret!'
+
+# For multiple regions uncomment this configuration, and add (endpoint, title).
+# AVAILABLE_REGIONS = [
+#     ('http://cluster1.example.com:5000/v2.0', 'cluster1'),
+#     ('http://cluster2.example.com:5000/v2.0', 'cluster2'),
+# ]
+
+OPENSTACK_HOST = "<%= @nova_controller %>"
+OPENSTACK_KEYSTONE_URL = "http://%s:5000/v3" % OPENSTACK_HOST
+OPENSTACK_KEYSTONE_DEFAULT_ROLE = "user"
+
+# Disable SSL certificate checks (useful for self-signed certificates):
+# OPENSTACK_SSL_NO_VERIFY = True
+
+# The CA certificate to use to verify SSL connections
+# OPENSTACK_SSL_CACERT = '/path/to/cacert.pem'
+
+# The OPENSTACK_KEYSTONE_BACKEND settings can be used to identify the
+# capabilities of the auth backend for Keystone.
+# If Keystone has been configured to use LDAP as the auth backend then set
+# can_edit_user to False and name to 'ldap'.
+#
+# TODO(tres): Remove these once Keystone has an API to identify auth backend.
+OPENSTACK_KEYSTONE_BACKEND = {
+    'name': 'native',
+    'can_edit_user': True,
+    'can_edit_group': True,
+    'can_edit_project': True,
+    'can_edit_domain': True,
+    'can_edit_role': True
+}
+
+#Setting this to True, will add a new "Retrieve Password" action on instance,
+#allowing Admin session password retrieval/decryption.
+#OPENSTACK_ENABLE_PASSWORD_RETRIEVE = False
+
+# The Xen Hypervisor has the ability to set the mount point for volumes
+# attached to instances (other Hypervisors currently do not). Setting
+# can_set_mount_point to True will add the option to set the mount point
+# from the UI.
+OPENSTACK_HYPERVISOR_FEATURES = {
+    'can_set_mount_point': False,
+    'can_set_password': False,
+}
+
+# The OPENSTACK_NEUTRON_NETWORK settings can be used to enable optional
+# services provided by neutron. Options currently available are load
+# balancer service, security groups, quotas, VPN service.
+OPENSTACK_NEUTRON_NETWORK = {
+    'enable_lb': False,
+    'enable_firewall': False,
+    'enable_quotas': True,
+    'enable_vpn': False,
+    # The profile_support option is used to detect if an external router can be
+    # configured via the dashboard. When using specific plugins the
+    # profile_support can be turned on if needed.
+    'profile_support': None,
+    #'profile_support': 'cisco',
+}
+
+# The OPENSTACK_IMAGE_BACKEND settings can be used to customize features
+# in the OpenStack Dashboard related to the Image service, such as the list
+# of supported image formats.
+# OPENSTACK_IMAGE_BACKEND = {
+#     'image_formats': [
+#         ('', ''),
+#         ('aki', _('AKI - Amazon Kernel Image')),
+#         ('ami', _('AMI - Amazon Machine Image')),
+#         ('ari', _('ARI - Amazon Ramdisk Image')),
+#         ('iso', _('ISO - Optical Disk Image')),
+#         ('qcow2', _('QCOW2 - QEMU Emulator')),
+#         ('raw', _('Raw')),
+#         ('vdi', _('VDI')),
+#         ('vhd', _('VHD')),
+#         ('vmdk', _('VMDK'))
+#     ]
+# }
+
+# The IMAGE_CUSTOM_PROPERTY_TITLES settings is used to customize the titles for
+# image custom property attributes that appear on image detail pages.
+IMAGE_CUSTOM_PROPERTY_TITLES = {
+    "architecture": _("Architecture"),
+    "kernel_id": _("Kernel ID"),
+    "ramdisk_id": _("Ramdisk ID"),
+    "image_state": _("Euca2ools state"),
+    "project_id": _("Project ID"),
+    "image_type": _("Image Type")
+}
+
+# OPENSTACK_ENDPOINT_TYPE specifies the endpoint type to use for the endpoints
+# in the Keystone service catalog. Use this setting when Horizon is running
+# external to the OpenStack environment. The default is 'publicURL'.
+#OPENSTACK_ENDPOINT_TYPE = "publicURL"
+
+# SECONDARY_ENDPOINT_TYPE specifies the fallback endpoint type to use in the
+# case that OPENSTACK_ENDPOINT_TYPE is not present in the endpoints
+# in the Keystone service catalog. Use this setting when Horizon is running
+# external to the OpenStack environment. The default is None.  This
+# value should differ from OPENSTACK_ENDPOINT_TYPE if used.
+#SECONDARY_ENDPOINT_TYPE = "publicURL"
+
+# The number of objects (Swift containers/objects or images) to display
+# on a single page before providing a paging element (a "more" link)
+# to paginate results.
+API_RESULT_LIMIT = 1000
+API_RESULT_PAGE_SIZE = 20
+
+# The timezone of the server. This should correspond with the timezone
+# of your entire OpenStack installation, and hopefully be in UTC.
+TIME_ZONE = "UTC"
+
+# When launching an instance, the menu of available flavors is
+# sorted by RAM usage, ascending. If you would like a different sort order,
+# you can provide another flavor attribute as sorting key. Alternatively, you
+# can provide a custom callback method to use for sorting. You can also provide
+# a flag for reverse sort. For more info, see
+# http://docs.python.org/2/library/functions.html#sorted
+# CREATE_INSTANCE_FLAVOR_SORT = {
+#     'key': 'name',
+#      # or
+#     'key': my_awesome_callback_method,
+#     'reverse': False,
+# }
+
+# The Horizon Policy Enforcement engine uses these values to load per service
+# policy rule files. The content of these files should match the files the
+# OpenStack services are using to determine role based access control in the
+# target installation.
+
+# Path to directory containing policy.json files
+POLICY_FILES_PATH = '/etc/openstack-dashboard/'
+# Map of local copy of service policy files
+POLICY_FILES = {
+    'identity': 'keystone_policy.json',
+    'compute': 'nova_policy.json',
+    'image': 'glance_policy.json',
+    'dns': 'designate_policy.json',
+    'volume': 'disabled_policy.json',
+    'telemetry': 'disabled_policy.json',
+    'orchestration': 'disabled_policy.json',
+    'network': 'disabled_policy.json',
+}
+
+# Trove user and database extension support. By default support for
+# creating users and databases on database instances is turned on.
+# To disable these extensions set the permission here to something
+# unusable such as ["!"].
+# TROVE_ADD_USER_PERMS = []
+# TROVE_ADD_DATABASE_PERMS = []
+
+LOGGING = {
+    'version': 1,
+    # When set to True this will disable all logging except
+    # for loggers specified in this configuration dictionary. Note that
+    # if nothing is specified here and disable_existing_loggers is True,
+    # django.db.backends will still log unless it is disabled explicitly.
+    'disable_existing_loggers': False,
+    'handlers': {
+        'null': {
+            'level': 'DEBUG',
+            'class': 'django.utils.log.NullHandler',
+        },
+        'console': {
+            # Set the level to "DEBUG" for verbose output logging.
+            'level': 'INFO',
+            'class': 'logging.StreamHandler',
+        },
+    },
+    'loggers': {
+        # Logging from django.db.backends is VERY verbose, send to null
+        # by default.
+        'django.db.backends': {
+            'handlers': ['null'],
+            'propagate': False,
+        },
+        'requests': {
+            'handlers': ['null'],
+            'propagate': False,
+        },
+        'horizon': {
+            'handlers': ['console'],
+            'level': 'DEBUG',
+            'propagate': False,
+        },
+        'openstack_dashboard': {
+            'handlers': ['console'],
+            'level': 'DEBUG',
+            'propagate': False,
+        },
+        'novaclient': {
+            'handlers': ['console'],
+            'level': 'DEBUG',
+            'propagate': False,
+        },
+        'cinderclient': {
+            'handlers': ['console'],
+            'level': 'DEBUG',
+            'propagate': False,
+        },
+        'keystoneclient': {
+            'handlers': ['console'],
+            'level': 'DEBUG',
+            'propagate': False,
+        },
+        'glanceclient': {
+            'handlers': ['console'],
+            'level': 'DEBUG',
+            'propagate': False,
+        },
+        'neutronclient': {
+            'handlers': ['console'],
+            'level': 'DEBUG',
+            'propagate': False,
+        },
+        'heatclient': {
+            'handlers': ['console'],
+            'level': 'DEBUG',
+            'propagate': False,
+        },
+        'ceilometerclient': {
+            'handlers': ['console'],
+            'level': 'DEBUG',
+            'propagate': False,
+        },
+        'troveclient': {
+            'handlers': ['console'],
+            'level': 'DEBUG',
+            'propagate': False,
+        },
+        'swiftclient': {
+            'handlers': ['console'],
+            'level': 'DEBUG',
+            'propagate': False,
+        },
+        'openstack_auth': {
+            'handlers': ['console'],
+            'level': 'DEBUG',
+            'propagate': False,
+        },
+        'nose.plugins.manager': {
+            'handlers': ['console'],
+            'level': 'DEBUG',
+            'propagate': False,
+        },
+        'django': {
+            'handlers': ['console'],
+            'level': 'DEBUG',
+            'propagate': False,
+        },
+        'iso8601': {
+            'handlers': ['null'],
+            'propagate': False,
+        },
+    }
+}
+
+# 'direction' should not be specified for all_tcp/udp/icmp.
+# It is specified in the form.
+SECURITY_GROUP_RULES = {
+    'all_tcp': {
+        'name': 'ALL TCP',
+        'ip_protocol': 'tcp',
+        'from_port': '1',
+        'to_port': '65535',
+    },
+    'all_udp': {
+        'name': 'ALL UDP',
+        'ip_protocol': 'udp',
+        'from_port': '1',
+        'to_port': '65535',
+    },
+    'all_icmp': {
+        'name': 'ALL ICMP',
+        'ip_protocol': 'icmp',
+        'from_port': '-1',
+        'to_port': '-1',
+    },
+    'ssh': {
+        'name': 'SSH',
+        'ip_protocol': 'tcp',
+        'from_port': '22',
+        'to_port': '22',
+    },
+    'smtp': {
+        'name': 'SMTP',
+        'ip_protocol': 'tcp',
+        'from_port': '25',
+        'to_port': '25',
+    },
+    'dns': {
+        'name': 'DNS',
+        'ip_protocol': 'tcp',
+        'from_port': '53',
+        'to_port': '53',
+    },
+    'http': {
+        'name': 'HTTP',
+        'ip_protocol': 'tcp',
+        'from_port': '80',
+        'to_port': '80',
+    },
+    'pop3': {
+        'name': 'POP3',
+        'ip_protocol': 'tcp',
+        'from_port': '110',
+        'to_port': '110',
+    },
+    'imap': {
+        'name': 'IMAP',
+        'ip_protocol': 'tcp',
+        'from_port': '143',
+        'to_port': '143',
+    },
+    'ldap': {
+        'name': 'LDAP',
+        'ip_protocol': 'tcp',
+        'from_port': '389',
+        'to_port': '389',
+    },
+    'https': {
+        'name': 'HTTPS',
+        'ip_protocol': 'tcp',
+        'from_port': '443',
+        'to_port': '443',
+    },
+    'smtps': {
+        'name': 'SMTPS',
+        'ip_protocol': 'tcp',
+        'from_port': '465',
+        'to_port': '465',
+    },
+    'imaps': {
+        'name': 'IMAPS',
+        'ip_protocol': 'tcp',
+        'from_port': '993',
+        'to_port': '993',
+    },
+    'pop3s': {
+        'name': 'POP3S',
+        'ip_protocol': 'tcp',
+        'from_port': '995',
+        'to_port': '995',
+    },
+    'ms_sql': {
+        'name': 'MS SQL',
+        'ip_protocol': 'tcp',
+        'from_port': '1433',
+        'to_port': '1433',
+    },
+    'mysql': {
+        'name': 'MYSQL',
+        'ip_protocol': 'tcp',
+        'from_port': '3306',
+        'to_port': '3306',
+    },
+    'rdp': {
+        'name': 'RDP',
+        'ip_protocol': 'tcp',
+        'from_port': '3389',
+        'to_port': '3389',
+    },
+}
+
+FLAVOR_EXTRA_KEYS = {
+    'flavor_keys': [
+        ('quota:read_bytes_sec', _('Quota: Read bytes')),
+        ('quota:write_bytes_sec', _('Quota: Write bytes')),
+        ('quota:cpu_quota', _('Quota: CPU')),
+        ('quota:cpu_period', _('Quota: CPU period')),
+        ('quota:inbound_average', _('Quota: Inbound average')),
+        ('quota:outbound_average', _('Quota: Outbound average')),
+    ]
+}
+
+# WMF-specific branding
+SITE_BRANDING = 'Manage Wikimedia Labs'
+SITE_BRANDING_LINK = 'https://horizon.wikimedia.org'
+
+# WMF-specific security limits
+HORIZON_IMAGES_ALLOW_UPLOAD = False
+
+DESIGNATE = { 'records_use_fips': True }
+
+WMFLABSDOTORG_ADMIN_USERNAME = '<%= @wmflabsdotorg_admin %>'
+WMFLABSDOTORG_ADMIN_PASSWORD = '<%= @wmflabsdotorg_pass %>'
+INSTANCE_TLD = '<%= @dhcp_domain %>'
+
+# Disable instance consoles for Horizon users
+CONSOLE_TYPE = False
+
+PUPPETMASTER_API  = "https://<%= scope.function_hiera(['labs_puppet_master']) %>:8140/puppet"
+PUPPET_CONFIG_BACKEND  = "http://<%= scope.function_hiera(['labs_puppet_master']) %>:8101/v1"
+
+LDAP_USER = "uid=novaadmin,ou=people,dc=wikimedia,dc=org"
+LDAP_PROJECTS_BASE = "ou=projects,dc=wikimedia,dc=org"
+LDAP_USER_PASSWORD = "<%= @ldap_user_pass %>"
diff --git a/modules/profile/manifests/openstack/base/horizon/dashboard.pp b/modules/profile/manifests/openstack/base/horizon/dashboard.pp
new file mode 100644
index 0000000..061a254
--- /dev/null
+++ b/modules/profile/manifests/openstack/base/horizon/dashboard.pp
@@ -0,0 +1,32 @@
+class profile::openstack::base::horizon::dashboard(
+    $version = hiera('profile::openstack::base::version'),
+    $nova_controller = hiera('profile::openstack::base::nova_controller'),
+    $wmflabsdotorg_admin = hiera('profile::openstack::base::designate::wmflabsdotorg_pass'),
+    $wmflabsdotorg_pass = hiera('profile::openstack::base::designate::wmflabsdotorg_pass'),
+    $dhcp_domain = hiera('profile::openstack::base::nova::dhcp_domain'),
+    $ldap_user_pass = hiera('profile::openstack::base::ldap_user_pass'),
+    $webserver_hostname = hiera('profile::openstack::base::horizon::webserver_hostname'),
+    ) {
+
+    # TODO: Add openstack2::util::envscripts during profile conversion
+    class { 'openstack2::horizon::service':
+        version             => $version,
+        nova_controller     => $nova_controller,
+        wmflabsdotorg_admin => $wmflabsdotorg_admin,
+        wmflabsdotorg_pass  => $wmflabsdotorg_pass,
+        dhcp_domain         => $dhcp_domain,
+        ldap_user_pass      => $ldap_user_pass,
+        webserver_hostname  => $webserver_hostname,
+    }
+
+    #   require => Class['openstack2::horizon::service'],
+    class {'::openstack2::horizon::puppetpanel':
+        version => $version,
+    }
+
+    ferm::service { 'horizon_http':
+        proto  => 'tcp',
+        port   => '80',
+        srange => '$PRODUCTION_NETWORKS',
+    }
+}
diff --git a/modules/profile/manifests/openstack/labtest/horizon/dashboard.pp b/modules/profile/manifests/openstack/labtest/horizon/dashboard.pp
new file mode 100644
index 0000000..81d0dcd
--- /dev/null
+++ b/modules/profile/manifests/openstack/labtest/horizon/dashboard.pp
@@ -0,0 +1,21 @@
+class profile::openstack::labtest::horizon::dashboard(
+    $version = hiera('profile::openstack::labtest::version'),
+    $nova_controller = hiera('profile::openstack::labtest::nova_controller'),
+    $wmflabsdotorg_admin = hiera('profile::openstack::labtest::designate::wmflabsdotorg_pass'),
+    $wmflabsdotorg_pass = hiera('profile::openstack::labtest::designate::wmflabsdotorg_pass'),
+    $dhcp_domain = hiera('profile::openstack::labtest::nova::dhcp_domain'),
+    $ldap_user_pass = hiera('profile::openstack::labtest::ldap_user_pass'),
+    $webserver_hostname = hiera('profile::openstack::labtest::horizon::webserver_hostname'),
+    ) {
+
+    require ::profile::openstack::labtest::clientlib
+    class {'::profile::openstack::base::horizon::dashboard':
+        version             => $version,
+        nova_controller     => $nova_controller,
+        wmflabsdotorg_admin => $wmflabsdotorg_admin,
+        wmflabsdotorg_pass  => $wmflabsdotorg_pass,
+        dhcp_domain         => $dhcp_domain,
+        ldap_user_pass      => $ldap_user_pass,
+        webserver_hostname  => $webserver_hostname,
+    }
+}
diff --git a/modules/profile/manifests/openstack/main/horizon/dashboard.pp b/modules/profile/manifests/openstack/main/horizon/dashboard.pp
new file mode 100644
index 0000000..9366e3d
--- /dev/null
+++ b/modules/profile/manifests/openstack/main/horizon/dashboard.pp
@@ -0,0 +1,21 @@
+class profile::openstack::main::horizon::dashboard(
+    $version = hiera('profile::openstack::main::version'),
+    $nova_controller = hiera('profile::openstack::main::nova_controller'),
+    $wmflabsdotorg_admin = hiera('profile::openstack::main::designate::wmflabsdotorg_pass'),
+    $wmflabsdotorg_pass = hiera('profile::openstack::main::designate::wmflabsdotorg_pass'),
+    $dhcp_domain = hiera('profile::openstack::main::nova::dhcp_domain'),
+    $ldap_user_pass = hiera('profile::openstack::main::ldap_user_pass'),
+    $webserver_hostname = hiera('profile::openstack::main::horizon::webserver_hostname'),
+    ) {
+
+    require ::profile::openstack::main::clientlib
+    class {'::profile::openstack::base::horizon::dashboard':
+        version             => $version,
+        nova_controller     => $nova_controller,
+        wmflabsdotorg_admin => $wmflabsdotorg_admin,
+        wmflabsdotorg_pass  => $wmflabsdotorg_pass,
+        dhcp_domain         => $dhcp_domain,
+        ldap_user_pass      => $ldap_user_pass,
+        webserver_hostname  => $webserver_hostname,
+    }
+}
diff --git a/modules/role/manifests/horizon.pp b/modules/role/manifests/horizon.pp
deleted file mode 100644
index fcbb23b..0000000
--- a/modules/role/manifests/horizon.pp
+++ /dev/null
@@ -1,19 +0,0 @@
-class role::horizon {
-    # TODO: Add openstack2::util::envscripts during profile conversion
-
-    include role::labs::openstack::nova::common
-    $novaconfig = $role::labs::openstack::nova::common::novaconfig
-    $designateconfig = hiera_hash('designateconfig', {})
-
-    class { 'openstack::horizon::service':
-        openstack_version => $::openstack_version,
-        novaconfig        => $novaconfig,
-        designateconfig   => $designateconfig,
-    }
-
-    ferm::service { 'horizon_http':
-        proto  => 'tcp',
-        port   => '80',
-        srange => '$PRODUCTION_NETWORKS',
-    }
-}
diff --git a/modules/role/manifests/wmcs/openstack/labtest/web.pp b/modules/role/manifests/wmcs/openstack/labtest/web.pp
index 4b5deca..26a96bb 100644
--- a/modules/role/manifests/wmcs/openstack/labtest/web.pp
+++ b/modules/role/manifests/wmcs/openstack/labtest/web.pp
@@ -2,4 +2,5 @@ class role::wmcs::openstack::labtest::web {
     include ::profile::openstack::labtest::cloudrepo
     include ::profile::openstack::labtest::clientlib
     include ::profile::openstack::labtest::observerenv
+    include ::profile::openstack::labtest::horizon::dashboard
 }
diff --git a/modules/role/manifests/wmcs/openstack/main/horizon.pp b/modules/role/manifests/wmcs/openstack/main/horizon.pp
index 5ffc0f2..d05e6d2 100644
--- a/modules/role/manifests/wmcs/openstack/main/horizon.pp
+++ b/modules/role/manifests/wmcs/openstack/main/horizon.pp
@@ -1,6 +1,7 @@
 # All horizon/striker/wikitech profiles should fold into
 # role::wmcs::openstack::main::web when labweb* is finished
 class role::wmcs::openstack::main::horizon {
-    include profile::openstack::main::cloudrepo
-    include profile::openstack::main::observerenv
+    include ::profile::openstack::main::cloudrepo
+    include ::profile::openstack::main::observerenv
+    include ::profile::openstack::main::horizon::dashboard
 }
-- 
1.9.1

