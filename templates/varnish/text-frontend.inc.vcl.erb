// Varnish VCL include file for text frontends

include "errorpage.inc.vcl";
include "text-common.inc.vcl";
include "provenance.inc.vcl";
include "via.inc.vcl";
include "last-access.inc.vcl";

// Note that via.inc.vcl will set an X-Analytics value of proxy=IORG
// without inspecting whether there's an existing proxy=<proxy> key-
// value pair inside X-Analytics. We do this because if the traffic
// had come from a known proxy (e.g., Opera or Nokia), that would
// imply that Internet.org was not the rightmost endpoint. In time
// we will need to add the notion of proxy chaining to record whether
// something came through both a known proxy and had Via: Internet.org
// with a corresponding unknown rightmost endpoint (the rightmost
// Internet.org endpoint with an unpredictable Internet-facing IP
// address) in X-Forwarded-For, even if it's the only value, as in
// the example of traffic sourced directly by satellite or something.
// IMPORTANT NOTE: other proxy tagging isn't in place for the domains
// scoped by this text-frontend.inc.vcl.erb file, as that's currently
// only inside of zero.inc.vcl.erb, which is invoked by
// mobile-frontend.inc.vcl.erb for (m|zero).wikipedia.org and its
// subdomains.

sub mobile_redirect {
	if ((req.request == "GET" || req.request == "HEAD")
		&& (req.http.User-Agent ~ "(?i)(mobi|240x240|240x320|320x320|alcatel|android|audiovox|bada|benq|blackberry|cdm-|compal-|docomo|ericsson|hiptop|htc[-_]|huawei|ipod|kddi-|kindle|meego|midp|mitsu|mmp\/|mot-|motor|ngm_|nintendo|opera.m|palm|panasonic|philips|phone|playstation|portalmmm|sagem-|samsung|sanyo|sec-|semc-browser|sendo|sharp|silk|softbank|symbian|teleca|up.browser|vodafone|webos)"
			|| req.http.User-Agent ~ "^(?i)(lge?|sie|nec|sgh|pg)-" || req.http.Accept ~ "vnd.wap.wml")
		&& req.http.Cookie !~ "(stopMobileRedirect=true|mf_useformat=desktop)"
		&& (
			req.url ~ "^/(wiki|(gan|ike|iu|kk|ku|shi|sr|tg|uz|zh)(-[a-z]+)?)[/\?]"
			|| req.url ~ "^/(w/index\.php)?\?title=[^&]*$"
		)) {

		// Separate regexps for clarity, but multiple regsubs instead of
		// "if host ~"/regsub matches for efficiency. Be careful to not
		// write overlapping/chaining regexps.
		set req.http.MobileHost = req.http.Host;
		set req.http.MobileHost = regsub(req.http.MobileHost, "^(www\.)?(mediawiki|wikimediafoundation|wikisource|wikidata)\.", "m.\2.");
		set req.http.MobileHost = regsub(req.http.MobileHost, "^(commons|incubator|legalteam|meta|office|outreach|pl|species|strategy|wikimania201[2-5])\.(wikimedia)\.", "\1.m.\2.");
		set req.http.MobileHost = regsub(req.http.MobileHost, "^((?!commons|meta|nostalgia|quote|quality|sep11|sources|species|textbook|m)\w+)\.(wikipedia|wiktionary|wikinews|wikisource|wikiquote|wikibooks|wikiversity|wikivoyage)\.", "\1.m.\2.");

		if (req.http.Host != req.http.MobileHost) {
			if (req.http.X-Forwarded-Proto) {
				set req.http.Location = req.http.X-Forwarded-Proto + "://" + req.http.MobileHost + req.url;
			} else {
				set req.http.Location = "http://" + req.http.MobileHost + req.url;
			}
			error 666 "Found";
		}
		unset req.http.MobileHost;
	}
}

sub vcl_recv {
	call filter_headers;
	call filter_noise;

	// FIXME: we're seeing an issue with Range requests and gzip/gunzip.
	// Disable Range requests for now.
	unset req.http.Range;

	// Allow purging
	call vcl_recv_purge;

	// BITS: legacy bits.wm.o domain support
	if (req.http.host == "<%= @vcl_config.fetch('bits_domain') %>") {
		if (req.url ~ "^/event\.gif") {
			error 204;
		}
		return (lookup);
	}

	// Don't decode percent-encoded slashes in paths for REST APIs
	if (req.url !~ "^/api/rest_v1/") {
		call normalize_path;
	}

	call mobile_redirect;

	# normalize all /static to the same hostname for caching
	if (req.url ~ "^/static/") { set req.http.host = "<%= @vcl_config.fetch("static_host") %>"; }

	if (req.http.host ~ "^test\.") {
		set req.http.X-Wikimedia-Debug = "1";
	}

	if (req.url ~ "^/wiki/Special:CentralAutoLogin/") {
		set req.backend = backend_random;
		set req.hash_ignore_busy = true;
	} else if (req.url ~ "^/api/rest_v1/") {
		set req.backend = backend_random;
	}

	if (req.request != "GET" && req.request != "HEAD") {
		return (pass);
	}

	// Users that just logged out, should not get a 304 for their
	// (locally cached) logged in pages.
	if (req.http.If-Modified-Since && req.http.Cookie ~ "LoggedOut") {
		unset req.http.If-Modified-Since;
	}

	call analytics_last_access_recv;
	call evaluate_cookie;
	call pass_authorization;
	return (lookup);
}

sub vcl_pass {
	call restore_cookie;
}

sub vcl_miss {
	call restore_cookie;
}

sub vcl_fetch {
	if (beresp.ttl <= 0s || req.http.X-Wikimedia-Debug == "1" || req.http.X-Wikimedia-Security-Audit == "1") {
		set beresp.ttl = 120s;
		return (hit_for_pass);
	}

	return (deliver);
}

sub vcl_error {
	// BITS: legacy bits.wm.o domain support
	if (req.http.host == "<%= @vcl_config.fetch('bits_domain') %>") {
		if (obj.status == 204) {
			set obj.http.Connection = "keep-alive";
			return (deliver);
		}
	}

	// Support mobile redirects
	if (obj.status == 666) {
		set obj.http.Location = req.http.Location;
		set obj.status = 302;
		set obj.http.Connection = "keep-alive";
		set obj.http.Content-Length = "0"; // BZ #62245
		return (deliver);
	}

	call errorpage;
	return (deliver);
}

sub vcl_deliver {
	// Strip s-maxage Cache-Control of wiki pages. The s-maxage still applies to Varnish (sent
	// by MediaWiki $wgUseSquid, sends purges internally). But pages musn't be cached elsewhere.
	// NOTE: Language variants URLs are not currently covered by these regexps.
	// Instead of writing regexps for every edge-case, we should impose some order and coherence
	// on our URL routing schemes.
	// NOTE: Only apply to pages. Don't steal cachability of api.php, load.php, etc. (T102898, T113007)
	if (req.url ~ "^/wiki/" || req.url ~ "^/w/index\.php" || req.url ~ "^/\?title=") {
		// ...but exempt CentralNotice banner special pages
		if (req.url !~ "^/wiki/Special\:Banner") {
			set resp.http.Cache-Control = "private, s-maxage=0, max-age=0, must-revalidate";
		}
	}
<% if @vcl_config.fetch("enable_geoiplookup", false) -%>
	// Perform GeoIP look-up and send the result as a session cookie
	if (req.http.X-Orig-Cookie !~ "(^|;\s*)GeoIP=[^;]"
		&& req.http.Cookie !~ "(^|;\s*)GeoIP=[^;]") {
		call geoip_cookie;
	}
<% end -%>

	// Assemble X-Analytics header
	// Some of the headers used for X-Analytics are not varied on, so add them after the backend processing
	// Note that vcl_deliver in other files may also modify X-Analytics.
	if (req.http.X-Forwarded-Proto) {
		if (resp.http.X-Analytics) {
			set resp.http.X-Analytics = resp.http.X-Analytics + ";https=1";
		} else {
			set resp.http.X-Analytics = "https=1";
		}
	}

	if (req.http.X-WMF-UUID) {
		if (resp.http.X-Analytics) {
			set resp.http.X-Analytics = resp.http.X-Analytics + ";wmfuuid=" + req.http.X-WMF-UUID;
		} else {
			set resp.http.X-Analytics = "wmfuuid=" + req.http.X-WMF-UUID;
		}
	}

	call analytics_last_access_deliver;
}
