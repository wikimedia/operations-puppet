# Varnish VCL include file for text frontends

include "errorpage.inc.vcl";
include "text-common.inc.vcl";
include "via.inc.vcl";

// Note that via.inc.vcl will set an X-Analytics value of proxy=IORG
// without inspecting whether there's an existing proxy=<proxy> key-
// value pair inside X-Analytics. We do this because if the traffic
// had come from a known proxy (e.g., Opera or Nokia), that would
// imply that Internet.org was not the rightmost endpoint. In time
// we will need to add the notion of proxy chaining to record whether
// something came through both a known proxy and had Via: Internet.org
// with a corresponding unknown rightmost endpoint (the rightmost
// Internet.org endpoint with an unpredictable Internet-facing IP
// address) in X-Forwarded-For, even if it's the only value, as in
// the example of traffic sourced directly by satellite or something.
// IMPORTANT NOTE: other proxy tagging isn't in place for the domains
// scoped by this text-frontend.inc.vcl.erb file, as that's currently
// only inside of zero.inc.vcl.erb, which is invoked by
// mobile-frontend.inc.vcl.erb for (m|zero).wikipedia.org and its
// subdomains.

include "hhvm.inc.vcl";

# A random director with the same backends as the default 'backend' (chash) director
<%
default_backend = @vcl_config.fetch("default_backend", "backend")
-%>
director <%= default_backend %>_random random {
	.retries = 5;
<%
	@varnish_directors[default_backend].each do |backend|
		name = /^[0-9\.]+$/.match(backend) ? "ipv4_" + backend.gsub(".", "_") : backend.split(".")[0].gsub("-", "_")
-%>
	{
		.backend = <%= name %>;
		.weight = 10;
	}
<% 	end -%>
}

sub set_hhvm_header {
	/* Set the hhvm header for requests:
	 * a) not for the rendering backend
	 * b) not for testwiki */
	if ( req.http.Cookie ~ "hhvm=true"
		&& req.url !~ "^/w/thumb(_handler)?\.php"
		&& req.http.host !~ "^test\.") {
		set req.http.X-Use-HHVM = "1";
	} else {
		unset req.http.X-Use-HHVM;
	}
}

sub mobile_redirect {
	if ( (req.request == "GET" || req.request == "HEAD")
		&& (req.http.User-Agent ~ "(?i)(mobi|240x240|240x320|320x320|alcatel|android|audiovox|bada|benq|blackberry|cdm-|compal-|docomo|ericsson|hiptop|htc[-_]|huawei|ipod|kddi-|kindle|meego|midp|mitsu|mmp\/|mot-|motor|ngm_|nintendo|opera.m|palm|panasonic|philips|phone|playstation|portalmmm|sagem-|samsung|sanyo|sec-|semc-browser|sendo|sharp|silk|softbank|symbian|teleca|up.browser|vodafone|webos)"
			|| req.http.User-Agent ~ "^(?i)(lge?|sie|nec|sgh|pg)-" || req.http.Accept ~ "vnd.wap.wml")
		&& req.http.Cookie !~ "(stopMobileRedirect=true|mf_useformat=desktop)"
		&& req.url ~ "^/(wiki|(gan|ike|iu|kk|ku|shi|sr|tg|uz|zh)(-[a-z]+)?)[/\?]") {

		# Separate regexps for clarity, but multiple regsubs instead of
		# "if host ~"/regsub matches for efficiency. Be careful to not
		# write overlapping/chaining regexps.
		set req.http.MobileHost = req.http.Host;
		set req.http.MobileHost = regsub(req.http.MobileHost, "^(www\.)?(mediawiki|wikimediafoundation|wikisource)\.", "m.\2.");
		set req.http.MobileHost = regsub(req.http.MobileHost, "^(commons|incubator|legalteam|meta|office|outreach|pl|species|strategy|wikimania201[2-5])\.(wikimedia)\.", "\1.m.\2.");
		set req.http.MobileHost = regsub(req.http.MobileHost, "^((?!commons|meta|nostalgia|quote|quality|sep11|sources|species|textbook|m)\w+)\.(wikipedia|wiktionary|wikinews|wikisource|wikiquote|wikibooks|wikiversity|wikivoyage)\.", "\1.m.\2.");

		if (req.http.Host != req.http.MobileHost) {
			if (req.http.X-Forwarded-Proto) {
				set req.http.Location = req.http.X-Forwarded-Proto + "://" + req.http.MobileHost + req.url;
			} else {
				set req.http.Location = "http://" + req.http.MobileHost + req.url;
			}
			error 666 "Found";
		}
		unset req.http.MobileHost;
	}
}

sub filter_headers {
	if (req.restarts == 0) {
		unset req.http.Orig-Cookie;
	}
}

sub filter_noise {
	if (req.request == "POST" && req.url ~ "index\.php\?option=com_jce&task=plugin&plugin=imgmanager&file=imgmanager&method=form&cid=") {
		error 403 "Noise";
	}
}

sub vcl_recv {
	call filter_headers;
	call filter_noise;

	/* Allow purging */
	call vcl_recv_purge;

	/* FIXME: we're seeing an issue with Range requests and gzip/gunzip.
	 * Disable Range requests for now.
	 */
	unset req.http.Range;

	call rewrite_proxy_urls;
	call normalize_path;
	call mobile_redirect;
	call set_hhvm_header;
	call pass_requests;

	if (req.request == "POST" || req.url ~ "^/wiki/Special:CentralAutoLogin/") {
		set req.backend = backend_random;
		set req.hash_ignore_busy = true;
	}

	/* Users that just logged out, should not get a 304 for their
	 * (locally cached) logged in pages. */
	if (req.http.If-Modified-Since && req.http.Cookie ~ "LoggedOut") {
		unset req.http.If-Modified-Since;
	}

	call evaluate_cookie;

	return(lookup);
}

sub vcl_pass {
	call restore_cookie;
}

sub vcl_miss {
	call restore_cookie;
}

sub vcl_fetch {
	if (beresp.ttl <= 0s) {
		set beresp.ttl = 120s;
		return (hit_for_pass);
	}

	call hhvm_is_cacheable;
	return (deliver);
}

sub vcl_error {
	/* Support mobile redirects */
	if (obj.status == 666) {
		set obj.http.Location = req.http.Location;
		set obj.status = 302;
		set obj.http.Connection = "keep-alive";
		set obj.http.Content-Length = "0"; # BZ #62245
		return(deliver);
	}

	call errorpage;
	return(deliver);
}

sub vcl_deliver {
	/* Override the Cache-Control header for wiki content pages */
	if (req.url ~ "(?i)^/w(iki)?/.*"
		&& req.url !~ "^/wiki/Special\:Banner(Controller|ListLoader)"
		&& req.url !~ "(?i)^/w/(extensions/.*|api\.php)"
		&& req.url !~ "(?i)bcache=1") {
		set resp.http.Cache-Control = "private, s-maxage=0, max-age=0, must-revalidate";
	}
	call php_mark_engine;
<% if cluster_options.fetch( "enable_geoiplookup", false ) -%>
	/* Perform GeoIP look-up and send the result as a session cookie */
	if (req.http.Orig-Cookie !~ "(^|;\s*)GeoIP=[^;]"
		&& req.http.Cookie !~ "(^|;\s*)GeoIP=[^;]") {
		call geoip_cookie;
	}
<% end -%>
}
