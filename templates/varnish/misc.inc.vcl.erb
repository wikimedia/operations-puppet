include "errorpage.inc.vcl";

sub vcl_recv {
	if (req.http.Host == "git.wikimedia.org") {
		set req.backend = antimony;
		// gitblit requires the following request headers:
		set req.http.X-Forwarded-Proto = "https";
		set req.http.X-Forwarded-Port = "443";
	} elsif (req.http.Host == "doc.wikimedia.org" || req.http.Host == "integration.wikimedia.org") {
		set req.backend = gallium;
	} elsif (req.http.Host == "download.wikimedia.org") {
		set req.backend = dataset1001;
	} elsif (req.http.Host == "gerrit.wikimedia.org") {
		set req.backend = ytterbium;
		// No caching
		return (pass);
	} elsif (req.http.Host == "gdash.wikimedia.org" || req.http.Host == "performance.wikimedia.org" || req.http.Host == "graphite.wikimedia.org") {
		set req.backend = graphite1001;
	} elsif (req.http.Host == "logstash.wikimedia.org"){
		set req.backend = logstash;
	} elsif (req.http.Host == "releases.wikimedia.org") {
		set req.backend = caesium;
	} elsif (req.http.Host == "scholarships.wikimedia.org" || req.http.Host == "transparency.wikimedia.org" || req.http.Host == "grafana.wikimedia.org" || req.http.Host == "iegreview.wikimedia.org" || req.http.Host == "annual.wikimedia.org" || req.http.Host == "policy.wikimedia.org") {
		set req.backend = zirconium;
	} elsif (req.http.Host == "parsoid-tests.wikimedia.org") {
		set req.backend = ruthenium;
	} elsif (req.http.Host == "horizon.wikimedia.org") {
		set req.backend = californium;
	} elsif (req.http.Host == "phabricator.wikimedia.org" || req.http.Host == "phab.wmfusercontent.org" || req.http.Host == "bugzilla.wikimedia.org" || req.http.Host == "bugs.wikimedia.org") {
		set req.backend = iridium;
	} elsif (req.http.Host == "old-bugzilla.wikimedia.org" || req.http.Host == "static-bugzilla.wikimedia.org" || req.http.Host == "bug-attachment.wikimedia.org" || req.http.Host =="dev.wikimedia.org") {
		set req.backend = zirconium;
		return (pass);
	} elsif (req.http.Host == "svn.wikimedia.org") {
		set req.backend = antimony;
	} elsif (req.http.Host == "servermon.wikimedia.org") {
		set req.backend = netmon1001;
	} elsif (req.http.Host == "people.wikimedia.org") {
		set req.backend = terbium;
		// No caching of public_html dirs
		return (pass);
	} elsif (req.http.Host == "ishmael.wikimedia.org") {
		set req.backend = neon;
	} elsif (req.http.Host == "racktables.wikimedia.org") {
		set req.backend = magnesium;
	} elsif (req.http.Host == "metrics.wikimedia.org" || req.http.Host == "datasets.wikimedia.org" || req.http.Host == "stats.wikimedia.org" || req.http.Host == "stat1001.wikimedia.org") {
		set req.backend = stat1001;
	} elsif (req.http.Host == "config-master.wikimedia.org") {
		set req.backend = palladium;
		// No caching of configs; scripts may want to know when things change
		return (pass);
	} elsif (req.http.Host == "noc.wikimedia.org" || req.http.Host == "dbtree.wikimedia.org") {
		set req.backend = terbium;
	} elsif (req.http.Host == "hue.wikimedia.org") {
		// make sure all requests to Hue are via https proxy
		if (req.http.X-Forwarded-Proto != "https") {
			set req.http.Location = "https://" + req.http.Host + req.url;
			// Use a custom 755 error code to indicate internally
			// that we are forcing a 301 redirect to https.
			error 755 "TLS Redirect";
		}
		else {
			set req.backend = analytics1027;
		}
	}
	elsif (req.http.Host == "yarn.wikimedia.org") {
		// make sure all requests to Yarn ResourceManager UI are via https proxy
		if (req.http.X-Forwarded-Proto != "https") {
			set req.http.Location = "https://" + req.http.Host + req.url;
			// Use a custom 755 error code to indicate internally
			// that we are forcing a 301 redirect to https.
			error 755 "TLS Redirect";
		}
		else {
			set req.backend = analytics1001;
		}
	}
	elsif (req.http.Host ~ ".*\.planet\.wikimedia\.org" || req.http.Host == "planet.wikimedia.org") {
		set req.backend = zirconium;
	} elsif (req.http.Host == "etherpad.wikimedia.org") {
		set req.backend = zirconium;
		return (pass);
	} else {
		error 404 "Domain not served here";
	}

	if (req.request != "GET" && req.request != "HEAD") {
		// We only deal with GET and HEAD
		return (pass);
	}

	return (lookup);
}

sub vcl_error {
	// If status is 755, then we are forcing a redirect to https.
	if (obj.status == 755) {
		set obj.http.Location = req.http.Location;
		set obj.status = 301;
		return(deliver);
	}

	call errorpage;
	return (deliver);
}
