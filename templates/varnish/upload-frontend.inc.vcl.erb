// Varnish VCL include file for upload frontends
include "upload-common.inc.vcl";

sub cluster_fe_recv_pre_purge { }

sub cluster_fe_recv {
	// CORS preflight requests
	if (req.request == "OPTIONS" && req.http.Origin) {
		error 667 "CORS";
	}

	// Homepage redirect to commons
	if (req.url == "/") {
		error 666 "Moved Permanently";
	}

	call upload_common_recv;

	// Look for a "download" request parameter
	if (req.url ~ "(?i)(\?|&)download(=|&|$)") {
		// Pretend that the parameter wasn't there for caching purposes
		set req.url = regsub(req.url, "(?i)(\?|&)download(=[^&]+)?$", "");
		set req.url = regsub(req.url, "(?i)(\?|&)download(=[^&]+)?&", "\1");
		set req.http.X-Content-Disposition = "attachment";
	}

	// Replace double slashes
	set req.url = regsuball(req.url, "/{2,}", "/");
}

sub cluster_fe_hash { }

sub cluster_fe_hit {
	call upload_common_hit;
}

sub cluster_fe_miss {
	// Convert range requests into pass
	if (req.http.Range) {
		set bereq.http.Range = req.http.Range;
		return (pass);
	}

	// Make sure If-Cached requests won't pollute the cache
	if (req.http.If-Cached) {
		return (pass);
	}
}

sub cluster_fe_pass {
	# Hack for a specific load problem...
	if (req.url ~ "_Dallas\.ogg\.360p\.webm$") {
		set req.backend = cache_local_random;
	}
}

sub cluster_fe_backend_response {
	if (beresp.http.Content-Range) {
		// Varnish itself doesn't ask for ranges, so this must have been
		// a passed range request
		set beresp.http.X-Content-Range = beresp.http.Content-Range;

		if (beresp.http.Content-Range ~ "\/[0-9]{8,}$") {
			set beresp.do_stream = true;
			// don't attempt to cache these in the frontend
			return (hit_for_pass);
		}
	}

	// Stream large objects, >= 1 or 32 MB
<% stream_threshold = @cache_route == 'direct' ? 33554432 : 1048576 -%>
	if (std.integer(beresp.http.Content-Length, 33554432) >= <%= stream_threshold %> || beresp.http.Content-Length ~ "^[0-9]{9}") {
		set beresp.do_stream = true;
		if (std.integer(beresp.http.Content-Length, 33554432) >= 33554432 || beresp.http.Content-Length ~ "^[0-9]{9}") {
			// don't attempt to cache these in the frontend
			return (hit_for_pass);
		}
	}

	return (deliver);
}

sub cluster_fe_deliver {
	call upload_common_deliver;

	unset resp.http.X-MediaWiki-Original;

	if (req.http.X-Content-Disposition == "attachment") {
		set resp.http.Content-Disposition = "attachment";
	}

	set resp.http.Access-Control-Allow-Origin = "*";

	// Headers exposed for CORS:
	// - Age, Content-Length, Date, X-Cache, X-Varnish: used by MultimediaViewer
	//   for client-side performance metrics (1cb80099d97ad).
	//
	// - X-Content-Duration: used for OGG audio and video files (7077999966).
	//   Firefox 41 dropped support for this header, but OGV.js still supports it.
	//   See <https://bugzilla.mozilla.org/show_bug.cgi?id=1160695#c27> and
	//   <https://github.com/brion/ogv.js/issues/88>.
	//
	// - Content-Range: indicates total file and actual range returned for RANGE
	//   requests (939b436512). Used by ogv.js to eliminate an extra HEAD request
	//   to get the the total file size.
	set resp.http.Access-Control-Expose-Headers = "Age, Date, Content-Length, Content-Range, X-Content-Duration, X-Cache, X-Varnish";

	// "Timing-Allow-Origin" is part of the Resource Timing specification
	// (https://www.w3.org/TR/resource-timing/). Setting this header allows
	// JavaScript with a different origin to access resource timing info
	// (e9cbfd539edd3). See <https://phabricator.wikimedia.org/T76020>.
	set resp.http.Timing-Allow-Origin = "*";
}

sub cluster_fe_err_synth {
	// Handle CORS preflight requests
	if (obj.status == 667) {
		set obj.status = 200;
		set obj.response = "OK";
		set obj.http.Connection = "keep-alive";
		set obj.http.Content-Length = "0";

		// allow Range requests, used by ogv.js
		set obj.http.Access-Control-Allow-Origin = "*";
		set obj.http.Access-Control-Allow-Headers = "Range";
		set obj.http.Access-Control-Allow-Methods = "GET, HEAD, OPTIONS";
		set obj.http.Access-Control-Max-Age = "86400";

		return (deliver);
	}

	// Homepage redirect to commons
	if (obj.status == 666) {
		set obj.status = 301;
		set obj.http.Location = "https://commons.wikimedia.org/";
		set obj.http.Connection = "keep-alive";
		set obj.http.Content-Length = "0";
		return (deliver);
	}
}
