// Varnish VCL include file for upload frontends
include "upload-common.inc.vcl";

sub cluster_fe_recv_pre_purge { }

sub cluster_fe_recv {
	// CORS preflight requests
	if (<%= @req_method %> == "OPTIONS" && req.http.Origin) {
		<%= error_synth(667, "OK") -%>
	}

	// Homepage redirect to commons
	if (req.url == "/") {
		<%= error_synth(666, "Moved Permanently") -%>
	}

	call upload_common_recv;

	// Look for a "download" request parameter
	if (req.url ~ "(?i)(\?|&)download(=|&|$)") {
		// Pretend that the parameter wasn't there for caching purposes
		set req.url = regsub(req.url, "(?i)(\?|&)download(=[^&]+)?$", "");
		set req.url = regsub(req.url, "(?i)(\?|&)download(=[^&]+)?&", "\1");
		set req.http.X-Content-Disposition = "attachment";
	}

	// Replace double slashes
	set req.url = regsuball(req.url, "/{2,}", "/");

	// Fixup borked client Range: headers
	if (req.http.Range ~ "(?i)bytes:") {
		set req.http.Range = regsub(req.http.Range, "(?i)bytes:\s*", "bytes=");
	}
}

sub cluster_fe_hash { }

sub cluster_fe_hit {
	call upload_common_hit;
}

sub cluster_fe_miss {
	call upload_common_miss;

	// Make sure If-Cached requests won't pollute the cache
	if (req.http.If-Cached) {
		return (pass);
	}
}

sub cluster_fe_pass { }

<% if @varnish_version4 -%>
sub cluster_fe_backend_fetch {
	call upload_common_set_range;
}
<% end -%>

sub cluster_fe_backend_response {
	if (beresp.http.Content-Range) {
		// Varnish itself doesn't ask for ranges, so this must have been
		// a passed range request
		set beresp.http.X-Content-Range = beresp.http.Content-Range;

		<%- if not @varnish_version4 -%>
		if (beresp.http.Content-Range ~ "\/[0-9]{8,}$") {
			set beresp.do_stream = true;
		}
		<%- end -%>
	}

	<%- if not @varnish_version4 -%>
	// Stream large objects, >= 1 or 32 MB
<% stream_threshold = @cache_route == 'direct' ? 33554432 : 1048576 -%>
	if (std.integer(beresp.http.Content-Length, 33554432) >= <%= stream_threshold %> || beresp.http.Content-Length ~ "^[0-9]{9}") {
		set beresp.do_stream = true;
	}
	<%- end -%>

	// hit-for-pass objects >= 1MB size
	if (std.integer(beresp.http.Content-Length, 1048576) >= 1048576 || beresp.http.Content-Length ~ "^[0-9]{9}") {
		set beresp.http.X-CDIS = "pass";
		<%- if @varnish_version4 -%>
		set beresp.uncacheable = true;
		return (deliver);
		<%- else -%>
		return (hit_for_pass);
		<%- end -%>
	}

	call upload_common_backend_response;
	return (deliver);
}

sub cluster_fe_deliver {
	call upload_common_deliver;

	// The upload cluster does not serve page views or authenticated requests, so keep
	// it cookie-free to avoid pointless network traffic and to improve cacheability.
	unset resp.http.Set-Cookie;
	unset resp.http.X-MediaWiki-Original;

	if (req.http.X-Content-Disposition == "attachment") {
		set resp.http.Content-Disposition = "attachment";
	}

	set resp.http.Access-Control-Allow-Origin = "*";

	// Headers exposed for CORS:
	// - Age, Content-Length, Date, X-Cache, X-Varnish: used by MultimediaViewer
	//   for client-side performance metrics (1cb80099d97ad).
	//
	// - X-Content-Duration: used for OGG audio and video files (7077999966).
	//   Firefox 41 dropped support for this header, but OGV.js still supports it.
	//   See <https://bugzilla.mozilla.org/show_bug.cgi?id=1160695#c27> and
	//   <https://github.com/brion/ogv.js/issues/88>.
	//
	// - Content-Range: indicates total file and actual range returned for RANGE
	//   requests (939b436512). Used by ogv.js to eliminate an extra HEAD request
	//   to get the the total file size.
	set resp.http.Access-Control-Expose-Headers = "Age, Date, Content-Length, Content-Range, X-Content-Duration, X-Cache, X-Varnish";

	// "Timing-Allow-Origin" is part of the Resource Timing specification
	// (https://www.w3.org/TR/resource-timing/). Setting this header allows
	// JavaScript with a different origin to access resource timing info
	// (e9cbfd539edd3). See <https://phabricator.wikimedia.org/T76020>.
	set resp.http.Timing-Allow-Origin = "*";

	// Restrict uploads from loading external resources. (T117618)
	// Currently experimental and testing on test/test2/el.wikipedia.org only.
	if (req.url ~ "^/wikipedia/(el|test)") {
		set resp.http.Content-Security-Policy-Report-Only = "default-src 'none'; style-src 'unsafe-inline' data:; font-src data:; img-src data: https://upload.wikimedia.org/favicon.ico; media-src data:; sandbox; report-uri https://test.wikipedia.org/w/api.php?reportonly=1&source=image&action=cspreport&format=json&";
		set resp.http.X-Content-Security-Policy-Report-Only = resp.http.Content-Security-Policy-Report-Only;
		set resp.http.X-Webkit-CSP-Report-Only = resp.http.Content-Security-Policy-Report-Only;
	}
}

sub cluster_fe_err_synth {
	// Handle CORS preflight requests
	if (<%= @resp_obj %>.status == 667) {
		set <%= @resp_obj %>.status = 200;
		set <%= @resp_obj %>.http.Connection = "keep-alive";
		set <%= @resp_obj %>.http.Content-Length = "0";

		// allow Range requests, used by ogv.js
		set <%= @resp_obj %>.http.Access-Control-Allow-Origin = "*";
		set <%= @resp_obj %>.http.Access-Control-Allow-Headers = "Range";
		set <%= @resp_obj %>.http.Access-Control-Allow-Methods = "GET, HEAD, OPTIONS";
		set <%= @resp_obj %>.http.Access-Control-Max-Age = "86400";

		return (deliver);
	}

	// Homepage redirect to commons
	if (<%= @resp_obj %>.status == 666) {
		set <%= @resp_obj %>.status = 301;
		set <%= @resp_obj %>.http.Location = "https://commons.wikimedia.org/";
		set <%= @resp_obj %>.http.Connection = "keep-alive";
		set <%= @resp_obj %>.http.Content-Length = "0";
		return (deliver);
	}
}
