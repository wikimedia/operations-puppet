// Varnish VCL include file for text backends

include "text-common.inc.vcl";

sub cluster_be_recv_pre_purge {
	if (req.request == "PURGE") {
		call text_normalize_path;
	}
}

<% if @site_tier == "one" -%>
sub cluster_be_recv_applayer_backend {
	if (req.url ~ "^/w/api\.php") {
		if (req.http.X-Wikimedia-Debug == "1") {
			set req.backend = appservers_debug;
		} else {
			set req.backend = api;
		}
	} else if (req.url ~ "^/w/thumb(_handler)?\.php") {
		if (req.http.X-Wikimedia-Debug == "1") {
			set req.backend = appservers_debug;
		} else {
			set req.backend = rendering;
		}
	} else if (req.url ~ "^/api/rest_v1/") {
		set req.backend = restbase_backend;
	} else if (req.http.Host ~ "cxserver" ) { # LEGACY: to be removed eventually
		set req.backend = cxserver_backend;
	} else if (req.http.Host ~ "citoid" ) { # LEGACY: to be removed eventually
		set req.backend = citoid_backend;
	} else if (req.http.Host ~ "restbase|^rest\." ) { # LEGACY: to be removed eventually
		set req.backend = restbase_backend;
	} else {
		// default MW backend
		if (req.http.X-Wikimedia-Debug == "1") {
			set req.backend = appservers_debug;
		} else {
			set req.backend = appservers;
		}
	}

<% if @varnish_directors.include?('security_audit') && !@varnish_directors['security_audit']['backends'].empty? %>
	if (req.http.X-Wikimedia-Security-Audit == "1") {
		set req.backend = security_audit;
	}
<% end %>
}
<% end %> // end site_tier == one

sub cluster_be_recv {
	call text_common_recv;
}

sub cluster_be_hash {
	call text_common_hash;
}

<% if @site_tier == "one" -%>
sub misspass_mangle {
	// BITS: legacy bits.wm.o domain support
	if (req.http.host == "<%= @vcl_config.fetch('bits_domain') %>") {
		// Transform backend url: /<sitename>/load.php -> /w/load.php
		// Set host header for backend to <sitename>
		if (req.url ~ "^/([a-zA-Z0-9-]+\.)?([a-zA-Z0-9-]+\.)?([a-zA-Z0-9-]+)\.<%= Regexp.escape(@vcl_config.fetch('top_domain')) %>/load\.php") {
			set bereq.http.host = regsub(req.url, "^/([^/]+)/(.*)$", "\1");
			set bereq.url = regsub(req.url, "^/([^/]+)/load\.php(.*)?", "/w/load.php\2");
		}
	}
	else {
		// Mobile hostname mangling for MediaWiki
		if (req.http.X-Subdomain) {
			set bereq.http.host = req.http.x-dt-host;
		}

		// RB request mangling
		if (req.url ~ "^/api/rest_v1/") {
			set bereq.url = "/" + req.http.host + regsub(req.url, "^/api/rest_v1/", "/v1/");
		}
	}
}
<% else -%>
sub misspass_mangle { }
<% end -%>

sub cluster_be_hit { }

sub cluster_be_miss {
	call misspass_mangle;
	call text_common_misspass_restore_cookie;
}

sub cluster_be_pass {
	call misspass_mangle;
	call text_common_misspass_restore_cookie;
}

sub cluster_be_fetch {
	// Make sure Set-Cookie responses are not cacheable, and log violations
	// FIXME: exceptions are ugly; maybe get rid of the whole thing?
	if (beresp.ttl > 0s && beresp.http.Set-Cookie &&
		req.url !~ "^/wiki/Special:HideBanners") {
		std.log("Cacheable object with Set-Cookie found. req.url: " + req.url + " Cache-Control: " + beresp.http.Cache-Control + " Set-Cookie: " + beresp.http.Set-Cookie);
		set beresp.http.Cache-Control = "private, max-age=0, s-maxage=0";
		set beresp.ttl = 0s;
		return (hit_for_pass);
	}

	// FIXME: Fix up missing Vary headers on Apache redirects
	if ((beresp.status == 301 || beresp.status == 302)
		&& beresp.http.Location ~ "^http"
		&& beresp.http.Vary !~ "X-Forwarded-Proto") {
		if (beresp.http.Vary) {
			set beresp.http.Vary = beresp.http.Vary + ",X-Forwarded-Proto";
		} else {
			set beresp.http.Vary = "X-Forwarded-Proto";
		}
	}

	call text_common_fetch;

	return (deliver);
}

sub cluster_be_deliver { }
