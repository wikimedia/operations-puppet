// Varnish VCL include file for text backends

include "errorpage.inc.vcl";
include "text-common.inc.vcl";

<% if @vcl_config.fetch("cluster_tier", "1") != "1" -%>
// A random director with the same backends as the default 'backend' (chash) director
<%
default_backend = @vcl_config.fetch("default_backend", "backend")
-%>
director <%= default_backend %>_random random {
	.retries = 5;
<%
	@varnish_directors[default_backend].each do |backend|
		name = /^[0-9\.]+$/.match(backend) ? "ipv4_" + backend.gsub(".", "_") : backend.split(".")[0].gsub("-", "_")
-%>
	{
		.backend = <%= name %>;
		.weight = 10;
	}
<% 	end -%>
}
<% end -%>

sub vcl_recv {
	call vcl_recv_purge;
	call restrict_access;

<% if @vcl_config.fetch("cluster_tier", "1") == "1" -%>
	if (req.url ~ "^/w/api\.php") {
		set req.backend = api;
	} else if (req.url ~ "^/w/thumb(_handler)?\.php") {
		set req.backend = rendering;
	}
	if (req.http.host ~ "^test\.") {
		set req.backend = test_wikipedia;
	}
<% end -%>

	call pass_requests;

	if (req.request == "POST" || req.url ~ "^/wiki/Special:CentralAutoLogin/") {
<% if @vcl_config.fetch("cluster_tier", "1") != "1" -%>
		set req.backend = <%= @vcl_config.fetch("default_backend", "backend") %>_random;
<% end -%>
		set req.hash_ignore_busy = true;
	}

	call evaluate_cookie;

	return (lookup);
}

sub vcl_pass {
	call restore_cookie;
}

sub vcl_miss {
	call restore_cookie;
}

sub vcl_fetch {
	// Make sure Set-Cookie responses are not cacheable, and log violations
	// FIXME: exceptions are ugly; maybe get rid of the whole thing?
	if (beresp.ttl > 0s && beresp.http.Set-Cookie &&
		req.url !~ "^/wiki/Special:HideBanners") {
		std.log("Cacheable object with Set-Cookie found. req.url: " + req.url + " Cache-Control: " + beresp.http.Cache-Control + " Set-Cookie: " + beresp.http.Set-Cookie);
		set beresp.http.Cache-Control = "private, max-age=0, s-maxage=0";
		set beresp.ttl = 0s;
		return (hit_for_pass);
	}

	// FIXME: Fix up missing Vary headers on Apache redirects
	if ((beresp.status == 301 || beresp.status == 302)
		&& beresp.http.Location ~ "^http"
		&& beresp.http.Vary !~ "X-Forwarded-Proto") {
		if (beresp.http.Vary) {
			set beresp.http.Vary = beresp.http.Vary + ",X-Forwarded-Proto";
		} else {
			set beresp.http.Vary = "X-Forwarded-Proto";
		}
	}

	if (beresp.ttl <= 0s) {
		set beresp.ttl = 120s;
		return (hit_for_pass);
	}

	return (deliver);
}

sub vcl_error {
	call errorpage;
	return (deliver);
}
