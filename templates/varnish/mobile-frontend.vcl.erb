# Frontend VCL 3.0 file for <%= fqdn %>, site <%= site %>
# This file is managed by Puppet!

# Backends

# List of Puppet generated backends
<% varnish_backends.each do |backend| -%>
backend <%= backend.split(".")[0] %> {
	.host = "<%= backend %>";
	.port = "81";
	.connect_timeout = 5s;
	.first_byte_timeout = 35s;
	.between_bytes_timeout = 2s;
	.probe = {
		.request =
			"GET /w/load.php HTTP/1.1"
			"Host: en.wikipedia.org"
			"User-agent: Varnish backend check"
			"Connection: close";
		.timeout = 5s;
	}
}

<% end -%>

# Directors
<%# Expected format: { "director name" => [ "backend1", "backend2" ] } -%>
<% varnish_directors.keys.each do |director| -%>
director backend hash {
	.retries = 2;
<% varnish_directors[director].each do |backend| -%>
	{
		.backend = <%= backend.split(".")[0] %>;
		.weight = 10;
	}
<% end -%>
}
<% end -%>

# Subroutines

sub device_detection { 

	set req.http.X-Device = "html";

	if (req.http.User-Agent ~ "WebKit"){
		set req.http.X-Device = "webkit";
	}
	if (req.http.User-Agent ~ "Android"){
		set req.http.X-Device = "android";
	}
	if (req.http.User-Agent ~ "iPhone"){
		set req.http.X-Device = "iphone";
	}
	if (req.http.User-Agent ~ "iPhone OS 2"){
		set req.http.X-Device = "iphone2";
	}
	if (req.http.User-Agent ~ "Series60"){
		set req.http.X-Device = "nokia";
	}
	if (req.http.User-Agent ~ "webOS"){
		set req.http.X-Device = "palm_pre";
	}
	if (req.http.User-Agent ~ "Opera"){
		set req.http.X-Device = "webkit";
	}
	if (req.http.User-Agent ~ "Opera Mini"){
		set req.http.X-Device = "operamini";
	}
	if (req.http.User-Agent ~ "Opera Mobi"){
		set req.http.X-Device = "iphone";
	}
	if (req.http.User-Agent ~ "Kindle/1.0"){
		set req.http.X-Device = "kindle";
	}
	if (req.http.User-Agent ~ "Kindle/2.0"){
		set req.http.X-Device = "kindle2";
	}
	if (req.http.User-Agent ~ "Firefox"){
		set req.http.X-Device = "capable";
	}
	if (req.http.User-Agent ~ "NetFront"){
		set req.http.X-Device = "netfront";
	}
	if (req.http.User-Agent ~ "SEMC-Browser"){
		set req.http.X-Device = "wap2";
	}
	if (req.http.User-Agent ~ "PlayStation Portable"){
		set req.http.X-Device = "psp";
	}
	if (req.http.User-Agent ~ "PLAYSTATION 3"){
		set req.http.X-Device = "ps3";
	}
	if (req.http.User-Agent ~ "BlackBerry"){
		set req.http.X-Device = "blackberry";
	}
	if (req.http.X-Device == "html") {
		if (req.http.Accept ~ "vnd.wap.wml"){
			set req.http.X-Device = "wml";
		}
	}
}

sub vcl_hash {
	if (req.http.host) {
		hash_data(req.url + req.http.host);
	} else {
		hash_data(req.url);
	}
}

acl purge { 
	"localhost";
}

sub vcl_deliver {
	if (obj.hits > 0) {
		set resp.http.X-Cache-Fe = "hit";
	} else {
		set resp.http.X-Cache-Fe = "miss";
	}
}

sub vcl_recv {
	if (req.request != "GET" && req.request != "HEAD" && req.request != "PURGE" && req.request != "OPTION") {
		/* We only deal with GET and HEAD by default */
		error 403 "HTTP method not allowed.";
	}

	if (req.request == "PURGE") { 
		if (!client.ip ~ purge) {
			error 405 "Not allowed.";
		}
	}

	if ( req.http.host ~ "^([a-zA-Z0-9-]+)\.m\.([a-zA-Z0-9-]+)\.org" ) {
		set req.http.host = regsub( req.http.host, "^([a-zA-Z0-9-]+)\.m\.([a-zA-Z0-9-]+)\.org", "\1.\2.org");
		if ( req.url ~ "^/wiki/" ) { 
			unset req.http.Cookie;
		}
	}

	if ( req.http.host == "m.wikipedia.org" ) {
		error 666 "http://en.m.wikipedia.org/";
	}

	if ( req.url == "/" ) { 
		set req.url = "/?useformat=mobile";
	}

	# For now this is set on the RoR mobile
	set req.http.X-Forwarded-For = client.ip;

	call device_detection;

	set req.backend = backend;
	return (lookup);
}

sub vcl_fetch {
	set beresp.http.X-Device = req.http.X-Device;
}

sub vcl_deliver {                                                                                                                                                                         
	set resp.http.Cache-Control = "private, s-maxage=0, max-age=0, must-revalidate";                                                                                                  
}                                                                                                                                                                                         

sub vcl_hit {
	if (req.request == "PURGE") {
		purge;
		error 200 "Purged.";
	}
}

sub vcl_miss {
	if (req.request == "PURGE") {
		purge;
		error 200 "Purged.";
	}
}


sub vcl_error {

	if (obj.status == 666) {
		set obj.http.Location = obj.response;
		set obj.status = 302;
		return(deliver);
	}
	
	set obj.http.Content-Type = "text/html; charset=utf-8";
	synthetic {"
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
  <head>
    <title>"} + obj.status + " " + obj.response + {"</title>
  </head>
  <body>
    <h1>Error "} + obj.status + " " + obj.response + {"</h1>
    <p>"} + obj.response + {"</p>
    <h3>Guru Meditation:</h3>
    <p>XID: "} + req.xid + {"</p>
    <hr>
    <address>
       <a href="http://www.varnish-cache.org/">Varnish cache server</a>
    </address>
  </body>
</html>
"};
}
