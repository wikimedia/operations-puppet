/*****************************************************************************
 * Varnish VCL for WMF-Last-Access Cookie
 * Please see what this cookie is trying to acomplish:
 * https://wikitech.wikimedia.org/wiki/Analytics/Unique_clients/Last_visit_solution
 *
 * General notes on timestamp format strings used here:
 * "now" stringifies as "Wed, 01 Jan 2000 01:01:01 GMT", which is the same
 * format used by Set-Cookie "Expires" data.  The format for the last access
 * value, and thus X-NowDay and X-WMF-LastStamp as well, is "01-Jan-2000"
 * (because the other info is redundant or too-specific, and cookie values
 * shouldn't have whitespace or commas).
 ****************************************************************************/

/*****************************************************************************
 * This must be called *before* any vcl_recv cookie munging.  It more-properly
 * belongs in _deliver, but putting it here avoids all of the issues
 * surrounding consistent access to Cookie vs X-Orig-Cookie at vcl_deliver
 * time in the text/mobile cases.
 * It does so at the cost of sending a pointless and unintended
 * "X-WMF-LastStamp: 01-Jan-2000" header to the application layer as well on
 * cache miss/bypass.
 * Note we don't validate that the cookie's 3-letter month abbreviation is
 * legal, or that the numeric values for the date/year are legal, just that
 * they have the right count of the right kinds of characters.
 ****************************************************************************/
sub analytics_last_access_recv {
    unset req.http.X-WMF-LastStamp; // clear any sent by the user
    if (req.http.Cookie ~ "(^|;\s*)WMF-Last-Access=[0-9]{2}-[A-Za-z]{3}-[0-9]{4}(;|$)") {
        // Save the value for use later in _deliver
        set req.http.X-WMF-LastStamp = regsub(
            req.http.Cookie,
            "^(?:.*;\s*)?WMF-Last-Access=([^;]+).*$",
            "\1"
        );
    }
}

/*****************************************************************************
 * !!! private to analytics_last_access_deliver !!!!
 * This should be:
 *     header.append(resp.http.Set-Cookie,
 *         "WMF-Last-Access="
 *         + req.http.X-NowDay
 *         + ";Path=/;HttpOnly;Expires="
 *         + (now + 32d)
 *     );
 * However, varnish3 is buggy wrt str + (time + duration), so we're forced to
 * drop to inline C a bit here and do what the VCL compiler should have done
 * for us above.  On top of all that, the C code now floors the expiry to the
 * next-lower 12 hour mark, which would've been a bit trickier in VCL...
 ****************************************************************************/
C{#include <time.h>}C
sub set_last_access_cookie__ { C{
    Vmod_Func_header.append(sp, HDR_RESP, "\013Set-Cookie:",
        "WMF-Last-Access=",
        VRT_GetHdr(sp, HDR_REQ, "\011X-NowDay:"),
        ";Path=/;HttpOnly;Expires=",
        VRT_time_string(sp, (double)(
            ((time_t)VRT_r_now(sp) + 2764800) / 43200 * 43200
        )),
        vrt_magic_string_end
    );
}C }

// Call from vcl_deliver near other X-Analytics code
sub analytics_last_access_deliver {
    // Create X-NowDay in "01-Jan-2000" form, from "now"
    set req.http.X-NowDay = regsub(
        now, "^..., (..) (...) (....) .*$", "\1-\2-\3"
    );

    if(req.http.X-WMF-LastStamp) {
        set resp.http.X-Analytics = resp.http.X-Analytics
            + ";WMF-Last-Access="
            + req.http.X-WMF-LastStamp;

        // re-set the cookie if it's not from today
        if (req.http.X-NowDay != req.http.X-WMF-LastStamp) {
            call set_last_access_cookie__;
        }

    }
    else {
        // sets the initial cookie if no valid one existed
        call set_last_access_cookie__;
    }

    // we could clean up req.http.X-WMF-LastStamp + req.http.X-NowDay
    // here, but they're not being sent anywhere (else) at this point
    // anyways, so why bother?
}

// Analytics for analytics "wprov" Provenance data
// See https://www.mediawiki.org/wiki/Provenance for reserved values.

sub analytics_provenance_recv {
    // Avoid cache fragmentation for well-formed provenance parameters
    // Refer to discussion starting from
    // https://lists.wikimedia.org/pipermail/analytics/2015-February/003426.html
    // Look for wprov parameter with a value
    if (req.url ~ "(?i)[?&]wprov=[^&]+") {
        // Ready a variable for later X-Analytics tagging in vcl_deliver.

        // Grab just the value of the wprov parameter, excluding the rest of the URL
        set req.http.X-WMF-WPROV = regsub(req.url, "(?i).+[?&]wprov=([^&]+).*", "\1");

        // Remove the wprov=X parameter from req.url to avoid cache
        // fragmentation using two regexes to cover distinct cases:

        // (1) Simple strip if final query arg:
        set req.url = regsub(req.url, "(?i)[?&]wprov=[^&]+$", "");

        // (2) When not the final arg, we need to capture the leading
        //     [?&] to reuse with the parameter that follows:
        set req.url = regsub(req.url, "(?i)([?&])wprov=[^&]+&", "\1");
    }
}

sub analytics_provenance_deliver {
    // In case there was a provenance parameter with a value, add it to X-Analytics
    if (req.http.X-WMF-WPROV) {
        set resp.http.X-Analytics = resp.http.X-Analytics + ";wprov=" + req.http.X-WMF-WPROV;
    }
}

// Combined analytics recv and deliver hooks, to be included directly in vcl_recv and vcl_deliver
sub analytics_recv {
    call analytics_last_access_recv;
    call analytics_provenance_recv;
}

sub analytics_deliver {
    // Create empty header if none, to avoid tons of if/else clauses; will
    // clean up at the end.  Note that if we defined one of the k=v pairs as
    // required (having a real value for the false/negative case), we could
    // set that one first and this would get a bit cleaner...
    if (!resp.http.X-Analytics) {
        resp.http.X-Analytics = "";
    }

    call analytics_last_access_deliver;
    call analytics_provenance_deliver;

    if (req.http.X-Carrier) {
        set resp.http.X-Analytics = resp.http.X-Analytics + ";zero=" + req.http.X-Carrier;
        if (req.http.X-Carrier-Meta) {
            set resp.http.X-Analytics = resp.http.X-Analytics + ";zeronet=" + req.http.X-Carrier-Meta;
        }
    }

    if (req.http.X-Trusted-Proxy) {
        set resp.http.X-Analytics = resp.http.X-Analytics + ";proxy=" + req.http.X-Trusted-Proxy;
    }

    if (req.http.X-Forwarded-Proto) {
        set resp.http.X-Analytics = resp.http.X-Analytics + ";https=1";
    }

    if (req.http.X-WMF-UUID) {
        set resp.http.X-Analytics = resp.http.X-Analytics + ";wmfuuid=" + req.http.X-WMF-UUID;
    }

    // Add proxy=IORG X-Analytics tag if appropriate.
    // Although Via: Internet.org usually comes via proxying, it isn't guaranteed to come that way.
    // Nonetheless, as it is tagged with Via and the equipment is under Internet.org, we proxy tag.
    // Note, Internet.org is believed to apply to all Wikimedia sites, so this code should run not
    // just for (m|zero).wikipedia.org and subdomains. Hence the inclusion of this file by both
    // mobile-frontend.inc.vcl.erb and text-frontend.inc.vcl.erb, as opposed to a one-off in
    // zero.inc.vcl.erb alone. See the notes at the top of mobile-frontend.inc.vcl.erb and
    // text-frontend.inc.vcl.erb for more context.
    if (req.http.Via ~ "(?i)Internet\.org") {
        set resp.http.X-Analytics = resp.http.X-Analytics + ";proxy=IORG";
    }

    // Clean up header from setting to empty at the start...
    if (resp.http.X-Analytics == "") {
        unset resp.http.X-Analytics;
    } else {
        set resp.http.X-Analytics = regsub(resp.http.X-Analytics, "^;", "");
    }
}
