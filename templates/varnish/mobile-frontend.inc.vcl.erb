# Varnish VCL include file for mobile frontends

include "errorpage.inc.vcl";
include "device-detection.inc.vcl";
include "zero.inc.vcl";

sub filter_noise {
	if (req.request == "POST" && req.url ~ "index\.php\?option=com_jce&task=plugin&plugin=imgmanager&file=imgmanager&method=form&cid=") {
		error 403 "Noise";
	}
}

sub vcl_recv {
	call filter_noise;

	/* FIXME: we're seeing an issue with Range requests and gzip/gunzip.
	 * Disable Range requests for now.
	 */
	unset req.http.Range;

	// Only do tag_carrier logic on first start, and only for (m|zero).wp
	if (req.restarts == 0) {
		// Always set X-Subdomain
		if (req.http.host ~ "^([a-zA-Z0-9-]+\.)?zero\.") {
			set req.http.X-Subdomain = "ZERO";
		} else {
			set req.http.X-Subdomain = "M";
		}
	
		if (req.http.host ~ "^([a-zA-Z0-9-]+\.)?(m|zero)\.wikipedia\.") {
			call tag_carrier;
		}
	}

	/* Assemble X-Analytics header */
	if (req.http.X-CS) {
		set req.http.X-Analytics = "zero=" + req.http.X-CS;
	}

	/* Rewrite m.mediawiki.org to mediawiki.org etc */
	if (req.http.host == "m.mediawiki.org") {
		set req.http.host = "www.mediawiki.org";
	} else if (req.http.host == "m.wikimediafoundation.org") {
		set req.http.host = "wikimediafoundation.org";
	} else {

		/* Replace <language>.(m|zero).<project>.org by <language>.<project>.org */
		set req.http.host = regsub(req.http.host, "^([a-zA-Z0-9-]+)\.(m|zero)\.", "\1.");

		/* Rewrite <language>.wap.wikipedia.org to new mobile site */
		set req.http.host = regsub(req.http.host, "^([a-zA-Z0-9-]+)\.wap\.", "\1.mobile.");

		/* Support the old mobile.wikipedia.org wap gateway */
		if (req.http.host ~ "^([a-zA-Z0-9-]+)\.mobile\.([a-zA-Z0-9-]+)\.org$") {
			set req.http.host = regsub(req.http.host, "^([a-zA-Z0-9-]+)\.mobile\.", "\1.");
			set req.url = regsub(req.url, "\S+[\?&]go=([^&]+).*", "/wiki/\1");
		}
	}

	/* Allow purging */
	call vcl_recv_purge;

	call rewrite_proxy_urls;

	/* FIXME: deploy X-Vary-Options support */
	set req.http.X-Orig-Cookie = req.http.Cookie;
	if( req.http.Cookie ~ "disable" ||
		req.http.Cookie ~ "optin" ||
		req.http.Cookie ~ "[Ss]ession" ||
		req.http.Cookie ~ "forceHTTPS" ) {
		/* Do nothing; these are the cookies we pass.
		 * this is a hack in the absence of X-V-O support
		 */
	} else {
		unset req.http.Cookie;
	}

	call device_detection;

	if ( req.http.host ~ "^test\." ) {
		return (pass);
	}

	set req.hash_ignore_busy = true;

	unset req.http.Surrogate-Capability;
<% if cluster_options.fetch( "enable_esi", false ) -%>
	if (req.http.X-CS == "-TEST") {
		set req.http.Surrogate-Capability = "frontend=ESI/1.0";
	}
<% end -%>

	/* Default (now modified) Varnish vcl_recv function */
	if (req.request != "GET" && req.request != "HEAD") {
		/* We only deal with GET and HEAD by default */
		return (pass);
	}
	if (req.http.Authorization || req.http.Cookie) {
		/* Not cacheable by default */
		return (pass);
	}
	return (lookup);
}

sub vcl_fetch {
<% if cluster_options.fetch( "enable_esi", false ) -%>
	if (beresp.http.Surrogate-Control ~ "ESI/1.0") {
		set beresp.do_esi = true;
	}
<% end -%>
	unset beresp.http.Surrogate-Control;

	if (req.url ~ "mobileaction=" || req.url ~ "useformat=") {
		set beresp.ttl = 60 s;
	}

/*
	if (beresp.ttl <= 0s) {
		set beresp.ttl = 120s;
		return (hit_for_pass);
	}
*/
	return (deliver);
}

sub vcl_error {
	/* Support mobile redirects */
	if (obj.status == 666) {
		set obj.http.Location = obj.response;
		set obj.status = 302;
		set obj.http.Connection = "keep-alive";
		return(deliver);
	}

	call errorpage;
	return(deliver);
}

sub vcl_deliver {
#	unset resp.http.Enable-ESI;

	// All mobile responses need to have the X-CS set if it came from a zero network.
	// This allows apps to detect when we switch from zero to non-zero and back,
	// or when the user switches from one network to another and both are zero (multi-sim phones).
	// The client should constantly check each response for this header, and if it changes,
	// re-request the partner's message info.
	// This value is only based on Varnish's zero detection, not the backend processing of any sort
	// We are in vcl_deliver, so changing it here would not affect the cached object
	if (req.http.X-CS) {
		set resp.http.X-CS = req.http.X-CS;
	} else {
		unset resp.http.X-CS;
	}

	if (resp.http.X-Analytics) {
		# do nothing, MediaWiki has handled X-Analytics
	} else if (req.http.X-Analytics) {
		set resp.http.X-Analytics = req.http.X-Analytics;
	}

	if (resp.http.Cache-Control ~ "s-maxage=[1-9]") {
		set resp.http.Cache-Control = "s-maxage=300, must-revalidate, max-age=0";
	} else {
		set resp.http.Cache-Control = "private, s-maxage=0, max-age=0, must-revalidate";
	}

	/* Temp test */
	if (req.url == "/favicon.ico" || req.url ~ "^/apple-touch-icon(-precomposed)?\.png$" || req.url ~ "^/w/index\.php\?title=.*:Gadget-.*&[0-9]+$") {
		set resp.http.Cache-Control = "s-maxage=3600, max-age=3600";
	}
}

