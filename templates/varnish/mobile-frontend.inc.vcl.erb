// Varnish VCL include file for mobile frontends

include "errorpage.inc.vcl";
include "text-common.inc.vcl";
include "zero.inc.vcl";
include "provenance.inc.vcl";
include "via.inc.vcl";
include "last-access.inc.vcl";

// Note that via.inc.vcl will set an X-Analytics value of proxy=IORG
// without inspecting whether there's an existing proxy=<proxy> key-
// value pair inside X-Analytics. We do this because if the traffic
// had come from a known proxy (e.g., Opera or Nokia), that would
// imply that Internet.org was not the rightmost endpoint. In time
// we will need to add the notion of proxy chaining to record whether
// something came through both a known proxy and had Via: Internet.org
// with a corresponding unknown rightmost endpoint (the rightmost
// Internet.org endpoint with an unpredictable Internet-facing IP
// address) in X-Forwarded-For, even if it's the only value, as in
// the example of traffic sourced directly by satellite or something.

sub vcl_recv {
	call filter_headers;
	call filter_noise;

	// FIXME: we're seeing an issue with Range requests and gzip/gunzip.
	// Disable Range requests for now.
	unset req.http.Range;

	// Only do tag_carrier logic on first start, and only for (m|zero).wp
	if (req.restarts == 0) {
		// Always set X-Subdomain
		if (req.http.host ~ "^([a-zA-Z0-9-]+\.)?zero\.") {
			set req.http.X-Subdomain = "ZERO";
		} else {
			set req.http.X-Subdomain = "M";
		}

		if (req.http.host ~ "^([a-zA-Z0-9-]+\.)?(m|zero)\.wikipedia\.") {
			call tag_carrier;
		}
	}

	// Rewrite m.mediawiki.org to mediawiki.org etc
	if (req.http.host == "m.mediawiki.org") {
		set req.http.host = "www.mediawiki.org";
	} else if (req.http.host == "m.wikimediafoundation.org") {
		set req.http.host = "wikimediafoundation.org";
	} else if (req.http.host == "m.wikisource.org") {
		set req.http.host = "wikisource.org";
	} else {
		// Replace <language>.(m|zero).<project>.org by <language>.<project>.org
		set req.http.host = regsub(req.http.host, "^([a-zA-Z0-9-]+)\.(m|zero)\.", "\1.");
	}

	// Allow purging
	call vcl_recv_purge;

	// BITS: legacy bits.wm.o domain support
	if (req.http.host == "<%= @vcl_config.fetch('bits_domain') %>") {
		if (req.url ~ "^/event\.gif") {
			error 204;
		}
		return (lookup);
	}

	// Don't decode percent-encoded slashes in paths for REST APIs
	if (req.url !~ "^/api/rest_v1/") {
		call normalize_path;
	}

	# normalize all /static to the same hostname for caching
	if (req.url ~ "^/static/") { set req.http.host = "<%= @vcl_config.fetch("static_host") %>"; }

	if (req.http.host ~ "^test\.") {
		set req.http.X-Wikimedia-Debug = "1";
	}

	if (req.url ~ "^/wiki/Special:CentralAutoLogin/") {
		set req.backend = backend_random;
		set req.hash_ignore_busy = true;
	} else if (req.url ~ "^/api/rest_v1/") {
		set req.backend = backend_random;
	}

	if (req.request != "GET" && req.request != "HEAD") {
		return (pass);
	}

	// Users that just logged out, should not get a 304 for their
	// (locally cached) logged in pages.
	if (req.http.If-Modified-Since && req.http.Cookie ~ "LoggedOut") {
		unset req.http.If-Modified-Since;
	}

	call analytics_last_access_recv;
	call evaluate_cookie_mobile;
	call pass_authorization;
	return (lookup);
}

sub vcl_pass {
	call restore_cookie;
}

sub vcl_miss {
	call restore_cookie;
}

sub vcl_fetch {
	if (req.url ~ "mobileaction=" || req.url ~ "useformat=") {
		set beresp.ttl = 60 s;
	}

	if (beresp.ttl <= 0s || req.http.X-Wikimedia-Debug == "1" || req.http.X-Wikimedia-Security-Audit == "1") {
		set beresp.ttl = 120s;
		return (hit_for_pass);
	}

	return (deliver);
}

sub vcl_error {
	// BITS: legacy bits.wm.o domain support
	if (req.http.host == "<%= @vcl_config.fetch('bits_domain') %>") {
		if (obj.status == 204) {
			set obj.http.Connection = "keep-alive";
			return (deliver);
		}
	}

	call errorpage;
	return (deliver);
}

sub vcl_deliver {
	// Strip s-maxage Cache-Control of wiki pages. The s-maxage still applies to Varnish (sent
	// by MediaWiki $wgUseSquid, sends purges internally). But pages musn't be cached elsewhere.
	// NOTE: Only apply to pages. Don't steal cachability of api.php, load.php, etc. (T102898, T113007)
	if ((req.url ~ "^/wiki/" || req.url ~ "^/w/index\.php") && resp.http.Cache-Control ~ "s-maxage=[1-9]") {
		set resp.http.Cache-Control = "private, s-maxage=0, max-age=0, must-revalidate";
	}

<% if @vcl_config.fetch("enable_geoiplookup", false) -%>
	// Perform GeoIP look-up and send the result as a session cookie
	if (req.http.X-Orig-Cookie !~ "(^|;\s*)GeoIP=[^;]"
		&& req.http.Cookie !~ "(^|;\s*)GeoIP=[^;]") {
		call geoip_cookie;
	}
<% end -%>

	// Assemble X-Analytics header
	// Some of the headers used for X-Analytics are not varied on, so add them after the backend processing
	// Note that vcl_deliver in other files may also modify X-Analytics.
	if (req.http.X-Forwarded-Proto) {
		if (resp.http.X-Analytics) {
			set resp.http.X-Analytics = resp.http.X-Analytics + ";https=1";
		} else {
			set resp.http.X-Analytics = "https=1";
		}
	}

	if (req.http.X-WMF-UUID) {
		if (resp.http.X-Analytics) {
			set resp.http.X-Analytics = resp.http.X-Analytics + ";wmfuuid=" + req.http.X-WMF-UUID;
		} else {
			set resp.http.X-Analytics = "wmfuuid=" + req.http.X-WMF-UUID;
		}
	}

	call analytics_last_access_deliver;
}
