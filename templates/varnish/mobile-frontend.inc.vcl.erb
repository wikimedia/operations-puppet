# Varnish VCL include file for mobile frontends

C{
#include <netinet/in.h>
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h>
}C

acl wmf_office {
	"216.38.130.160"/29;
}

acl carrier_digi {
	"203.92.128.185";
	"115.164.0.0"/16;
	"116.197.0.0"/17;
}


sub tag_carrier {
	/* For wiki zero project - tags partnered carriers */
	if (client.ip ~ wmf_office) {
		set req.http.X-Carrier = "wikimedia";
	} else if (client.ip ~ carrier_digi) {
		if ( req.http.User-Agent ~ "Opera" ) {
			set req.http.X-Carrier = "DIGI";
		}
	}
	/* once actuall in prod, ensure users can't make requests
	with a fake X-Carrier header */
	/* else {
		unset req.http.X-Carrier;
	} */
}

sub device_detection {

	set req.http.X-Device = "html";

	if (req.http.User-Agent ~ "WebKit"){
		set req.http.X-Device = "webkit";
	}
	if (req.http.User-Agent ~ "Android"){
		set req.http.X-Device = "android";
	}
	if (req.http.User-Agent ~ "iPhone"){
		set req.http.X-Device = "iphone";
	}
	if (req.http.User-Agent ~ "iPhone OS 2"){
		set req.http.X-Device = "iphone2";
	}
	if (req.http.User-Agent ~ "Series60"){
		set req.http.X-Device = "nokia";
	}
	if (req.http.User-Agent ~ "webOS"){
		set req.http.X-Device = "palm_pre";
	}
	if (req.http.User-Agent ~ "Opera"){
		set req.http.X-Device = "webkit";
	}
	if (req.http.User-Agent ~ "Opera Mini"){
		set req.http.X-Device = "operamini";
	}
	if (req.http.User-Agent ~ "Opera Mobi"){
		set req.http.X-Device = "iphone";
	}
	if (req.http.User-Agent ~ "Kindle/1.0"){
		set req.http.X-Device = "kindle";
	}
	if (req.http.User-Agent ~ "Kindle/2.0"){
		set req.http.X-Device = "kindle2";
	}
	if (req.http.User-Agent ~ "Firefox"){
		set req.http.X-Device = "capable";
	}
	if (req.http.User-Agent ~ "NetFront"){
		set req.http.X-Device = "netfront";
	}
	if (req.http.User-Agent ~ "SEMC-Browser"){
		set req.http.X-Device = "wap2";
	}
	if (req.http.User-Agent ~ "PlayStation Portable"){
		set req.http.X-Device = "psp";
	}
	if (req.http.User-Agent ~ "PLAYSTATION 3"){
		set req.http.X-Device = "ps3";
	}
	if (req.http.User-Agent ~ "BlackBerry"){
		set req.http.X-Device = "blackberry";
	}
	if (req.http.X-Device == "html") {
		if (req.http.Accept ~ "vnd.wap.wml"){
			set req.http.X-Device = "wml";
		}
	}
}


sub vcl_recv {
	/* Replace <language>.m.<project>.org by <language>.<project>.org */
	if ( req.http.host ~ "^([a-zA-Z0-9-]+)\.m\.([a-zA-Z0-9-]+)\.org" ) {
		set req.http.host = regsub( req.http.host, "^([a-zA-Z0-9-]+)\.m\.([a-zA-Z0-9-]+)\.org", "\1.\2.org");
	}

	/* Replace <language>.zero.<project>.org by <language>.<project>.org and set X-Carrier */
	else if ( req.http.host ~ "^([a-zA-Z0-9-]+)\.zero\.([a-zA-Z0-9-]+)\.org" ) {
		set req.http.host = regsub( req.http.host, "^([a-zA-Z0-9-]+)\.zero\.([a-zA-Z0-9-]+)\.org", "\1.\2.org");

		if ( req.http.User-Agent ~ "Opera" ) {
			C{
			struct sockaddr_storage *client_ip_ss = VRT_r_client_ip(sp);
			struct sockaddr_in *client_ip_si = (struct sockaddr_in *) client_ip_ss;
			struct in_addr *client_ip_ia = &(client_ip_si->sin_addr);
			char *xff_ip = VRT_GetHdr(sp, HDR_REQ, "\020X-Forwarded-For:");

			if (xff_ip != NULL) {
				inet_pton(AF_INET, xff_ip, client_ip_ia);
			}
			}C

			set req.http.X-CLIENT-IP = client.ip;
			set req.http.X-MAYBE = req.http.rlnclientipaddr;
		}

		call tag_carrier;

	}

	/* Rewrite <language>.wap.wikipedia.org to new mobile site */
	else if ( req.http.host ~ "^([a-zA-Z0-9-]+)\.wap\.([a-zA-Z0-9-]+)\.org" ) {
		set req.http.host = regsub( req.http.host, "^([a-zA-Z0-9-]+)\.wap\.([a-zA-Z0-9-]+)\.org", "\1.mobile.\2.org");
	}

	/* Support the old mobile.wikipedia.org wap gateway */
	else if ( req.http.host ~ "^([a-zA-Z0-9-]+)\.mobile\.([a-zA-Z0-9-]+)\.org" ) {
		set req.http.host = regsub( req.http.host, "^([a-zA-Z0-9-]+)\.mobile\.([a-zA-Z0-9-]+)\.org", "\1.\2.org" );
		set req.url = regsub( req.url, "\S+[\?&]go=([^&]+).*", "/wiki/\1" );
	}

	/* FIXME: deploy X-Vary-Options support */
	set req.http.X-Orig-Cookie = req.http.Cookie;
	if(req.http.Cookie ~ "disable" || req.http.Cookie ~ "optin") {
		/* Do nothing; these are the cookies we pass.
		 * this is a hack in the absence of X-V-O support
		 */
	} else {
		unset req.http.Cookie;
	}
	
	if ( req.http.host == "m.wikipedia.org" ) {
		error 666 "http://en.m.wikipedia.org" + req.url;
	}
	else if ( req.http.host == "mobile.wikipedia.org" ) {
		error 666 "http://en.mobile.wikipedia.org" + req.url;
	}
	
	if ( req.url == "/" ) { 
		set req.url = "/?useformat=mobile";
	}

	call device_detection;
}

sub vcl_fetch {
	set beresp.http.X-Device = req.http.X-Device;
	if (req.url ~ "mobileaction=" || req.url ~ "useformat=") {
		set beresp.ttl = 60 s;
	}
}

sub vcl_error {
	/* Support mobile redirects */
	if (obj.status == 666) {
		set obj.http.Location = obj.response;
		set obj.status = 302;
		return(deliver);
	}
}
