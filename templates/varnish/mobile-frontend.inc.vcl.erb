# Varnish VCL include file for mobile frontends

include "errorpage.inc.vcl";
include "device-detection.inc.vcl";
include "zero.inc.vcl";

sub vcl_recv {
	if (!req.http.X-Forwarded-Proto) {
		call spoof_clientip;

		/* This call will always set the following req.http values:
			X-Subdomain = M or ZERO
			X-DfltLang = en|fr|ru|...
		  This value is only set if the carrier has been successfully detected
			X-CS = "502-13"
		*/
		call tag_carrier;

		/* Assemble X-Analytics header */
		if (req.http.X-CS) {
			set req.http.X-Analytics = "zero=" + req.http.X-CS;
		}
	} else {
		set req.X-Subdomain = "M";
	}

	/* Replace <language>.(m|zero).<project>.org by <language>.<project>.org */
	set req.http.host = regsub(req.http.host, "^([a-zA-Z0-9-]+)\.(m|zero)\.", "\1.");

	/* Rewrite <language>.wap.wikipedia.org to new mobile site */
	set req.http.host = regsub(req.http.host, "^([a-zA-Z0-9-]+)\.wap\.", "\1.mobile.");

	/* Rewrite m.mediawiki.org to mediawiki.org etc */
	if (req.http.host == "m.mediawiki.org") {
		set req.http.host = "www.mediawiki.org";
	}
	if (req.http.host == "m.wikimediafoundation.org") {
		set req.http.host = "wikimediafoundation.org";
	}

	/* Support the old mobile.wikipedia.org wap gateway */
	if (req.http.host ~ "^([a-zA-Z0-9-]+)\.mobile\.([a-zA-Z0-9-]+)\.org$") {
		set req.http.host = regsub(req.http.host, "^([a-zA-Z0-9-]+)\.mobile\.", "\1.");
		set req.url = regsub(req.url, "\S+[\?&]go=([^&]+).*", "/wiki/\1");
	}

	/* Allow purging */
	call vcl_recv_purge;

	call rewrite_proxy_urls;

	/* FIXME: deploy X-Vary-Options support */
	set req.http.X-Orig-Cookie = req.http.Cookie;
	if( req.http.Cookie ~ "disable" ||
		req.http.Cookie ~ "optin" ||
		req.http.Cookie ~ "session" ||
		req.http.Cookie ~ "forceHTTPS" ) {
		/* Do nothing; these are the cookies we pass.
		 * this is a hack in the absence of X-V-O support
		 */
	} else {
		unset req.http.Cookie;
	}

	if (req.http.host == "m.wikipedia.org") {
		if (req.http.X-CS) {
			// Carrier detected
			error 666 "http://" + req.http.X-DfltLang + ".m.wikipedia.org" + req.http.X-DfltPage;
		} else {
			// Regular m.* request, unknown carrier, navigate to english page with the same URL
			error 666 "http://en.m.wikipedia.org" + req.url;
		}
	} else if (req.http.host == "zero.wikipedia.org") {
		// All ZERO requests should go to the Special:ZeroRatedMobileAccess, even for unknown carrier
		error 666 "http://" + req.http.X-DfltLang + ".zero.wikipedia.org" + req.http.X-DfltPage;
	} else if (req.http.host == "mobile.wikipedia.org") {
		error 666 "http://en.mobile.wikipedia.org" + req.url;
	}

	// Don't need to redirect, unset default language
	unset req.http.X-DfltLang;
	unset req.http.X-DfltPage;

	call device_detection;

	if ( req.http.host ~ "^test\." ) {
		return (pass);
	}

	set req.hash_ignore_busy = true;

	/* Default (now modified) Varnish vcl_recv function */
	if (req.request != "GET" && req.request != "HEAD") {
		/* We only deal with GET and HEAD by default */
		return (pass);
	}
	if (req.http.Authorization || req.http.Cookie) {
		/* Not cacheable by default */
		return (pass);
	}
	return (lookup);
}

sub vcl_fetch {
	set beresp.http.X-Device = req.http.X-Device;
	set beresp.http.X-CS = req.http.X-CS;
	if ( beresp.http.X-Analytics ) {
		# Do nothing, X-Analytics has already been handled
	} else if ( req.http.X-Analytics ) {
		set beresp.http.X-Analytics = req.http.X-Analytics;
	}
	if (req.url ~ "mobileaction=" || req.url ~ "useformat=") {
		set beresp.ttl = 60 s;
	}

/*
	if (beresp.ttl <= 0s) {
		set beresp.ttl = 120s;
		return (hit_for_pass);
	}
*/
	return (deliver);
}

sub vcl_error {
	// At this point we no longer need the default language.
	unset req.http.X-DfltLang;
	unset req.http.X-DfltPage;

	/* Support mobile redirects */
	if (obj.status == 666) {
		set obj.http.Location = obj.response;
		set obj.status = 302;
		set obj.http.Connection = "keep-alive";
		return(deliver);
	}

	call errorpage;
	return(deliver);
}

sub vcl_deliver {
	if (resp.http.Cache-Control ~ "s-maxage=[1-9]") {
		set resp.http.Cache-Control = "s-maxage=300, must-revalidate, max-age=0";
	} else {
		set resp.http.Cache-Control = "private, s-maxage=0, max-age=0, must-revalidate";
	}

	/* Temp test */
	if (req.url == "/favicon.ico" || req.url ~ "^/apple-touch-icon(-precomposed)?\.png$" || req.url ~ "^/w/index\.php\?title=.*:Gadget-.*&[0-9]+$") {
		set resp.http.Cache-Control = "s-maxage=3600, max-age=3600";
	}
}

