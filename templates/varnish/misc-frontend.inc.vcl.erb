include "misc-common.inc.vcl";

sub cluster_fe_recv_pre_purge { }

sub cluster_fe_recv {
    if (req.http.Host == "yarn.wikimedia.org") {
        // Disabling this as it exposes the YARN ResourceManager REST interface
        <%= error_synth(404, "Public access disabled. See https://wikitech.wikimedia.org/wiki/Analytics/Cluster/Access#ssh_tunnel.28s.29 for access instructions") -%>
    }

    if (req.http.Host == "git.wikimedia.org") {
        // gitblit requires the following request headers:
        set req.http.X-Forwarded-Proto = "https";
        set req.http.X-Forwarded-Port = "443";
    }

    if (req.http.Host == "grafana.wikimedia.org" || req.http.host == "grafana-admin.wikimedia.org") {
        // X-WEBAUTH-USER is set by Apache's mod_authnz_ldap on the request it
        // proxies to the grafana backend. We discard any user-set X-WEBAUTH-USER
        // header on the Apache layer, but do it here as well as added insurance.
        unset req.http.X-WEBAUTH-USER;
    }

    if (
           req.http.Host !~ "(?i)^([^.]+\.)?planet\.wikimedia\.org$"
        && req.http.Host != "phab.wmfusercontent.org"
        && req.http.Host != "15.wikipedia.org"
        && req.http.Host != "annual.wikimedia.org"
        && req.http.Host != "config-master.wikimedia.org"
        && req.http.Host != "dbtree.wikimedia.org"
        && req.http.Host != "doc.wikimedia.org"
        && req.http.Host != "git.wikimedia.org"
        && req.http.Host != "graphite.wikimedia.org"
        && req.http.Host != "grafana.wikimedia.org"
        && req.http.Host != "grafana-admin.wikimedia.org"
        && req.http.Host != "parsoid-tests.wikimedia.org"
        && req.http.Host != "performance.wikimedia.org"
        && req.http.Host != "horizon.wikimedia.org"
        && req.http.Host != "integration.wikimedia.org"
        && req.http.Host != "phabricator.wikimedia.org"
        && req.http.Host != "servermon.wikimedia.org"
        && req.http.Host != "people.wikimedia.org"
        && req.http.Host != "piwik.wikimedia.org"
        && req.http.Host != "releases.wikimedia.org"
        && req.http.Host != "torrus.wikimedia.org"
        && req.http.Host != "bugs.wikimedia.org"
        && req.http.Host != "bugzilla.wikimedia.org"
        && req.http.Host != "datasets.wikimedia.org"
        && req.http.Host != "iegreview.wikimedia.org"
        && req.http.Host != "logstash.wikimedia.org"
        && req.http.Host != "metrics.wikimedia.org"
        && req.http.Host != "noc.wikimedia.org"
        && req.http.Host != "racktables.wikimedia.org"
        && req.http.Host != "scholarships.wikimedia.org"
        && req.http.Host != "transparency.wikimedia.org"
        && req.http.Host != "smokeping.wikimedia.org"
        && req.http.Host != "static-bugzilla.wikimedia.org"
        && req.http.Host != "stats.wikimedia.org"
        && req.http.Host != "labtesthorizon.wikimedia.org"
    ) {
        if (req.http.X-Forwarded-Proto != "https") {
            set req.http.Location = "https://" + req.http.Host + req.url;
            <%= error_synth(755, "TLS Redirect") -%>
        }
    }

    call misc_recv_pass;
}

sub cluster_fe_hash { }
sub cluster_fe_hit { }
sub cluster_fe_miss { }
sub cluster_fe_pass { }

sub cluster_fe_backend_response {
    call misc_backend_response_large_objects;
}

sub cluster_fe_deliver { }

sub cluster_fe_err_synth {
    // If status is 755, then we are forcing a redirect to https.
    if (<%= @resp_obj -%>.status == 755) {
        set <%= @resp_obj -%>.http.Location = req.http.Location;
        set <%= @resp_obj -%>.status = 301;
        return(deliver);
    }
}
