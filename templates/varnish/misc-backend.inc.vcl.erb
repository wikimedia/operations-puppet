include "misc-common.inc.vcl";

sub cluster_be_recv_pre_purge { }

sub cluster_be_recv_applayer_backend {
<%
    if_stmts = []
    @app_directors.keys.sort.each do |dirname|
        dir = @app_directors[dirname]
        if dir.key?('req_host')
            hostcmp = [*dir['req_host']].map { |h| %Q[req.http.Host == "#{h}"] }.join(' || ')
        else
            hostcmp = %Q[req.http.Host ~ "#{dir['req_host_re']}"]
        end
        if dir.key?('maintenance')
            error_synth(503, dir['maintenance'])
        end
        if @varnish_version4
            if_stmts.push("if (#{hostcmp}) {\n        set req.backend_hint = #{dirname}.backend();\n    }")
        else
            if_stmts.push("if (#{hostcmp}) {\n        set req.backend = #{dirname};\n    }")
        end
    end
    all_ifs = if_stmts.join(' els')
%>
    <%= all_ifs -%> else {
        <%= error_synth(404, "Domain not served here") -%>
    }
}

sub cluster_be_recv {
    call misc_recv_pass;
}

sub cluster_be_hash { }
sub cluster_be_hit { }
sub cluster_be_miss { }
sub cluster_be_pass { }

sub cluster_be_backend_response {
<% if ! @varnish_version4 -%>
    // Stream objects >= ~1MB which have CL - (varnish4 defaults do_stream=true)
    if (beresp.http.Content-Length ~ "^[0-9]{7}") {
        set beresp.do_stream = true;
    }
<% end -%>

    // Do not cache explicit lengths >= ~1GB in backends in general
    if (beresp.http.Content-Length ~ "^[0-9]{10}") {
<% if @varnish_version4 -%>
        set beresp.uncacheable = true;
        return (deliver);
<% else -%>
        return (hit_for_pass);
<% end -%>
    }

<% if @cache_route == 'direct' or @varnish_testing -%>
    // Direct backend caches:
    // Disable streaming if no Content-Length present.  This is the default in
    // varnish3, but in varnish4 this should convert them to responses
    // containing a Content-Length in the common case, so that upper caches
    // can make size-based decisions.  However, do not override X-Pass-Stream!
    if (!beresp.http.Content-Length && !<%= @bereq_req %>.http.X-Pass-Stream) {
        set beresp.do_stream = false;
    }
<% end -%>
}

sub cluster_be_deliver { }
