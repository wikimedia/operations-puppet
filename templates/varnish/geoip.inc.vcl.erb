# Varnish VCL include file

# init GeoIP code
C{
	#include <dlfcn.h>
	#include <stdlib.h>
	#include <stdio.h>
	#include <string.h>
	#include <GeoIPCity.h>
	#include <pthread.h>
	#include <sys/types.h>
	#include <sys/socket.h>
	#include <netdb.h>
	#include <arpa/inet.h>

	GeoIP *gi = NULL;

	void geo_init();
	int geo_get_addr_family (const char *addr);
	char * geo_get_xff_ip (const struct sess *sp);
	char * geo_sanitize_for_cookie (char *string);
	void geo_set_cache_control (const struct sess *sp);

	inline void geo_init () {
		if (gi == NULL) {
			gi = GeoIP_open("/usr/share/GeoIP/GeoIPCity.dat", GEOIP_MMAP_CACHE);
		}
	}

	int geo_get_addr_family (const char *addr) {
		struct addrinfo hint;
		struct addrinfo *info = NULL;
		int ret, result;

		if (addr == NULL) {
			return -1;
		}

		memset(&hint, 0, sizeof(hint));
		hint.ai_family = AF_UNSPEC;
		hint.ai_flags = AI_NUMERICHOST;

		ret = getaddrinfo(addr, 0, &hint, &info);
		result = ret ? -1 : info->ai_family;
		freeaddrinfo(info);
		return result;
	}

	char * geo_get_xff_ip (const struct sess *sp) {
		char *xff = VRT_GetHdr(sp, HDR_REQ, "\020X-Forwarded-For:");
		char *xff_list_item, *last;

		if (xff != NULL) {
			xff_list_item = strtok_r(xff, ",", &last);
			if (xff_list_item != NULL) {
				return xff_list_item;
			}
		}
		return xff;
	}

	char * geo_sanitize_for_cookie (char *string) {
	    char *ptr;
	    for (ptr = string; *ptr; ptr++) {
		if (strchr(";, ", *ptr)) {
		    *ptr = '_';
		}
	    }
	    return string;
	}

	void geo_set_cache_control (const struct sess *sp) {
		char *now = VRT_time_string(sp, VRT_r_now(sp));
		VRT_SetHdr(sp, HDR_OBJ, "\016Last-Modified:", now, vrt_magic_string_end);
		VRT_SetHdr(sp, HDR_OBJ, "\016Cache-Control:", "private, max-age=86400, s-maxage=0", vrt_magic_string_end);
	}
}C

sub geoip_lookup {
	set obj.http.Content-Type = "text/javascript";

	C{
		char *ip = geo_get_xff_ip(sp);
		int af = geo_get_addr_family(ip);
		GeoIPRecord *record;
		char json[255];

		if (af == -1) {
			ip = VRT_IP_string(sp, VRT_r_client_ip(sp));
			af = geo_get_addr_family(ip);
		}

		geo_init();
		record = GeoIP_record_by_addr(gi, ip);
		if (record) {
			snprintf(json, 255, "Geo = {\"city\":\"%s\",\"country\":\"%s\",\"lat\":\"%f\",\"lon\":\"%f\",\"IP\":\"%s\"}",
				record->city,
				record->country_code,
				record->latitude,
				record->longitude,
				ip
			);
			GeoIPRecord_delete(record);
			VRT_synth_page(sp, 0, json,  vrt_magic_string_end);
		} else {
			if (af == AF_INET6) {
				VRT_synth_page(sp, 0, "Geo = {IPv6:true}", vrt_magic_string_end);
			} else {
				VRT_synth_page(sp, 0, "Geo = {}", vrt_magic_string_end);
			}
		}

		geo_set_cache_control(sp);
	}C
}


sub geoip_cookie {
	C{
		GeoIPRecord *record;
		char *set_cookie_header, *cookie;
		char latlon[20];

		char *ip = geo_get_xff_ip(sp);
		int af = geo_get_addr_family(ip);
		if (af == -1) {
			ip = VRT_IP_string(sp, VRT_r_client_ip(sp));
			af = geo_get_addr_family(ip);
		}

		geo_init();
		record = GeoIP_record_by_addr(gi, ip);

		if (record) {
			/* Set-Cookie: GeoIP=US:San_Francisco:37.7749:-122.4194:v6; path=/ */
			snprintf(latlon, sizeof(latlon), "%.4f:%.4f", record->latitude, record->longitude);
			cookie = VRT_WrkString(sp, "GeoIP=",
				record->country_code,			":",
				geo_sanitize_for_cookie(record->city),	":",
				latlon,                                 ":",
				AF_INET6 ? "v6" : "v4",			"; path=/",
				vrt_magic_string_end);
			GeoIPRecord_delete(record);
		} else {
			/* Set-Cookie: GeoIP=::::v6; path=/ */
			cookie = VRT_WrkString(sp, "GeoIP=::::", AF_INET6 ? "v6" : "v4",
				"; path=/", vrt_magic_string_end);
		}

		set_cookie_header = VRT_GetHdr(sp, HDR_RESP, "\013set-cookie:");
		if (set_cookie_header == NULL) {
			// New header
			VRT_SetHdr(sp, HDR_RESP, "\013Set-Cookie:", cookie, vrt_magic_string_end);
		} else {
			// Append to existing header
			VRT_SetHdr(sp, HDR_RESP, "\013Set-Cookie:", set_cookie_header, "; ", cookie, vrt_magic_string_end);
		}
	}C
}
