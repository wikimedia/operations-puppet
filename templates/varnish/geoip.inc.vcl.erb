# Varnish VCL include file

# init GeoIP code
C{
	#include <dlfcn.h>
	#include <stdlib.h>
	#include <stdio.h>
	#include <string.h>
	#include <GeoIPCity.h>
	#include <pthread.h>
	#include <sys/types.h>
	#include <sys/socket.h>
	#include <netdb.h>
	#include <arpa/inet.h>

	GeoIP *gi = NULL;

	void geo_init();
	int geo_get_addr_family (const char *addr);
	char * geo_get_ip_for_lookup (const struct sess *sp);
	void geo_set_cache_control (const struct sess *sp);
	double TIM_real(void);
	void TIM_format(double t, char *p);

	inline void geo_init () {
		if (gi == NULL) {
			gi = GeoIP_open("/usr/share/GeoIP/GeoIPCity.dat", GEOIP_MMAP_CACHE);
		}
	}

	int geo_get_addr_family (const char *addr) {
		struct addrinfo hint;
		struct addrinfo *info = NULL;
		int ret, result;

		memset(&hint, 0, sizeof(hint));
		hint.ai_family = AF_UNSPEC;
		hint.ai_flags = AI_NUMERICHOST;

		ret = getaddrinfo(addr, 0, &hint, &info);
		if (ret) {
			freeaddrinfo(info);
			return -1;
		}

		result = info->ai_family;
		freeaddrinfo(info);
		return result;
	}

	char * geo_get_ip_for_lookup (const struct sess *sp) {
		char *last = NULL;
		char *xff = VRT_GetHdr(sp, HDR_REQ, "\020X-Forwarded-For:");
		char *xff_ip_str = strtok_r(xff, ",", &last);  // XFF can be a comma-delimited list of IPs

		if (xff_ip_str == NULL) {
			// It isn't a list; get the full header
			xff_ip_str = xff;
		}
		// Ensure the header is set & XFF is a valid IP
		if (xff_ip_str && geo_get_addr_family(xff_ip_str) != -1) {
			// Use the XFF IP instead of the client IP
			return xff_ip_str;
		}
		return VRT_IP_string(sp, VRT_r_client_ip(sp));
	}

	void geo_set_cache_control (const struct sess *sp) {
		char date[40];

		TIM_format(TIM_real(), date);
		VRT_SetHdr(sp, HDR_OBJ, "\016Last-Modified:", date, vrt_magic_string_end);
		VRT_SetHdr(sp, HDR_OBJ, "\016Cache-Control:", "private, max-age=86400, s-maxage=0", vrt_magic_string_end);
	}
}C

sub geoip_lookup {
	set obj.http.Content-Type = "text/javascript";

	C{
		char *ip = geo_get_ip_for_lookup(sp);
		char json[255] = "Geo = {}";

		geo_init();
		GeoIPRecord *record = GeoIP_record_by_addr(gi, ip);

		if (record) {
			snprintf(json, 255, "Geo = {\"city\":\"%s\",\"country\":\"%s\",\"lat\":\"%f\",\"lon\":\"%f\",\"IP\":\"%s\",\"netmask\":\"%d\"}",
				record->city,
				record->country_code,
				record->latitude,
				record->longitude,
				ip,
				24 // HACK
			);
			GeoIPRecord_delete(record);
		}
		VRT_synth_page(sp, 0, json,  vrt_magic_string_end);
		geo_set_cache_control(sp);
	}C
}
