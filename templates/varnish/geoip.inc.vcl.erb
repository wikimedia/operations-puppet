# Varnish VCL include file

import header;

# init GeoIP code
C{
	#include <dlfcn.h>
	#include <stdlib.h>
	#include <stdio.h>
	#include <string.h>
	#include <GeoIPCity.h>
	#include <pthread.h>
	#include <sys/types.h>
	#include <sys/socket.h>
	#include <netdb.h>
	#include <arpa/inet.h>

	GeoIP *gi = NULL;

	void geo_init();
	int geo_get_addr_family (const char *addr);
	char * geo_get_xff_ip (const struct sess *sp);
	char * geo_sanitize_for_cookie (char *string);
	void geo_set_cache_control (const struct sess *sp);

	void
	geo_init() {
		if (gi == NULL) {
			gi = GeoIP_open("/usr/share/GeoIP/GeoIPCity.dat", GEOIP_MMAP_CACHE);
		}
	}

	int
	geo_get_addr_family(const char *addr) {
		struct addrinfo hint;
		struct addrinfo *info = NULL;
		int ret, result;

		if (addr == NULL) {
			return -1;
		}

		memset(&hint, 0, sizeof(hint));
		hint.ai_family = AF_UNSPEC;
		hint.ai_flags = AI_NUMERICHOST;

		ret = getaddrinfo(addr, 0, &hint, &info);
		result = ret ? -1 : info->ai_family;
		freeaddrinfo(info);
		return result;
	}

	/*
	 * Return the first IP address from the X-Forwarded-For header of the
	 * incoming request, or NULL if no such header was set.
	 */
	char *
	geo_get_xff_ip(const struct sess *sp) {
		char *xff = VRT_GetHdr(sp, HDR_REQ, "\020X-Forwarded-For:");
		char *xff_list_item, *last;

		if (xff != NULL) {
			xff_list_item = strtok_r(xff, ",", &last);
			if (xff_list_item != NULL) {
				return xff_list_item;
			}
		}
		return xff;
	}

	/*
	 * Make a string safe to use as a cookie value in a Set-Cookie header
	 * by replacing CTLs, DEL, 8-bit characters, space, double-quote,
	 * comma, semicolon, and backslash with an underscore.
	 */
	char *
	geo_sanitize_for_cookie(char *string) {
		char *ptr;
		for (ptr = string; ptr && *ptr; ptr++) {
			if (*ptr < 0x21 || *ptr > 0x7E || strchr("\",;\\", *ptr)) {
				*ptr = '_';
			}
		}
		return string;
	}

	/*
	 * Set Last-Modified and Cache-Control headers for GeoIP requests.
	 */
	void
	geo_set_cache_control(const struct sess *sp) {
		char *now = VRT_time_string(sp, VRT_r_now(sp));
		VRT_SetHdr(sp, HDR_OBJ, "\016Last-Modified:", now, vrt_magic_string_end);
		VRT_SetHdr(sp, HDR_OBJ, "\016Cache-Control:", "private, max-age=86400, s-maxage=0", vrt_magic_string_end);
	}
}C

sub geoip_lookup {
	set obj.http.Content-Type = "text/javascript";

	C{
		char *ip = geo_get_xff_ip(sp);
		int af = geo_get_addr_family(ip);
		GeoIPRecord *record;
		char json[255];

		if (af == -1) {
			ip = VRT_IP_string(sp, VRT_r_client_ip(sp));
			af = geo_get_addr_family(ip);
		}

		geo_init();
		record = GeoIP_record_by_addr(gi, ip);
		if (record) {
			snprintf(json, 255, "Geo = {\"city\":\"%s\",\"country\":\"%s\",\"lat\":\"%f\",\"lon\":\"%f\",\"IP\":\"%s\"}",
				record->city,
				record->country_code,
				record->latitude,
				record->longitude,
				ip
			);
			GeoIPRecord_delete(record);
			VRT_synth_page(sp, 0, json,  vrt_magic_string_end);
		} else {
			if (af == AF_INET6) {
				VRT_synth_page(sp, 0, "Geo = {IPv6:true}", vrt_magic_string_end);
			} else {
				VRT_synth_page(sp, 0, "Geo = {}", vrt_magic_string_end);
			}
		}

		geo_set_cache_control(sp);
	}C
}


sub geoip_cookie {
	C{
		GeoIPRecord *record;
		char *geo_header;
		const char *cookie_out = NULL;
		char cookie_buf[255];

		char *ip = geo_get_xff_ip(sp);
		int af = geo_get_addr_family(ip);
		if (af == -1) {
			ip = VRT_IP_string(sp, VRT_r_client_ip(sp));
			af = geo_get_addr_family(ip);
		}

		geo_init();
		record = GeoIP_record_by_addr(gi, ip);

		if (record) {
			/* Set-Cookie: GeoIP=US:San_Francisco:37.7749:-122.4194:v4; path=/ */
			int snp_len = snprintf(cookie_buf, sizeof(cookie_buf), "GeoIP=%s:%s:%.4f:%.4f:%s; path=/",
				record->country_code ? geo_sanitize_for_cookie(record->country_code) : "",
				record->city ? geo_sanitize_for_cookie(record->city) : "",
				record->latitude,
				record->longitude,
				(af == AF_INET6) ? "v6" : "v4"
			);
			if (snp_len < sizeof(cookie_buf)) /* don't use truncated output */
				cookie_out = cookie_buf;
			GeoIPRecord_delete(record);
		} else {
			cookie_out = (af == AF_INET6) ? "GeoIP=::::v6; path=/" : "GeoIP=::::v4; path=/";
		}

		if (cookie_out) {
                        /* Use libvmod-header to ensure the Set-Cookie header we are adding does not
                           clobber or manipulate existing cookie headers (if any). */
			Vmod_Func_header.append(sp, HDR_RESP, "\013Set-Cookie:", cookie_out, vrt_magic_string_end);
		}
	}C
}
