<%
top_domain    = cluster_options.fetch( 'top_domain', 'org' )
upload_domain = cluster_options.fetch( 'upload_domain', 'upload.wikimedia.org' )
-%>
# Varnish VCL include file for upload backends

import std;

<% if vcl_config.fetch("cluster_tier", "1") == "2" -%>
# Define backends and directors specific for upload

# List of Puppet generated backends

<% vcl_config.fetch("upstream_directors", {}).values.flatten.sort.each do |backend| -%>
backend <%= backend =~ /^[0-9]\.]+$/ ? "ipv4_" + backend.gsub(".", "_") : backend.split(".")[0].gsub("-", "_") %> {
	.host = "<%= backend %>";
	.port = "3128";
	.connect_timeout = <%= varnish_backend_options.fetch("connect_timeout", "2s") %>;
	.first_byte_timeout = <%= varnish_backend_options.fetch("first_byte_timeout", "35s") %>;
	.between_bytes_timeout = <%= varnish_backend_options.fetch("between_bytes_timeout", "2s") %>;
	.max_connections = <%= varnish_backend_options.fetch("max_connections", "100") %>;
	.probe = varnish;
}
<% end -%>

# Directors
<% vcl_config.fetch("upstream_directors", {}).each_pair do |director,backends| -%>
director <%= director %> chash {
<% backends.sort.each do |backend| -%>
	{	.backend = <%= backend =~ /^[0-9]\.]+$/ ? "ipv4_" + backend.gsub(".", "_") : backend.split(".")[0].gsub("-", "_") %>;
		.weight = 20;
	}
<% end -%>
}
<% end -%>
<% end -%>

sub pick_main_stevedore {
<% storage_main = vcl_config.fetch('storage_main', false) -%>
<% if storage_main -%>
	set beresp.storage = "<%= storage_main %>";
<% else -%>
	if (std.random(0, 2) < 1) {
		set beresp.storage = "main-sda3";
	} else {
		set beresp.storage = "main-sdb3";
	}
<% end -%>
}

sub pick_large_object_stevedore {
<% storage_big_object = vcl_config.fetch('storage_big_object', false) -%>
<% if storage_big_object -%>
	set beresp.storage = "<%= storage_big_object %>";
<% else -%>
	if (std.random(0, 2) < 1) {
		set beresp.storage = "bigobj-sda3";
	} else {
		set beresp.storage = "bigobj-sdb3";
	}
<% end -%>
}

<% if vcl_config.fetch("cluster_tier", "1") == "1" -%>
sub radosgw_rewrite {
	if (req.restarts == 0) {
		if (req.url ~ "^/[^/]+/[^/]+/((transcoded|thumb|temp)/)?((temp|archive)/)?[0-9a-f]/[0-9a-f]{2}(/.+)?$") {
			set bereq.url = regsub(
				req.url,
				"^/([^/]+)/([^/]+)/((transcoded|thumb|temp)/)?(((temp|archive)/)?([0-9a-f])/([0-9a-f]{2})(/.+)?)$",
				"/swift/v1/\1-\2-local-\3.\9/\5");
			set bereq.url = regsub(
				bereq.url,
				"^(/swift/v1/[^/]+-[^/]+-local)-\.",
				"\1-public.");
		}
		elsif (req.url ~ "^/[^/]+/[^/]+/timeline/.+$") {
			set bereq.url = regsub(
				req.url,
				"^/([^/]+)/([^/]+)/(timeline)/(.+)$",
				"/swift/v1/\1-\2-\3-render/\4");
		}
		elsif (req.url ~ "^(/[^/]+/[^/]+)?/math/[0-9a-f]/[0-9a-f]/.+$") {
			set bereq.url = regsub(
				req.url,
				"^(/[^/]+/[^/]+)?/(math)/(([0-9a-f])/([0-9a-f])/.+)$",
				"/swift/v1/global-data-\2-render.\4\5/\3");
		}
		elsif (req.url ~ "^/score/.+$") {
			set bereq.url = regsub(
				req.url,
				"^/(score)/(.+)$",
				"/swift/v1/global-data-\1-render/\2");
		}
		
		if (bereq.url ~ "^/swift/v1/") {
			set bereq.http.host = "ms-fe.eqiad.wmnet";
		}
	}
	else {
		if (req.backend == image_scalers && req.url ~ "^/[^-/]+/[^/]+/thumb/(.+)$") {
			set bereq.url = regsub(req.url, "^/[^-/]+/[^/]+/thumb/(.+)$", "/w/thumb_handler.php/\1");
			set bereq.http.host = regsub(req.url, "^/([^-/]+)/([^/]+)/thumb/.+$", "\2.\1.<%= Regexp.escape(top_domain) %>");
			set bereq.http.X-Original-URI = req.url;

			# Exceptions
			set bereq.http.host = regsub(bereq.http.host, "^(meta|commons|internal|grants|wikimania2006)\.wikipedia\.org$", "\1.wikimedia.org");
			set bereq.http.host = regsub(bereq.http.host, "^mediawiki\..+$", "www.mediawiki.org");
			set bereq.http.host = regsub(bereq.http.host, "^sources\.wikipedia\.org$", "wikisource.org");
		}
	}
}

sub check_thumb_404 {
	if (beresp.status == 404 && bereq.url ~ "^/swift/v1/[^-/]+-[^-/]+-local-thumb") {
		set req.backend = image_scalers;
		return (restart);
	}
}

<% end -%>
sub vcl_recv {
	/* Support HTTP PURGE from localhost */
	if (req.request == "PURGE") {
		if (!client.ip ~ purge) {
			error 405 "Denied.";
		# This is a stupid hack to make varnishhtcpd work - it's using a perl mod that sends purge reqs like
		# PURGE http://de.wikipedia.orghttp://de.wikipedia.org/w/index.php
		} elsif (req.url ~ "^http://<%= upload_domain %>") {
			set req.url = regsub ( req.url, "^http://[\w.]+(/.*)", "\1");
			return (lookup);
		} else {
			error 200 "Domain not cached here.";
		}
	}

<% if scope.lookupvar('::realm') == 'production' -%>
	if (client.ip !~ wikimedia_nets) {
<% else -%>
	if (client.ip != "127.0.0.1") {
<% end -%>
		error 403 "Access denied";
	}

	if ( req.http.host != "<%= upload_domain %>") {
		error 403 "Requested target domain not allowed.";
	}

<% if vcl_config.fetch("cluster_tier", "1") == "2" -%>
	set req.backend = eqiad;

<% end -%>
	/* Make sure high range requests don't block on large objects being retrieved */
	if (req.http.Range
		&& (std.integer(regsub(req.http.Range, "^bytes=([0-9]*)-", "\1"), 0) > 33554432
			|| req.http.Range ~ "^bytes=([0-9]{9,})-")) {
		set req.hash_ignore_busy = true;
	}

	return (lookup);
}

sub vcl_fetch {
	# Cache media objects for 30 days by default
	if (beresp.status <= 400) {
		set beresp.ttl = 30d;
	}

	# Stream large objects, >= 1 MB
	if (std.integer(beresp.http.Content-Length, 1048576) >= 1048576) {
		set beresp.do_stream = true;
	}

	/* Select a random big object storage backend for objects >= 100 MB */
	if (beresp.http.Content-Length ~ "^[0-9]{9}") {
		call pick_large_object_stevedore;
	} else {
		call pick_main_stevedore;
	}
	
	if (beresp.http.Content-Range) {
		/* Varnish itself doesn't ask for ranges, so this must have been
		 * a passed range request
		 */
		set beresp.http.X-Content-Range = beresp.http.Content-Range;
	}
}

sub vcl_hit {
	if (req.http.If-Cached && req.http.If-Cached != obj.http.Etag) {
		error 412 "Etag mismatch";
	}
}

sub vcl_miss {

<% if vcl_config.fetch('imagescalers_as_backend', false) -%>
	set req.backend = image_scalers;
<% elsif vcl_config.fetch("cluster_tier", "1") == "1" -%>
	# Send originals to the Swift cluster
	if ( req.url ~ "^/(wikibooks|wikinews|wikiquote|wikiversity|wikimedia|wikipedia|wikisource|wiktionary|wikivoyage)/[^/]+/(archive/)?[0-9a-f]/[0-9a-f][0-9a-f]/" ) {
		set req.backend = swift;
	# Send thumbnails to the Swift cluster
	} elsif (req.url ~ "^/+[^/]+/[^/]+/(thumb|temp)/") {
		set req.backend = swift;
	# math to swift
	} elsif (req.url ~ "^/(math|score)/") {
		set req.backend = swift;
	# timeline to swift
	} elsif (req.url ~ "^/(wikibooks|wikinews|wikiquote|wikiversity|wikimedia|wikipedia|wikisource|wiktionary|wikivoyage)/[^/]+/timeline/") {
		set req.backend = swift;
	}
<% end -%>

	/* Convert range requests into pass when over a certain threshold */
	if (req.http.Range
		&& (std.integer(regsub(req.http.Range, "^bytes=([0-9]*)-", "\1"), 0) > 33554432
			|| req.http.Range ~ "^bytes=([0-9]{9,})-")) {
		set bereq.http.Range = req.http.Range;
		std.log("Passing high range request: " + req.http.Range);
		return (pass);
	}

	if (req.http.If-Cached) {
		error 412 "Entity not in cache";
	}
}

sub vcl_deliver {
	if (resp.http.X-Content-Range) {
		set resp.http.Content-Range = resp.http.X-Content-Range;
		remove resp.http.X-Content-Range;
	}
}
