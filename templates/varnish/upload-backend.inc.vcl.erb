// Varnish VCL include file for upload backends
include "upload-common.inc.vcl";

sub pick_main_stevedore {
	if (std.random(0, 2) < 1) {
		set beresp.storage = "main1";
	} else {
		set beresp.storage = "main2";
	}
}

sub pick_large_object_stevedore {
	if (std.random(0, 2) < 1) {
		set beresp.storage = "bigobj1";
	} else {
		set beresp.storage = "bigobj2";
	}
}

<% if @site_tier == "one" -%>
sub cluster_be_recv_applayer_backend {
	set req.backend = swift;
}
<% end -%>

sub cluster_be_recv {
	call upload_common_recv;

	// Make sure high range requests don't block on large objects being retrieved
	if (req.http.Range
		&& (std.integer(regsub(req.http.Range, "^bytes=([0-9]*)-", "\1"), 0) > 33554432
			|| req.http.Range ~ "^bytes=([0-9]{9,})-")) {
		set req.hash_ignore_busy = true;
	}
}

sub cluster_be_hash { }

sub cluster_be_hit {
	call upload_common_hit;
}

sub cluster_be_miss {
	// Convert range requests into pass when over a certain threshold
	if (req.http.Range
		&& (std.integer(regsub(req.http.Range, "^bytes=([0-9]*)-", "\1"), 0) > 33554432
			|| req.http.Range ~ "^bytes=([0-9]{9,})-")) {
		set bereq.http.Range = req.http.Range;
		std.log("Passing high range request: " + req.http.Range);
		return (pass);
	}

	if (req.http.If-Cached) {
		error 412 "Entity not in cache";
	}
}

sub cluster_be_pass { }

sub cluster_be_fetch {
	// Stream large objects, >= 1 MB
	if (std.integer(beresp.http.Content-Length, 0) >= 1048576 || beresp.http.Content-Length ~ "^[0-9]{9}") {
		set beresp.do_stream = true;
	}

	// Select a random big object storage backend for objects >= 100 MB
	if (beresp.http.Content-Length ~ "^[0-9]{9}") {
		call pick_large_object_stevedore;
	} else {
		call pick_main_stevedore;
	}
	
	if (beresp.http.Content-Range) {
		// Varnish itself doesn't ask for ranges, so this must have been
		// a passed range request
		set beresp.http.X-Content-Range = beresp.http.Content-Range;
	}

	// Derive the corresponding original URL and store it with the object
	if (!beresp.http.X-MediaWiki-Original && req.url ~ "^/+[^/]+/[^/]+/thumb/[^/]+/[^/]+/[^/]+/[0-9]+px-") {
		set beresp.http.X-MediaWiki-Original = regsub(req.url, "^(/+[^/]+/[^/]+/)thumb/([^/]+/[^/]+/[^/]+).*$", "\1\2");
	}

	return (deliver);
}

sub cluster_be_deliver {
	call upload_common_deliver;
}
