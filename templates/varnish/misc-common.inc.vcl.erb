sub misc_recv_pass {
<%-
    def_action = ''
    if_stmts = []
    @vcl_config['req_handling'].keys.sort.each do |reqhost|
        options = @vcl_config['req_handling'][reqhost]
        host_action = false
        if options.has_key?('subpaths')
            path_def_action = ''
            path_ifs = []
            options['subpaths'].keys.sort.each do |subpath|
                path_options = options['subpaths'][subpath]
                if path_options['force-pass']
                    path_action = 'return (pass);'
                    if subpath == 'default'
                        path_def_action = path_action
                    else
                        path_ifs.push(%Q[if (req.url ~ "#{subpath}") {\n             #{path_action}\n        }])
                    end
                end
            end
            if path_ifs.empty?
                host_action = path_def_action
            else
                if not path_def_action.empty?
                    path_ifs.push("e {\n            #{path_def_action}\n        }")
                end
                host_action = path_ifs.join(' els')
            end
        elsif options['force-pass']
            host_action = 'return (pass);'
        end

        if host_action
            if reqhost == 'default'
                def_action = host_action
            else
                if reqhost =~ /^[-.A-Za-z0-9]+$/
                    hostop = '=='
                else
                    hostop = '~'
                end
                hostcmp = %Q[req.http.Host #{hostop} "#{reqhost}"]
                if_stmts.push("if (#{hostcmp}) {\n        #{host_action}\n    }")
            end
        end
    end
    if if_stmts.empty?
        do_passes = def_action
    else
        if not def_action.empty?
            if_stmts.push("e {\n        #{def_action}\n    }")
        end
        do_passes = if_stmts.join(' els')
    end
-%>
    <%= do_passes %>

    if (req.method != "GET" && req.method != "HEAD") {
        // We only deal with GET and HEAD
        return (pass);
    }

    // don't cache authorized requests
    if (req.http.Authorization) {
        return (pass);
    }

    // don't cache cookie requests, but ignore google analytics cookies and our
    // own global WMF-Last-Access, GeoIP, and CP cookies.
    set req.http.NC-Cookie = regsuball(req.http.Cookie, "(?i)(^|;\s*)(_ga[-_a-z]*|_utm[-_a-z]*|WMF-Last-Access|GeoIP|CP)=[^;]*", "");
    set req.http.NC-Cookie = regsub(req.http.NC-Cookie, "^;?\s*", "");
    if (req.http.NC-Cookie != "") {
        unset req.http.NC-Cookie;
        return (pass);
    }
    unset req.http.NC-Cookie;
}
