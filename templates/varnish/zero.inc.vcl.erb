# Varnish VCL include file for Wikipedia Zero

import netmapper;

sub vcl_init {
	// args here are map-name (for .map()), data file, and seconds between mtime checks for reload
	netmapper.init("zero", "/var/netmapper/zero.json", 89);
}

sub tag_carrier {
	// Note that currently, tag_carrier is *only* called when the request is not
	//  via HTTPS (check for X-Forwarded-Proto at the top of vcl_recv in mobile-frontend.vcl).

	set req.http.X-CS2 = netmapper.map("zero", "" + client.ip);

	if (req.restarts == 0 && (req.http.X-CS2 == "-OPERA" || req.http.X-CS2 == "-TEST")) {
		// Elsewhere in the VCL, the frontend appends client.ip to XFF for when
		//   we forward to the backend varnish, and thus at this exact moment in time,
		//   the final (or only) XFF entry always exists and always matches client.ip.
		//   So we must first get past this and look for the next entry to the left
		//   (if any) to find the XFF value set by another upstream proxy such as
		//   Opera Mini or Carrier Testing (or in the future, SSL).

		set req.http.X-Stripped-XFF = regsub(req.http.X-Forwarded-For, ",?[^,]+$", "");
		// ^ X-S-XFF now contains XFF without its final item, which was client.ip.

		if (req.http.X-Stripped-XFF) { // If one or more IPs remain in X-S-XFF
			// Strip away any leading IPs, such that the result of regsub() is the
			//  rightmost (or only) remaining IP, and use that to re-set X-CS2:
			set req.http.X-CS2 = netmapper.map("zero", regsub(req.http.X-Stripped-XFF, "^.*, ?", ""));
		}
		unset req.http.X-Stripped-XFF; // clean up our temp var
	}

	if ( req.http.host ~ "(^([a-zA-Z0-9-]+)\.zero|^zero)\.([a-zA-Z0-9-]+)\.org" ) {
		set req.http.X-Subdomain = "ZERO";
	} else {
		set req.http.X-Subdomain = "M";
	}

	// go to english by default
	set req.http.X-DfltLang = "en";
	set req.http.X-DfltPage = "/wiki/Special:ZeroRatedMobileAccess";

	/* Please keep this list alphabetized by the ACL variable */
	if (req.http.X-CS2 == "502-13") {
		if (req.http.X-Subdomain == "ZERO") {
			set req.http.X-CS = "502-13";
		}
	} else if (req.http.X-CS2 == "623-03") {
		set req.http.X-DfltLang = "fr";
		if (req.http.X-Subdomain == "M") {
			if (req.http.host ~ "(^(fr|ar|sg|en|es|zh|ha|ln|eo)\.m|^m)\.([a-zA-Z0-9-]+)\.org") {
				set req.http.X-CS = "623-03";
			}
		}
	} else if (req.http.X-CS2 == "413-02") {
		if (req.http.X-Subdomain == "ZERO") {
			if (req.http.host ~ "(^(en|ta|si)\.zero|^zero)\.([a-zA-Z0-9-]+)\.org") {
				set req.http.X-CS = "413-02";
			}
		}
	} else if (req.http.X-CS2 == "502-16") {
		if (req.http.X-Subdomain == "ZERO") {
			if (req.http.User-Agent ~ "Opera") {
				set req.http.X-CS = "502-16";
			}
		}
	} else if (req.http.X-CS2 == "520-18") {
		set req.http.X-DfltLang = "th";
		if (req.http.X-Subdomain == "ZERO") {
			set req.http.X-CS = "520-18";
		}
	} else if (req.http.X-CS2 == "470-01") {
		set req.http.X-DfltLang = "bn";
		if (req.http.X-Subdomain == "ZERO") {
			if (req.http.host ~ "(^(bn)\.zero|^zero)\.([a-zA-Z0-9-]+)\.org") {
				set req.http.X-CS = "470-01";
			}
		}
	} else if (req.http.X-CS2 == "470-03") {
		if (req.http.host ~ "(^(en|bn)\.(zero|m)|^(zero|m))\.([a-zA-Z0-9-]+)\.org") {
			set req.http.X-CS = "470-03";
		}
	} else if (req.http.X-CS2 == "416-03") {
		if (req.http.host ~ "(^(en|ar)\.(zero|m)|^(zero|m))\.([a-zA-Z0-9-]+)\.org") {
			set req.http.X-CS = "416-03";
		}
	} else if (req.http.X-CS2 == "456-02") {
		if (req.http.X-Subdomain == "ZERO") {
			set req.http.X-CS = "456-02";
		}
	} else if (req.http.X-CS2 == "652-02") {
		if (req.http.X-Subdomain == "M") {
			set req.http.X-CS = "652-02";
		}
	} else if (req.http.X-CS2 == "624-02") {
		set req.http.X-DfltLang = "fr";
		if (req.http.X-Subdomain == "M") {
			if (req.http.host ~ "(^(fr|en|es|de|zh|ar|ha|ln|yo|eo)\.m|^m)\.([a-zA-Z0-9-]+)\.org") {
				set req.http.X-CS = "624-02";
			}
		}
	} else if (req.http.X-CS2 == "630-86") {
		set req.http.X-DfltLang = "fr";
		if (req.http.X-Subdomain == "M") {
			set req.http.X-CS = "630-86";
		}
	} else if (req.http.X-CS2 == "612-03") {
		set req.http.X-DfltLang = "fr";
		if (req.http.X-Subdomain == "M") {
			set req.http.X-CS = "612-03";
		}
	} else if (req.http.X-CS2 == "639-07") {
		if (req.http.X-Subdomain == "M") {
			set req.http.X-CS = "639-07";
		}
	} else if (req.http.X-CS2 == "604-00") {
		set req.http.X-DfltLang =  "fr";
		if (req.http.X-Subdomain == "M") {
			if (req.http.host ~ "(^(fr|ar|en|es|de|it|nl|pt|ru|zh)\.m|^m)\.([a-zA-Z0-9-]+)\.org") {
				set req.http.X-CS = "604-00";
			}
		}
	} else if (req.http.X-CS2 == "614-04") {
		set req.http.X-DfltLang = "fr";
		if (req.http.X-Subdomain == "M") {
			set req.http.X-CS = "614-04";
		}
	} else if (req.http.X-CS2 == "605-01") {
		set req.http.X-DfltLang = "fr";
		if (req.http.X-Subdomain == "M") {
			if (req.http.host ~ "(^(ar|en|fr|es|de|it|ru|ja|zh)\.m|^m)\.([a-zA-Z0-9-]+)\.org") {
				set req.http.X-CS = "605-01";
			}
		}
	} else if (req.http.X-CS2 == "641-14") {
		if (req.http.X-Subdomain == "M") {
			if (req.http.host ~ "(^(ko|fr|de|en|zh|sw|rw|ar|hi|es)\.m|^m)\.([a-zA-Z0-9-]+)\.org") {
				set req.http.X-CS = "641-14";
			}
		}
	} else if (req.http.X-CS2 == "420-01") {
		set req.http.X-DfltLang = "ar";
		if (req.http.host ~ "(^(ar|bn|en|tl|ur)\.(zero|m)|^(zero|m))\.([a-zA-Z0-9-]+)\.org") {
			set req.http.X-CS = "420-01";
		}
	} else if (req.http.X-CS2 == "639-02") {
		set req.http.X-CS = "639-02";
	} else if (req.http.X-CS2 == "405-25") {
		if (req.http.X-Subdomain == "ZERO") {
			/* MCC-MNC not clear from http://en.wikipedia.org/wiki/Mobile_country_code */
			set req.http.X-CS = "405-25";
		}
	} else if (req.http.X-CS2 == "297-01") {
		set req.http.X-CS = "297-01";
	} else if (req.http.X-CS2 == "426-04") {
		set req.http.X-CS = "426-04";
	} else if (req.http.X-CS2 == "250-99") {
		set req.http.X-DfltLang = "ru";
		if (req.http.host ~ "(^(en|ru)\.(zero|m)|^(zero|m))\.([a-zA-Z0-9-]+)\.org") {
			set req.http.X-CS = "250-99";
		}
	} else if (req.http.X-CS2 == "410-01") {
		if (req.http.host ~ "(^(en|ur)\.(zero|m)|^(zero|m))\.([a-zA-Z0-9-]+)\.org") {
			set req.http.X-CS = "410-01";
		}
	} else if (req.http.X-CS2 == "404-01") {
		if (req.http.host ~ "(^([a-zA-Z0-9-]+)\.(zero|m)|^(zero|m))\.([a-zA-Z0-9-]+)\.org") {
			set req.http.X-CS = "404-01";
		}
	} else if (req.http.X-CS2 == "510-11") {
		set req.http.X-DfltLang = "id";
		if (req.http.X-Subdomain == "ZERO") {
			if (req.http.host ~ "(^(id|en|zh|ar|hi|ms|jv|su)\.zero|^zero)\.([a-zA-Z0-9-]+)\.org") {
				set req.http.X-CS = "510-11";
			}
		}
	} else if (req.http.X-CS2 == "646-02") {
		set req.http.X-DfltLang = "fr";
		if (req.http.X-Subdomain == "M") {
			if (req.http.host ~ "(^(fr|en|mg)\.m|^m)\.([a-zA-Z0-9-]+)\.org") {
				set req.http.X-CS = "646-02";
			}
		}
	} else if (req.http.X-CS2 == "436-01") {
		if (req.http.host ~ "(^(en|tg|ru)\.(zero|m)|^(zero|m))\.([a-zA-Z0-9-]+)\.org") {
			set req.http.X-CS = "436-01";
		}
	} else if (req.http.X-CS2 == "401-01") {
		set req.http.X-DfltLang = "ru";
		if (req.http.host ~ "(^(ru|kk|en)\.(zero|m)|^(zero|m))\.([a-zA-Z0-9-]+)\.org") {
			set req.http.X-CS = "401-01";
		}
	}
	/* Please keep the above list alphabetized by the ACL variable */

	unset req.http.X-CS2; // temp variable for netmapper -> X-CS stuff
}
