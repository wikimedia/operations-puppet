# Varnish VCL include file for Wikipedia Zero

import netmapper;

sub vcl_init {
	// args here are map-name (for .map()), data file, and seconds between mtime checks for reload
	netmapper.init("zero", "/var/netmapper/zero.json", 89);
	netmapper.init("proxies", "/var/netmapper/proxies.json", 89);
}

sub tag_carrier {
	// This is what things look like on entry in four basic scenarios
	// ("both" here means something MITM-proxied the SSL connection, like OperaMini,
	//   but was kind enough to set an XFF header on the way)
	// (the leading "..." in XFF is that sometimes there are other local
	//   proxies on 127.0.0.1 or whatever, according to some OperaMini docs...)

	/*********************************************************
	*    v> | client.ip | XFF                        | XFP
	* direct| client    | (...,)? client             |
	* ssl   | ssl       | (...,)? client, ssl        | https
	* proxy | proxy     | (...,)? client, proxy      |
	* both  | ssl       | (...,)? client, proxy, ssl | https
	*********************************************************/

	// first, strip the SSL entry from XFF if applicable
	if (req.http.X-Forwarded-Proto) {
		set req.http.XFF-NoSSL = regsub(req.http.X-Forwarded-For, ",[^,]+$", ""); // strips final entry
	} else {
		set req.http.XFF-NoSSL = req.http.X-Forwarded-For;
	}

	/*****************************************************************************
	*    v>      | XFF-NoSSL             | map("proxies") input from regsub below
	* direct/ssl | (...,)? client        | client
	* proxy/both | (...,)? client, proxy | proxy
	*****************************************************************************/

	// now get the trusted proxy into XFB, if any - the regsub grabs the final entry in the list
	set req.http.X-Forwarded-By = netmapper.map("proxies", regsub(req.http.XFF-NoSSL, "^([^,]+, ?)+", ""));

	// normalize to boolean again...
	if (req.http.X-Forwarded-By == "") {
		unset req.http.X-Forwarded-By;
	}

	// now, iff XFB was set, strip away one more layer to put the supposed client IP at the end
	if (req.http.X-Forwarded-By) {
		set req.http.XFF-ClientEnd = regsub(req.http.XFF-NoSSL, ",[^,]+$", "");
	} else {
		set req.http.XFF-ClientEnd = req.http.XFF-NoSSL;
	}

	unset req.http.XFF-NoSSL; // clean up temp var

	/****************************************************************
	*    v>  | XFF-CE         | map("zero") input from regsub below
	*   all  | (...,)? client | client
	*****************************************************************/

	// Grab client IP from the end of the XFF-CE list and feed to map("zero") 
	set req.http.X-CS2 = netmapper.map("zero", regsub(req.http.XFF-ClientEnd, "^([^,]+, ?)+", ""));

	// normalize to boolean (varnish-3.0.4...)
	if (req.http.X-CS2 == "") {
		unset req.http.X-CS2;
	}

	unset req.http.XFF-ClientEnd; // clean up temp var

	// Now the per-carrier stuff...
	// Short of having netmapper (or equivalent) return a set of match parameters, I can't see any
	//   good way to make the rest of this cleaner really.
	if (req.http.X-CS2) {
		if (req.http.X-CS2 == "502-13") {
			if (!req.http.X-Forwarded-Proto && !req.http.X-Forwarded-By && req.http.X-Subdomain == "ZERO") {
				set req.http.X-CS = req.http.X-CS2;
			}
		} else if (req.http.X-CS2 == "623-03") {
			if (!req.http.X-Forwarded-Proto && !req.http.X-Forwarded-By) {
				if (req.http.host ~ "^((fr|ha|ln|yo|eo|ar|zh|en|es|de)\.)?m\.") {
					set req.http.X-CS = req.http.X-CS2;
				}
			}
		} else if (req.http.X-CS2 == "413-02") {
			if (!req.http.X-Forwarded-Proto && !req.http.X-Forwarded-By) {
				if (req.http.host ~ "^((en|si|simple|ta)\.)?zero\.") {
					set req.http.X-CS = req.http.X-CS2;
				}
			}
		} else if (req.http.X-CS2 == "502-16") {
			if (!req.http.X-Forwarded-Proto && req.http.X-Forwarded-By == "Opera" && req.http.X-Subdomain == "ZERO") {
				set req.http.X-CS = req.http.X-CS2;
			}
		} else if (req.http.X-CS2 == "520-18") {
			if (!req.http.X-Forwarded-Proto && !req.http.X-Forwarded-By && req.http.X-Subdomain == "ZERO") {
				set req.http.X-CS = req.http.X-CS2;
			}
		} else if (req.http.X-CS2 == "470-01") {
			if (!req.http.X-Forwarded-Proto && (!req.http.X-Forwarded-By || req.http.X-Forwarded-By == "Opera")) {
				set req.http.X-CS = req.http.X-CS2;
			}
		} else if (req.http.X-CS2 == "470-03") {
			if (!req.http.X-Forwarded-Proto && !req.http.X-Forwarded-By) {
				if (req.http.host ~ "^((en|bn)\.)?(zero|m)\.") {
					set req.http.X-CS = req.http.X-CS2;
				}
			}
		} else if (req.http.X-CS2 == "416-03") {
			if (!req.http.X-Forwarded-By) {
				if (req.http.host ~ "^((en|ar)\.)?(zero|m)\.") {
					set req.http.X-CS = req.http.X-CS2;
				}
			}
		} else if (req.http.X-CS2 == "456-02") {
			if (!req.http.X-Forwarded-Proto && !req.http.X-Forwarded-By && req.http.X-Subdomain == "ZERO") {
				set req.http.X-CS = req.http.X-CS2;
			}
		} else if (req.http.X-CS2 == "652-02") {
			if (!req.http.X-Forwarded-Proto && (!req.http.X-Forwarded-By || req.http.X-Forwarded-By == "Opera") && req.http.X-Subdomain == "M") {
				set req.http.X-CS = req.http.X-CS2;
			}
		} else if (req.http.X-CS2 == "624-02") {
			if (!req.http.X-Forwarded-Proto && !req.http.X-Forwarded-By) {
				if (req.http.host ~ "^((fr|ha|ln|yo|eo|ar|zh|en|es|de)\.)?m\.") {
					set req.http.X-CS = req.http.X-CS2;
				}
			}
		} else if (req.http.X-CS2 == "630-86") {
			if (!req.http.X-Forwarded-Proto && !req.http.X-Forwarded-By && req.http.X-Subdomain == "M") {
				set req.http.X-CS = req.http.X-CS2;
			}
		} else if (req.http.X-CS2 == "612-03") {
			if (!req.http.X-Forwarded-Proto && (!req.http.X-Forwarded-By || req.http.X-Forwarded-By == "Opera") && req.http.X-Subdomain == "M") {
				set req.http.X-CS = req.http.X-CS2;
			}
		} else if (req.http.X-CS2 == "639-07") {
			if (!req.http.X-Forwarded-Proto && !req.http.X-Forwarded-By && req.http.X-Subdomain == "M") {
				set req.http.X-CS = req.http.X-CS2;
			}
		} else if (req.http.X-CS2 == "604-00") {
			if (!req.http.X-Forwarded-Proto && !req.http.X-Forwarded-By) {
				if (req.http.host ~ "^((fr|en|ar|es|de|it|zh|nl|pt|ru)\.)?m\.") {
					set req.http.X-CS = req.http.X-CS2;
				}
			}
		} else if (req.http.X-CS2 == "614-04") {
			if (!req.http.X-Forwarded-Proto && !req.http.X-Forwarded-By && req.http.X-Subdomain == "M") {
				set req.http.X-CS = req.http.X-CS2;
			}
		} else if (req.http.X-CS2 == "605-01") {
			if (!req.http.X-Forwarded-Proto && !req.http.X-Forwarded-By) {
				if (req.http.host ~ "^((fr|ru|ja|zh|it|de|en|es|ar)\.)?m\.") {
					set req.http.X-CS = req.http.X-CS2;
				}
			}
		} else if (req.http.X-CS2 == "641-14") {
			if (!req.http.X-Forwarded-Proto && !req.http.X-Forwarded-By) {
				if (req.http.host ~ "^((en|zh|ar|hi|fr|sw|rw|de|es|ko)\.)?m\.") {
					set req.http.X-CS = req.http.X-CS2;
				}
			}
		} else if (req.http.X-CS2 == "420-01") {
			if (!req.http.X-Forwarded-Proto && !req.http.X-Forwarded-By) {
				if (req.http.host ~ "^((ar|tl|en|bn|ur)\.)?(zero|m)\.") {
					set req.http.X-CS = req.http.X-CS2;
				}
			}
		} else if (req.http.X-CS2 == "250-99") {
			if (!req.http.X-Forwarded-Proto && (!req.http.X-Forwarded-By || req.http.X-Forwarded-By == "Opera")) {
				if (req.http.host ~ "^((ru|en)\.)?(zero|m)\.") {
					set req.http.X-CS = req.http.X-CS2;
				}
			}
		} else if (req.http.X-CS2 == "410-01") {
			if (!req.http.X-Forwarded-Proto && (!req.http.X-Forwarded-By || req.http.X-Forwarded-By == "Opera")) {
				if (req.http.host ~ "^((en|ur)\.)?(zero|m)\.") {
					set req.http.X-CS = req.http.X-CS2;
				}
			}
		} else if (req.http.X-CS2 == "510-11") {
			if (!req.http.X-Forwarded-Proto && !req.http.X-Forwarded-By) {
				if (req.http.host ~ "^((id|en|zh|ar|hi|ms|jv|su)\.)?zero\.") {
					set req.http.X-CS = req.http.X-CS2;
				}
			}
		} else if (req.http.X-CS2 == "646-02") {
			if (!req.http.X-Forwarded-By) {
				if (req.http.host ~ "^((fr|en|mg)\.)?m\.") {
					set req.http.X-CS = req.http.X-CS2;
				}
			}
		} else if (req.http.X-CS2 == "401-01") {
			if (!req.http.X-Forwarded-Proto && !req.http.X-Forwarded-By) {
				if (req.http.host ~ "^((ru|kk|en)\.)?(zero|m)\.") {
					set req.http.X-CS = req.http.X-CS2;
				}
			}
		} else if (req.http.X-CS2 == "297-01") {
			if (!req.http.X-Forwarded-Proto && (!req.http.X-Forwarded-By || req.http.X-Forwarded-By == "Opera")) {
				set req.http.X-CS = req.http.X-CS2;
			}
		} else if (req.http.X-CS2 == "655-12") {
			if (req.http.X-Forwarded-By == "Opera") {
				set req.http.X-CS = req.http.X-CS2;
			}
		} else if (req.http.X-CS2 == "TEST") {
			// Test carrier allows all proxies and SSL
			set req.http.X-CS = req.http.X-CS2;
		} else {
			if (!req.http.X-Forwarded-Proto && !req.http.X-Forwarded-By) {
				// Any new carriers are signed up as both m & zero for all languages, without proxy support
				set req.http.X-CS = req.http.X-CS2;
			}
		}

		unset req.http.X-CS2;
	} // end of if(X-CS2)
	unset req.http.X-Forwarded-By;
}
