// Common functions for the Text Varnish cluster

sub cookie_munging {
	// This header is saved, and restored before sending it to MediaWiki
	if (req.restarts == 0) {
		set req.http.Orig-Cookie = req.http.Cookie;
		unset req.http.Cookie;
	}
}

sub restore_cookie {
	// Restore the original Cookie header for upstream
	// Assumes client header Orig-Cookie has been filtered!
	if (bereq.http.Orig-Cookie) {
		set bereq.http.Cookie = bereq.http.Orig-Cookie;
		unset bereq.http.Orig-Cookie;
	}
}

sub evaluate_cookie {
	// A session or token cookie will prevent caching if varied on,
	// move the Cookie header out of the way otherwise.
	// Note static and load.php exceptions to the user/token
	// exceptions, as these should be cacheable even when logged in.

        // The (?<!mwuser-) part unbreaks the bad cache effects of
        // the temporary live deployment on large wikis of:
        //   https://gerrit.wikimedia.org/r/#/c/176948
        // Can be removed when most matching cookies have gone away...
	if (req.http.Cookie ~ "((?<!mwuser-)[sS]ession|Token)="
	    && req.url !~ "^/static/"
	    && req.url !~ "^/w/load\.php") {
		set req.hash_ignore_busy = true;
	} else {
		call cookie_munging;
	}
}

sub pass_authorization {
	// As a general rule, per the RFCs, shared caches shouldn't use cached
	// responses for requests with Authorization headers (with a few
	// notable exceptions aside).  The default vcl_recv (which text
	// doesn't use) in varnish does this alongside its pass for Cookie.
	// We deal with Cookies properly elsewhere.
	//
	// By letting Authorization reqs cache, we're breaking our own OAuth
	// in some corner cases: https://phabricator.wikimedia.org/T105387
	// Any browser/curl fetch of an OAuth URL without the header can
	// cause a redirect to be cached, which then affects real fetches that
	// have the Authorization header set, which is Bad.
	//
	// It's *probably* best to just pass all Authorization-headered
	// requests in general, but on the other hand, I see a lot of random
	// Authorization headers in our traffic that don't look like stuff
	// we're using or want to pay attention to, and we've otherwise seemed
	// ok on this stuff.  So for now, only (pass) on ones that seem to
	// have OAuth data, with the same header-matching as in:
	// http://git.wikimedia.org/blob/mediawiki%2Fextensions%2FOAuth.git/b1b824cb3c98b478694417adc90bcbc1189e06eb/backend%2FMWOAuthUtils.php#L83
	if (req.http.Authorization ~ "^OAuth ") {
		set req.hash_ignore_busy = true;
		return (pass);
	}
}
