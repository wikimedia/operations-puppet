// Common functions for the Text Varnish cluster

sub pass_requests {
	if (req.request != "GET" && req.request != "HEAD") {
		return (pass);
	}
	if (req.http.Host ~ "^test\.") {
		return (pass);
	}
}

// Certain URLs are both popular and uncached. If handled by the
// consistent hash scheduler, all such requests are mapped to a single
// backend server, risking overload. So instead, use the backend_random
// director, which maps requests to the same set of backend servers,
// but which distributes requests randomly.
sub maybe_use_random_scheduler {
	if (req.url ~ "^/wiki/Special:CentralAutoLogin/") {
		set req.backend = <%= @vcl_config.fetch("default_backend", "backend") %>_random;
		set req.hash_ignore_busy = true;
	}
}

sub cookie_munging {
	// This header is saved, and restored before sending it to MediaWiki
	if (req.restarts == 0) {
		set req.http.Orig-Cookie = req.http.Cookie;
		unset req.http.Cookie;

		// We need to vary on the forceHTTPS cookie
		if (req.http.Orig-Cookie ~ "forceHTTPS=(1|true)") {
			set req.http.Cookie = "forceHTTPS=1";
		}
	}
}

sub restore_cookie {
	// Restore the original Cookie header for upstream
	// Assumes client header Orig-Cookie has been filtered!
	if (bereq.http.Orig-Cookie) {
		set bereq.http.Cookie = bereq.http.Orig-Cookie;
		unset bereq.http.Orig-Cookie;
	}
}

sub evaluate_cookie {
	// A session or token cookie will prevent caching if varied on,
	// move the Cookie header out of the way otherwise
	//
	// gettingStarted exclusion is to work around e.g. enwikigettingStartedUserToken=
	// FIXME: the gettingStarted exception can be removed after 2014-08-01
	if (req.http.Cookie ~ "([sS]ession|(?<!gettingStartedUser)Token)=") {
		set req.hash_ignore_busy = true;
	} else {
		call cookie_munging;
	}
}
