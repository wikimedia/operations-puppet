# This file is managed by Puppet!
<%
# Shortcuts for convenience
realm =  @realm
-%>

# Thumbs server configuration file

user www-data www-data;
<% if has_variable?("nginx_use_ssl") then %>
    # Adapted from https://github.com/priestjim/chef-openresty/blob/master/recipes/commons_conf.rb
    # Hyperthread siblings assumed to be enumerated as 0+16, 1+17, 2+18, etc, and
    #  if HT is detected, we map 2 process per physical core onto both siblings
    worker_processes  <%= @processorcount %>;
    <%
        ht_mode = false
        if @processorcount.to_i == (2 * @physicalcorecount.to_i)
            ht_mode = true
        end
        affinity_mask = Array.new
        cpupos = 0
        ncpus = @physicalcorecount.to_i
        (0...ncpus).each do |worker|
            bitmask = (1 << cpupos).to_s(2)
            bitstring = '0' * (ncpus - bitmask.size) + bitmask.to_s
            if ht_mode
                affinity_mask << (bitstring + bitstring)
                affinity_mask << (bitstring + bitstring)
            else
                affinity_mask << bitstring
            end
            cpupos += 1
        end
    -%>
    worker_cpu_affinity <%= affinity_mask.join(" ") %>;
<% else %>
    worker_processes  <%= @processorcount.to_i * 8 %>;
<% end %>
worker_rlimit_nofile 30000;


error_log  /var/log/nginx/error.log;
pid        /run/nginx.pid;

events {
    worker_connections  <%= @nginx_worker_connections %>;
    <% if has_variable?("nginx_use_ssl") then %>
    # Setting multi_accept makes it much less likely that
    # the SSL server will throw SSL connection errors
    multi_accept on;
    accept_mutex off; # better latencies at high connection rates
    <% end %>
}

http {
<% if realm == 'labs' then -%>
    # On labs nginx find a CPU cache size of 32 bytes which is
    # not enough to hold the keys defined by mime types.
    # See T50210
    types_hash_bucket_size 64;
    server_names_hash_bucket_size 64;
<% end -%>
    include       /etc/nginx/mime.types;

    access_log	/var/log/nginx/access.log;
    <% if has_variable?("nginx_use_ssl") then %>
    ## -- udplog disabled, to be removed later assuming no issues, cf T86656
    ## log_format squid_combined '$hostname	$udplog_sequence	$udplog_time	$request_time	$remote_addr	-/$status	$bytes_sent	$request_method	$scheme://$host$request_uri	NONE/$proxy_host	$content_type	$http_referer	$http_x_forwarded_for	$http_user_agent	$http_accept_language	$sent_http_x_analytics';
    ## access_udplog 208.80.154.73:8419 squid_combined;
    ## -- end of udplog stuff
    client_max_body_size 100m;
    large_client_header_buffers 4 16k; 
    client_body_buffer_size 64k;
    <% end %>


    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;
    tcp_nodelay        on;

    gzip  off;
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";

    <% if has_variable?("nginx_use_ssl") then %>
    # Enable a shared cache, since it is defined at this level
    # it will be used for all virtual hosts. 1m = 4000 active sessions,
    # so we are allowing 200,000 active sessions.
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 5m;
<% if scope.function_os_version(['debian >= jessie']) -%>
    # Disable RFC5077 tickets (may revisit later when client support is better)
    ssl_session_tickets off;

    # ssl_buffer_size: 1300 is a good magic value for minimizing TTFB, at the
    # expense of server overhead and total throughput.  We may have to back
    # this off if it becomes a significant server performance issue, and we
    # may want to set it higher (e.g. 4k) specifically for the upload caches
    # to trade a little TTFB for throughput.  This is something that will have
    # to be watched, experimented on, and tuned as more load comes in...
    ssl_buffer_size 1300;
<% end -%>

    # This is used to inject "Accept-Encoding: gzip" into all proxied SPDY requests
    # The other half of the solution is in the per-server proxy configuration in the
    # form of a line like: proxy_set_header Accept-Encoding $accept_encoding;
    # This is based on: http://trac.nginx.org/nginx/ticket/542#comment:1
    map $spdy $accept_encoding {
        default gzip;
        ''      $http_accept_encoding;
    }

    <%= @nginx_ssl_conf.join("\n")  %>
    <% end %>

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}
