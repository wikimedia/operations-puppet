
from user_metrics.config import logging
from pkg_resources import WorkingSet , DistributionNotFound, VersionConflict

# Get working set of Python modules
working_set = WorkingSet()


# Project settings
# ================

__instance_host__ = '<%= site_name %>'
__instance_port__ = 5000

__project_home__            = '<%= e3_analysis_path %>'
__web_home__                = ''.join([__project_home__, 'user_metrics/api/'])
__data_file_dir__           = ''.join([__project_home__, 'data/'])

__query_module__            = 'user_metrics.query.query_calls_sql'
__user_thread_max__         = 50
__rev_thread_max__          = 20
__time_series_thread_max__  = 6

__cohort_data_instance__    = 'cohorts'
__cohort_db__               = 'usertags'
__cohort_meta_db__          = 'usertags_meta'
__cohort_meta_instance__    = 'prod'

__secret_key__ = '<%= secret_key %>'

try:
    working_set.require('Flask-Login>=0.1.2')
    __flask_login_exists__ = True
    logging.debug(__name__ + ' :: Using module flask.ext.login...')
except (DistributionNotFound, VersionConflict):
    __flask_login_exists__ = False
    logging.debug(__name__ + ' :: Can\'t find module flask.ext.login...')


# Database connection settings
# ============================

connections = {
<% mysql_connections.keys.sort.each do |name| -%>
    <%= "'#{name}'" %>: {
<% mysql_connections[name].keys.sort.each do |key| -%>
        <%= "'#{key}'" %>: <%= (mysql_connections[name][key] =~ /^\d+$/) ? mysql_connections[name][key] : "'#{mysql_connections[name][key]}'" %>,
<% end # connection..each -%>
    },
<% end # mysql_connections..each -%>
}

def get_project_host_map(usecache=True):
    cache_name = 'project_host_map.json'
    if not exists(cache_name) or not usecache:
	cluster_url_fmt = 'http://noc.wikimedia.org/conf/s%d.dblist'
        host_fmt = 's%d'
        project_host_map = {}
        for i in range(1,8):
            host = host_fmt % i
            url = cluster_url_fmt % i
            projects = urlopen(url).read().splitlines()
            for project in projects:
                project_host_map[project] = host
        json.dump(project_host_map, open(cache_name, 'w'))
    else:
        project_host_map = json.load(open(cache_name))
    return project_host_map

PROJECT_DB_MAP = get_project_host_map()
