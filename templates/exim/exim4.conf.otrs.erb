# This file is managed by puppet

##########
# Macros #
##########

CONFDIR=/etc/exim4

# OTRS
OTRS_POSTMASTER=/opt/otrs/bin/otrs.PostMaster.pl
OTRS_HOME=/var/lib/otrs
OTRS_USER=otrs
OTRS_GROUP=www-data
OTRSQUERY=SELECT value0 FROM system_address WHERE value0='${quote_mysql:$local_part@$domain}' AND valid_id=1;

###############################
# Main configuration settings #
###############################

# MySQL lookups (OTRS)
hide mysql_servers =  m2-master.eqiad.wmnet/otrs/exim/<%= scope.lookupvar('exim::smtp::otrs_mysql_password') %> : m2-slave.eqiad.wmnet/otrs/exim/<%= scope.lookupvar('exim::smtp::otrs_mysql_password') %>

domainlist system_domains = @
domainlist local_domains = +system_domains : +wikimedia_domains
domainlist wikimedia_domains = lsearch;CONFDIR/wikimedia_domains

# a list of domains to always respond defer; used for emergencies or planned downtimes
domainlist defer_domains = lsearch;CONFDIR/defer_domains

# Standard lists
hostlist wikimedia_nets = <; <%= scope.lookupvar('network::constants::all_networks').join(" ; ") %>
hostlist relay_from_hosts = <; @[] ; 127.0.0.1 ; ::1 ;

# Interfaces
daemon_smtp_ports = smtp

# Administration
log_selector = +address_rewrite +all_parents +delivery_size +deliver_time +incoming_interface +incoming_port +smtp_confirmation +smtp_protocol_error +smtp_syntax_error +tls_cipher +tls_peerdn

# Policy control
acl_smtp_connect = acl_check_connect
acl_smtp_rcpt = acl_check_rcpt
acl_smtp_data = acl_check_data

helo_try_verify_hosts = *

# Allow Phab, RT, OTRS to use any sender address
untrusted_set_sender = *
local_from_check = false

system_filter = CONFDIR/system_filter

# Resource control
check_spool_space = 50M
smtp_reserve_hosts = <; 127.0.0.1 ; ::1 ; +wikimedia_nets
smtp_accept_queue_per_connection = 500

deliver_queue_load_max = 800.0
queue_only_load = 100.0
remote_max_parallel = 500

smtp_connect_backlog = 128
smtp_receive_timeout = 1m
smtp_accept_max = 4000
smtp_accept_max_per_host = ${if match_ip{$sender_host_address}{+wikimedia_nets}{50}{5}}
smtp_accept_reserve = 100

# Lookups
host_lookup = *
rfc1413_hosts =

# Content filtering
spamd_address = 127.0.0.1 783

# Malware scanning
av_scanner = clamd:/var/run/clamav/clamd.ctl

# Other
never_users = root : daemon : bin
ignore_bounce_errors_after = 0h

# force Gmail over IPv4 due to reports of bad spam reputation over IPv6
dns_ipv4_lookup = gmail-smtp-in.l.google.com : aspmx.l.google.com

###############################
# Access Control Lists (ACLs) #
###############################

begin acl

acl_check_rcpt:

	# Accept if the source is local SMTP (a pipe)
	accept hosts = :

	# Deny if the local part contains @, %, /, | or !, or starts with a dot
	deny local_parts = ^.*[@%!/|] : ^\\.

	# Accept relaying from networks we control. Note: no address verification
	# is done at this point, which is good for mail submission, but may render
	# recipient callout verification by affected hosts useless.
	accept domains = ! +local_domains
		hosts = +relay_from_hosts
		control = submission/sender_retain

	# Require recipient domain to be local
	require message = Relay not permitted
		domains = +local_domains
		set acl_m_relayed = yes

	# Verify the recipient address for local domains, or require the
	# recipient domain to exist for remote domains
	require verify = recipient

	accept

acl_check_connect:
	# We only accept mail from our own mail relays
	require message = This server does not accept external mail
		hosts = <; 127.0.0.0/8 ; ::1 ; +wikimedia_nets

	accept

acl_check_data:
	# skip spam-check for locally-submitted messages
	accept hosts = +relay_from_hosts
		set acl_m0 = trusted relay

	# skip if message is too large (>4M)
	accept condition = ${if >{$message_size}{4M}}
		set acl_m0 = n/a
		set acl_m1 = skipped, message too large

	# add spam headers...
	warn spam = nonexistent:true
		set acl_m0 = $spam_score ($spam_bar)
		set acl_m1 = $spam_report
		set acl_m3 = $spam_score_int

	# silently drop spam at high scores (> 12)
	discard log_message = spam detected ($spam_score)
		condition = ${if >{$spam_score_int}{120}{1}{0}}

	# silently discard messages with malware attached
	discard log_message = malware detected ($malware_name)
		demime = *
		malware = *

	accept

###########
# Routers #
###########

begin routers

# Use the system aliasfile /etc/aliases for system domains
system_aliases:
	driver = redirect
	domains = +system_domains
	data = ${lookup{$local_part}lsearch{/etc/aliases}}
	pipe_transport = address_pipe
	allow_fail
	allow_defer
	forbid_file

otrs:
	driver = accept
	condition = ${lookup mysql{OTRSQUERY}{true}fail}
	transport = otrs

# Send all mail not destined for the local machine via a set of
# mail relays ("smart hosts")
smart_route:
	driver = manualroute
	transport = remote_smtp
	# OTRS receives emails for project domains
	# (such as info-en @ wikipedia.org), defined dynamically in its database.
	route_list = !+local_domains  <%= @mail_smarthost.join(':') %>

##############
# Transports #
##############

begin transports

# Generic remote SMTP transport

remote_smtp:
	driver = smtp
	hosts_avoid_tls = <; 0.0.0.0/0 ; 0::0/0

# Generic pipe local delivery transport (for use by alias/forward files)

address_pipe:
	driver = pipe
	return_output

# OTRS pipe transport
otrs:
	driver = pipe
	command = OTRS_POSTMASTER
	current_directory = OTRS_HOME
	home_directory = OTRS_HOME
	user = OTRS_USER
	group = OTRS_GROUP
	freeze_exec_fail
	log_fail_output
	timeout = 1m
	timeout_defer

###############
# Retry rules #
###############

begin retry

*	*	F,2h,15m; G,16h,1h,1.5; F,4d,6h
