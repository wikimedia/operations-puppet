# This file is managed by Puppet!

[DEFAULT]
#cert_file = /etc/ssl/certs/swift.pem
#key_file = /etc/ssl/private/swift.key
bind_port = <%= scope.lookupvar("swift::proxy::config::bind_port") %>
workers = <%= scope.lookupvar("swift::proxy::config::num_workers") %>
user = swift
# You can enable default statsD logging here and/or override it in sections
# below:
## statsd logging disabled for the initial releas of 1.5.0
#log_statsd_host = localhost
#log_statsd_port = 8125
#log_statsd_default_sample_rate = 1
#log_statsd_metric_prefix =

[pipeline:main]
pipeline = rewrite healthcheck cache swauth cors proxy-logging proxy-server

[app:proxy-server]
use = egg:swift#proxy
allow_account_management = true

#[filter:tempauth]
#use = egg:swift#tempauth
#user_system_root = testpass .admin http://copper.wikimedia.org:8080/v1/AUTH_system

[filter:swauth]
use = egg:swauth#swauth
default_swift_cluster = local#<%= scope.lookupvar("swift::proxy::config::proxy_address") %>/v1
set log_name = swauth
super_admin_key = <%= scope.lookupvar("swift::proxy::config::super_admin_key") %>

[filter:healthcheck]
use = egg:swift#healthcheck

[filter:cache]
use = egg:swift#memcache
memcache_servers = <%= scope.lookupvar("swift::proxy::config::memcached_servers").join(",") %>
memcache_serialization_support = 0

[filter:cors]
paste.filter_factory = wmf.cors:filter_factory

[filter:proxy-logging]
use = egg:swift#proxy_logging

[filter:rewrite]
# the auth system turns our login and key into an account / token pair.
# the account remains valid forever, but the token times out.
account = <%= scope.lookupvar("swift::proxy::config::rewrite_account") %>
# the name of the scaler cluster.
thumbhost = <%= scope.lookupvar("swift::proxy::config::rewrite_thumb_server") %>
# upload doesn"t like our User-agent (Python-urllib/2.6), otherwise we could call it using urllib2.urlopen()
user_agent = Mozilla/5.0
# this list is the containers that should be sharded
shard_container_list = <%= scope.lookupvar("swift::proxy::config::shard_container_list") %>
# backend_url_format controls whether we pass the URL through to the thumbhost unmolested
# or mangle it to be consumed by mediawiki.  ms5 takes URLs unmolested, mediawiki wants them
# transformed to something more palatable (specifically, turning http://upload/proj/lang/ into http://lang.proj/
# valid options are 'asis' (leave it alone) and 'sitelang' (change upload to lang.site.org)
backend_url_format = <%= scope.lookupvar("swift::proxy::config::backend_url_format") %>



paste.filter_factory = wmf.rewrite:filter_factory

