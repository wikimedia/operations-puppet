<?php
/* disabled until after migration because chase is using the
   x-forwarded-for header for other purposes during migration.
*/

/*
if (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
  $_SERVER['REMOTE_ADDR'] = $_SERVER['HTTP_X_FORWARDED_FOR'];
}
*/

if (!empty($_SERVER['HTTP_X_FORWARDED_PROTO'])
    && $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https') {
  $_SERVER['HTTPS'] = true;
}

class redirector {
  protected $config;
  protected $mysqli;
  protected $connected=false;

  function __construct() {
    $this->config = json_decode(
      file_get_contents(__DIR__.'/redirect_config.json'));

    $this->mysqli = new mysqli(
      $this->config->mysql->host,
      $this->config->mysql->user,
      $this->config->mysql->pass,
      'phabricator_maniphest'
    );
    if ($this->mysqli->connect_error) {
      $msg = 'redirector.php: Connect Error (' . $this->mysqli->connect_errno . ') '
           . $this->mysqli->connect_error;
      error_log($msg);
      //die($msg);
      $this->connected=false;
    } else {
      $this->connected=true;
    }
  }

  public function redirect($url) {
    if (!$this->connected) {
      return;
    }
    foreach ($this->config->urlPatterns as $i=>$p) {
      $matches = array();
      $pattern = '#'.$p->pattern.'#';

      if (preg_match( $pattern, $url, $matches )) {
        if (isset($p->fieldValue)) {
          // dynamic redirect, look up $id using cross reference query
          $fieldValue = $p->fieldValue;
          for ($i = 1; $i < count($matches); $i++) {
            $match = isset($matches[$i])
                   ? $matches[$i]
                   : '';
            $fieldValue = str_replace('$'.$i, $match, $fieldValue);
          }

          $sql = $this->config->query;
          // no sql injection, kthx!
          $stmt = $this->mysqli->prepare($this->config->query);
          $stmt->bind_param('ss', $this->config->fieldIndex, $fieldValue );
          $stmt->execute();
          $stmt->bind_result($task_id);
          if ($stmt->fetch()) {
            // insert the cross referenced id into the redirectUrl
            $redirect = str_replace('$id', $task_id, $p->redirectUrl);
            // dynamic redirect:
            $this->redirect_and_exit($redirect);
          } else {
            error_log('redirector: could not find task for '.$fieldValue);
            echo 'Task not found for '.$fieldValue;
            exit(404);
          }
        } else {
          $redirect = $p->redirectUrl;
          if (count($matches)>1) {
            for ($i = 1; $i < count($matches); $i++) {
              $redirect = str_replace('$'.$i, $matches[$i], $redirect);
            }
          }
          // static redirect
          $this->redirect_and_exit($redirect);
        }
      }
    }
  }

  protected function redirect_and_exit($url) {
    header("HTTP/1.1 301 Moved Permanently");
    header("Location: $url");
    echo
     "<html><head><title>Redirecting</title></head><body>"
    ."<h1>Wikimedia's bug tracking has moved to Phabricator.</h1>"
    ."<h2>The url you requested is being redirected to"
    ."<a href='$url'>$url</a>"
    .'</h2>'
    ."<p>A temporary, read-only copy of Bugzilla is being made available at"
    .'<a href="https://old-bugzilla.wikimedia.org">'
    ."https://old-bugzilla.wikimedia.org"
    ."</a></p>"
    .'</body></html>';
    exit;
  }
}

if ($_SERVER['HTTP_HOST'] !== '<%= @phab_host %>'
 && $_SERVER['HTTP_HOST'] !== '<%= @alt_host %>') {
  $full_uri = $_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];
  $r = new redirector();
  $r->redirect($full_uri);
}
