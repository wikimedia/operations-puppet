#!/usr/bin/python3

import datetime
import logging
import os
import sys

# Send all git output to stdout
# This has to be set before git is imported.
os.environ["GIT_PYTHON_TRACE"] = 'full'
logging.basicConfig(level=logging.INFO)

import git


def rebase_repo(repo_path, track_branch):
    repo = git.Repo(repo_path)
    assert not repo.bare

    upstream_branch = "origin/%s" % track_branch

    # diff index against working copy
    if repo.index.diff(None):
        print("Local diffs detected.  Commit your changes!")
        return False

    repo.remotes.origin.fetch()

    latest_upstream_commit = repo.git.show_ref("-s", upstream_branch)
    latest_merged_commit = repo.git.merge_base(upstream_branch, "HEAD")

    if latest_upstream_commit == latest_merged_commit:
        print("Up-to-date: %s" % repo_path)
        return True

    try:
        repo.git.rebase("--preserve-merges",
                        "--stat",
                        "--strategy=recursive",
                        "--strategy-option=patience",
                        upstream_branch)
    except git.exc.GitCommandError:
        print("Rebase failed! Reverting rebase attempt.", file=sys.stderr)
        repo.git.rebase("--abort")
        return False

    repo.git.submodule("update", "--init", "--recursive")

    tagname = "snapshot-%s" % datetime.datetime.now().strftime('%Y%m%d%H%M')
    repo.create_tag(tagname)
    print("Tagged as %s" % tagname)

    print("Local hacks:")
    repo.git.log("--color",
                 "--pretty=oneline",
                 "--abbrev-commit",
                 "origin/HEAD..HEAD")

    return True

if rebase_repo("/var/lib/git/operations/puppet", "production"):
    rebase_repo("/var/lib/git/labs/private", "master")
