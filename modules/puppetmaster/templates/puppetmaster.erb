# This file is managed by Puppet!

<VirtualHost <%= scope.lookupvar('puppetmaster::passenger::bind_address') %>:8140>
    SSLEngine on
    <%= @ssl_settings.join("\n") %>
    SSLCertificateFile      /var/lib/puppet/server/ssl/certs/<%= scope.lookupvar('puppetmaster::server_name') %>.pem
    SSLCertificateKeyFile   /var/lib/puppet/server/ssl/private_keys/<%= scope.lookupvar('puppetmaster::server_name') %>.pem
    SSLCACertificateFile    /var/lib/puppet/server/ssl/ca/ca_crt.pem
    SSLCertificateChainFile /var/lib/puppet/server/ssl/ca/ca_crt.pem
    # If Apache complains about invalid signatures on the CRL, you can try disabling
    # CRL checking by commenting the next line, but this is not recommended.
    SSLCARevocationPath     /var/lib/puppet/server/ssl/crl
    SSLVerifyClient <%= scope.lookupvar('puppetmaster::passenger::verify_client') %>
    SSLVerifyDepth  1
    SSLOptions +StdEnvVars

    <%- if @server_type == 'frontend' -%>
    ServerName <%= scope.lookupvar('puppetmaster::server_name') %>
    # These request headers are used to pass the client certificate
    # authentication information on to the puppet master process
    RequestHeader set X-SSL-Subject %{SSL_CLIENT_S_DN}e
    RequestHeader set X-Client-DN %{SSL_CLIENT_S_DN}e
    RequestHeader set X-Client-Verify %{SSL_CLIENT_VERIFY}e

    SSLProxyEngine on
    # Certificates should only be in the frontend. It is terminating SSL connections from clients and authenticating them
    # The connection to the backends is also SSL encrypted but by frontend and backends do not authenticate connections
    ProxyPassMatch ^/([^/]+/certificate.*)$ https://<%= @fqdn %>:8141
    # Reports should only be in one place. Choosing the frontend by default for simplicity
    ProxyPassMatch ^/([^/]+/report/.*)$ https://<%= @fqdn %>:8141
    # File buckets should only be in one place. Choosing the frontend by default for simplicity
    ProxyPassMatch ^/([^/]+/file_bucket_file/md5/.*)$ https://<%= @fqdn %>:8141
    # Volatile should only be in one place. Choosing the frontend by default for simplicity
    ProxyPassMatch ^/([^/]+/file_metadata(s)?/volatile/.*)$ https://<%= @fqdn %>:8141
    ProxyPassMatch ^/([^/]+/file_content/volatile/.*)$ https://<%= @fqdn %>:8141
    # The rest gets balanced
    ProxyPass / balancer://mycluster/
    <Proxy balancer://mycluster>
      <%- @workers.each do |workerhash| -%>
        <% unless workerhash['offline'] %>BalancerMember https://<%= workerhash['worker'] %>:8141 connectiontimeout=1 retry=500 timeout=900 <%- if workerhash['loadfactor'] -%>loadfactor=<%= workerhash['loadfactor'] %><%- end %><% end %>
      <%- end -%>
      <IfVersion >= 2.4>
          Require all granted
      </IfVersion>
      <IfVersion < 2.4>
          Order allow,deny
          allow from all
      </IfVersion>
    </Proxy>
    <%- else -%>
    RackBaseURI /

    <Location />
        <IfVersion < 2.4>
            Order Allow,Deny
            <%- scope.lookupvar('puppetmaster::passenger::allow_from').each do |entry| -%>
            Allow from <%= entry.gsub(/^\*/, "") %>
            <%- end -%>
            <%- scope.lookupvar('puppetmaster::passenger::deny_from').each do |entry| -%>
            Deny from <%= entry.gsub(/^\*/, "") %>
            <%- end -%>
        </IfVersion>
        <IfVersion >= 2.4>
            <%- scope.lookupvar('puppetmaster::passenger::allow_from').each do |entry| -%>
            Require ip <%= entry.gsub(/^\*/, "") %>
            <%- end -%>
            <%- scope.lookupvar('puppetmaster::passenger::deny_from').each do |entry| -%>
            Require not ip <%= entry.gsub(/^\*/, "") %>
            <%- end -%>
        </IfVersion>
    </Location>

    DocumentRoot /usr/share/puppet/rack/puppetmasterd/public
    <Directory /usr/share/puppet/rack/puppetmasterd/>
        Options None
        AllowOverride None
        <IfVersion >= 2.4>
            Require all granted
        </IfVersion>
        <IfVersion < 2.4>
            Order allow,deny
            allow from all
        </IfVersion>
    </Directory>
    <%- end -%>

    CustomLog /var/log/apache2/puppetmaster.log wmf
</VirtualHost>


