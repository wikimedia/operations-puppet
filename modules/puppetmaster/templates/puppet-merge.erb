#!/bin/sh

# TODO
# - add locking with flock so that multiple users can't run this script simultaneously.

set -e

# Colorized output helpers
RED=$(tput bold; tput setaf 1)
GREEN=$(tput bold; tput setaf 2)
MAGENTA=$(tput bold; tput setaf 9)
RESET=$(tput sgr0)
FORCE=0
USAGE=0
QUIET=0
BASEDIR="/var/lib/git/operations/puppet"
CONFFILE="/etc/puppet-merge.conf"

usage="$(basename ${0}) [-y|--yes] [SHA1]

Fetches changes from origin and from all submodules.
Shows diffs between HEAD and FETCH_HEAD, including diffs
of submodule changes.

If the changes are acceptable, HEAD will be fast-forwarded
to FETCH_HEAD.

It also runs the conftool merge if necessary.

SHA1 equals HEAD if not specified
"

TEMP=$(getopt -o yhq --long yes,help,quiet -n "$0" -- "$@")
if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

eval set -- "$TEMP"
while true; do
    case "$1" in
        -y|--yes) FORCE=1; shift ;;
        -h|--help) USAGE=1; shift ;;
        -q|--quiet) QUIET=1; shift ;;
        --) shift ; break ;;
        *) echo "Internal error!"; exit 1 ;;
    esac
done

if [ $USAGE -eq 1 ]; then
    echo "$usage" && exit 0;
fi

if [ -f $CONFFILE ]; then
    . $CONFFILE
fi

sha1=${1:-}

git_user='gitpuppet'
# We might be running this as root, or as gitpuppet (from an ssh session to a backend)
running_user=`whoami`

# Default to /var/lib/git/operations/puppet unless $1 is specified
cd "${BASEDIR}"

echo "Fetching new commits from $(git config --get remote.origin.url)"

if [ $running_user = $git_user ]; then
    cd ${BASEDIR} && git fetch
else
    su - $git_user -c "cd ${BASEDIR} && git fetch"
fi

if [ -z ${sha1} ]; then
    fetch_head_sha1=$(git rev-parse FETCH_HEAD)
else
    fetch_head_sha1=$sha1
fi

submodule_changes="$(git diff --submodule=log HEAD..${fetch_head_sha1} | grep -e '^Submodule ')" || true

# Exit if there are no changes to merge.
if [ -z "$(git diff HEAD..${fetch_head_sha1})" -a -z "${submodule_changes}" ]; then
    echo "No changes to merge."
    exit 0
fi


echo "HEAD is $(git rev-parse HEAD), FETCH_HEAD is ${fetch_head_sha1}.  Reviewing changes..."

# If there are no submodule changes, then just
# show diff of operations/puppet superproject
if [ -z "${submodule_changes}" ]; then
    if [ $QUIET -eq 0 ]; then
        git diff --color HEAD..${fetch_head_sha1} | cat
    fi
else
    # Else there are submodule changes.
    # Do some fancy stuff to show diffs
    # of submodule changes.

    # clone the puppet working directory to a temp directory, excludiing private/
    tmpdir=$(mktemp -d /tmp/puppet-merge.XXXXXXXXXX)
    git clone --quiet  "${BASEDIR}" "${tmpdir}"

    # merge and update submodules in $tmpdir
    (cd "${tmpdir}" && \
     git merge --quiet --ff-only "${fetch_head_sha1}" && \
     git submodule update --quiet --init)

    # show the diff between the $BASEDIR puppet directory and the $tmpdir puppet directory
    if [ $QUIET -eq 0 ]; then
        diff -uNr -x "private" -x ".git" "${BASEDIR}" "${tmpdir}" || true
    fi

    # We've shown the diff so we are done with $tmpdir.  Remove it.
    rm -r "${tmpdir}"
fi


# If cool, merge it!
echo ""
echo ""
echo "------------------------------"
if [ $QUIET -eq 0 ]; then
    git log HEAD..${fetch_head_sha1} --format="${MAGENTA}%cn${RESET}: %s (%h)"
fi
ncommiters=$(git log HEAD..${fetch_head_sha1} --format=%ce | sort -u | grep -v 'gerrit@wikimedia.org' | wc -l)
if [ $ncommiters -ne 1 ]; then
    echo "${RED}WARNING${RESET}: Revision range includes commits from multiple committers!"
fi

if [ $FORCE -eq 1 ]; then
    answer="yes"
else
    echo -n "Merge these changes? (yes/no)? "
    read answer
fi

if [ "x${answer}" = "xyes" ] || [ "x${answer}" = "xy" ]; then
    echo "Merging ${fetch_head_sha1}..."
    cmd="git merge --ff-only ${fetch_head_sha1}"
    echo "${cmd}"
    if [ $running_user = $git_user ]; then
        cd ${BASEDIR} && ${cmd}
    else
        su - $git_user -c "cd ${BASEDIR} && ${cmd}"
    fi

    # If there were submodule changes update and init them
    if [ -n "${submodule_changes}" ]; then
        echo "Updating submodules..."
        cmd="git submodule update --init --no-fetch"
        echo "${cmd}"
        if [ $running_user = $git_user ]; then
            cd ${BASEDIR} && ${cmd}
	else
            su - $git_user -c "cd ${BASEDIR} && ${cmd}"
	fi
    fi

    # git clean to remove any untracked
    # (submodule) files and directories
    echo "Running git clean to clean any untracked files."
    cmd="git clean -dffx -e /private/"
    echo "${cmd}"
    if [ $running_user = $git_user ]; then
        cd ${BASEDIR} && ${cmd}
    else
        su - $git_user -c "cd ${BASEDIR} && ${cmd}"
    fi

    echo "HEAD is now $(git rev-parse HEAD)."
    cd -
else
    echo "Aborting merge."
    cd -
    exit 1
fi

<%- if @servers.has_key?(@fqdn) -%>
# conftool-merge does need to run from >1 frontend, avoid running a second time
if [ $running_user != $git_user ]; then
    echo "Now running conftool-merge to sync any changes to conftool data"
    /usr/local/bin/conftool-merge
fi
# Note: The "true" command is passed on purpose to show that the command passed
# to the SSH sessions is irrelevant. It's the SSH forced command trick on the
# worker end that does the actual work. Note that the $sha1 however is important
  <%- @servers.each do |frontend, workers| -%>
    <%- workers.map{ |w| w['worker']}.select{|name| name != @fqdn}.each do |worker| -%>
if [ $running_user = $git_user ]; then
    ssh -t -t <%= worker -%> true ${fetch_head_sha1} 2>&1 | tee -a /var/log/puppet-post-merge.log
else
    su - $git_user -c "ssh -t -t <%= worker -%> true ${fetch_head_sha1} 2>&1 | tee -a /var/log/puppet-post-merge.log"
fi
if [ $? -eq 0 ]; then
    echo "${GREEN}OK${RESET}: puppet-merge on <%= worker %> succeded"
else
    echo "${RED}ERROR${RESET}: puppet-merge on <%= worker %> failed"
fi
    <%- end -%>
  <%- end -%>
<%- end -%>
