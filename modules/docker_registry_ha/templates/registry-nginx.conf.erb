<%#- SPDX-License-Identifier: Apache-2.0 -%>
upstream registry {
  server 127.0.0.1:5000;
}

map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

<%- if @nginx_cache %>
# Define a cache for immutable blobs and manifests
# inactive time here probably needs to match what is
# set in proxy_cache_valid below.
proxy_cache_path <%= @nginx_cache_dir %>
                  levels=1:2
                  max_size=10g
                  inactive=7d
                  keys_zone=cache:10m
                  use_temp_path=off;

# Define a separate cache for the auth backends to mitigate subrequests for
# every authentication.
proxy_cache_path <%= @nginx_auth_cache_dir %>
                  levels=1:2
                  max_size=100m
                  inactive=1h
                  keys_zone=auth:1m
                  use_temp_path=off;
<%- end -%>

# Some hosts (e.g. GitLab trusted runners) can be allowed to authenticate to
# the unrestricted space using a JSON Web Token. Others will have to use
# shared credentials via basic auth. Note that `map` is used over `geo` since
# the latter is only available with nginx-full
map $remote_addr $auth_type_maybe {
    default "basic";
    <%- @jwt_allowed_ips.each do |host| -%>
    <%= host %> "jwt";
    <%- end -%>
}

# Read operations are always allowed in the unrestricted space. Note that this
# mapping is used over a simpler use of limit_expect because the latter does
# not play nicely with auth_request.
map $request_method $auth_type {
    GET "none";
    HEAD "none";
    OPTIONS "none";
    default $auth_type_maybe;
}

# To get auth_basic working in the context of an auth_request, the latter
# has to be made to a totally separate request space, i.e. doing a
# proxy_pass to another server/port. This is the simple server that only
# performs basic auth. Its responses can be cached aggressively.
server {
    listen unix:<%= @nginx_auth_socket %>;

    location / {
      auth_basic "docker-registry (push)";
      auth_basic_user_file <%= @regular_push_file %>;
      try_files DUMMY @ok;
    }

    location @ok {
      return 202;
    }
}

server {
    listen 443 default_server ssl;
    listen [::]:443 ssl default_server ipv6only=on;
    ssl_certificate <%= @ssl_paths['chained'] %>;
    ssl_certificate_key <%= @ssl_paths['key'] %>;

    # Copied from modules/tlsproxy/templates/nginx.conf.erb. Eugh
    # Enable a shared cache, since it is defined at this level
    # it will be used for all virtual hosts. 1m = 4000 active sessions,
    # so we are allowing 200,000 active sessions.
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 5m;

    <%= @ssl_settings.join("\n    ") %>

    # Images can be pretty large!
    client_max_body_size 0;

    # Avoids 411 errors!
    chunked_transfer_encoding on;

    # And we vary response based on what you send in Accept
    # See:
    #  https://docs.docker.com/registry/spec/manifest-v2-1/
    #  https://docs.docker.com/registry/spec/manifest-v2-2/
    add_header 'Vary' 'Accept' always;

    location / {
      root <%= @homepage %>;
    }

    # Basic redirect - we let the registry handle it.
    # Note that this is mostly so httpbb tests will pass.
    # We might decide to remove this in the future.
    location = /v2 {
      proxy_pass http://registry;
      proxy_redirect off;
      proxy_buffering off;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_set_header Proxy-Connection "Keep-Alive";
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $host;
    }

    # Let me prefix by saying that the Docker v2 registry protocol apparently
    # is much better than the v1 protocol. I have not read enough about both
    # to make a comparative analysis, but I can tell that the auth design for
    # v2 is just terribly done!
    #
    # So for a v2 to client to decide if it needs to authenticate or not, it
    # first makes a GET request to /v2/, and based on wether it gets back a 2xx
    # or a 401, decides to authenticate for all other requests in that session.
    # This practically means it is really hard to do something like restrict
    # write access to only a certain group while allowing read access to other
    # groups - since it categorizes the whole registry based on the response
    # code of one endpoint....
    #
    # I have hacked around this in the following manner:
    #  - Tell nginx that you can be allowed by IP or by specifying a password
    #  - Allow the whole world!
    #  - Deny the IPs that need to specify password (for push and restricted pull)
    #
    # This causes nginx to return a 401 only to the IPs that have credentials, and
    # since these IPs will have the password they'll be able to authenticate. The
    # rest of the world will just be allowed via IP, and hence not be asked for
    # passwords.
    #
    # This special case handling is only for the root endpoint - all other endpoints
    # are handled in the location stanza below this, and require authentication for
    # POST/PUT/DELETE etc. We're only doing this special hack to convince the
    # docker client to send/not send basic auth credentials depending on what we
    # want them to do.
    #
    # Fuck you docker.
    location = /v2/ {
      satisfy any;

      # IPs that push new images
      <%- @allow_push_from.each do |ip| -%>
      deny <%= ip %>;
      <%- end -%>
      # IPs that pull restricted/ images
      <%- @k8s_authenticated_nodes.each_pair do |fqdn, ip| -%>
      deny <%= ip %>; # <%= fqdn %>
      <%- end -%>
      # deployment hosts need to query /restricted/ to get image tags
      <%- @deployment_hosts.each do |ip| -%>
      deny <%= ip %>;
      <%- end -%>
      allow all;

      auth_basic "docker-registry (push)";
      auth_basic_user_file <%= @regular_push_file %>;

      proxy_pass http://registry;
      proxy_redirect off;
      proxy_buffering off;
      proxy_http_version 1.1;
      proxy_set_header Host $host;

      # Some responses are very slow (e.g. T179696#6772661)
      # For example, fetching the catalog of images takes
      # time and it get worse without proper GC/cleanup.
      proxy_connect_timeout       300;
      proxy_send_timeout          300;
      proxy_read_timeout          300;
      send_timeout                300;
    }

    location ~ ^/v2/restricted/.* {
      # Send all but GET/HEAD requests to @restricted_write location block below
      # See <https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/>
      # which explains and recommends this
      error_page 418 = @restricted_write;
      recursive_error_pages on;
      if ($request_method !~ ^(GET|HEAD)$) {
        return 418;
      }

      # This covers GET/HEAD requests to /v2/restricted/
      # Only restricted-read users can read images
      auth_basic "docker-registry restricted (restricted-read)";
      auth_basic_user_file <%= @restricted_read_file %>;

      proxy_pass http://registry;
      proxy_redirect off;
      proxy_buffering off;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_set_header Proxy-Connection "Keep-Alive";
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $host;

      # Some responses are very slow (e.g. T179696#6772661)
      proxy_connect_timeout       300;
      proxy_send_timeout          300;
      proxy_read_timeout          300;
      send_timeout                300;

      <%- if @nginx_cache %>
      # Blobs and manifests by digest are immutable, so we can cache them
      location ~ ^/v2/restricted/(.*)/(blobs|manifests)/sha256:(.*) {
        proxy_pass http://registry;
        include /etc/nginx/registry-nginx-cache.conf;
      }
      <%- end -%>
    }

    # This block applies to POST/PUT/DELETE/etc. methods to /v2/restricted/
    location @restricted_write {
      <%- if @read_only_mode %>
      # this docker registry is in read only mode
      # and it will not accept pushing new images.
      deny all;
      <%- else -%>
      # Only restricted-push users can push images
      auth_basic "docker-registry restricted (restricted-push)";
      auth_basic_user_file <%= @restricted_push_file %>;
      <%- end -%>

      proxy_pass http://registry;
      proxy_redirect off;
      proxy_buffering off;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_set_header Proxy-Connection "Keep-Alive";
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $host;

      # Some responses are very slow (e.g. T179696#6772661)
      proxy_connect_timeout       300;
      proxy_send_timeout          300;
      proxy_read_timeout          300;
      send_timeout                300;
    }

    # Capture the original request path here so we can pass it to
    # jwt-authorizer in /auth/jwt (the use of rewrite in /auth means we'd
    # otherwise lose track of it)
    location ~ ^/v2/(.*) {
      set $auth_request_path $1;

      # Don't pollute edge caches with docker images.
      # Note an approach for CC: max-age=60 or 600 would gives us a small amount
      # of caching and protects us in big stormy scenarios. However we have CI
      # requiring really small reaction times for now, so avoid all caching.
      # Bug: T211719
      add_header 'Cache-Control' 'no-cache,must-revalidate' always;
      # Re-add Vary header as add_header directives are inherited from the
      # previous configuration level if and only if there are no add_header
      # directives defined on the current level.
      # http://nginx.org/en/docs/http/ngx_http_headers_module.html
      add_header 'Vary' 'Accept' always;

      <%- if @read_only_mode %>
      limit_except GET HEAD OPTIONS {
        # this docker registry is in read only mode
        # and it will not accept pushing new images.
        deny all;
      }
      <%- else -%>
      auth_request /auth;
      auth_request_set $auth_status $upstream_status;
      <%- end -%>

      proxy_pass http://registry;
      proxy_redirect off;
      proxy_buffering off;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_set_header Proxy-Connection "Keep-Alive";
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $host;

      # Some responses are very slow (e.g. T179696#6772661)
      proxy_connect_timeout       300;
      proxy_send_timeout          300;
      proxy_read_timeout          300;
      send_timeout                300;

      # But cache the _catalog endpoint for a few mins as it's pretty expensive
      location ~ ^/v2/_catalog$ {
        add_header 'Cache-Control' 'public,s-maxage=600,max-age=600' always;
        add_header 'Vary' 'Accept' always;
        proxy_pass http://registry;

      }

      <%- if @nginx_cache %>
      # Blobs and manifests by digest are immutable, so we can cache them
      location ~ ^/v2/(.*/(?:blobs|manifests)/sha256:.*) {
        # Nginx applies only _some_ of the parent location block directives
        # to nested locations, but this does _not_ include the `set
        # $auth_request_path` above. We must duplicate the directive here so
        # as not to lose the original request path during JWT auth (see
        # location = /auth/jwt). See T322453
        #
        # TODO refactor nested locations as server level locations and move
        # common directives to includes to make the configuration easier to
        # understand
        set $auth_request_path $1;

        proxy_pass http://registry;
        include /etc/nginx/registry-nginx-cache.conf;
      }
      <%- end -%>
    }

    # Below are a number of internal locations used by auth_request to route
    # to either basic auth or JSON Web Token auth based on the value of
    # $auth_type (see the geo and map directives at the top). Note it would be
    # much simpler if we could do something like `auth_request
    # /auth/$auth_type` but unfortunately auth_request does not support
    # variables.
    location = /auth {
      internal;
      set $auth_proxy_method $request_method;
      rewrite ^ /auth/$auth_type;
    }

    location = /auth/basic {
      internal;

      # Aggressively cache the responses from the basic auth server basing the
      # key solely on the authorization header. This avoids constant
      # subrequests.
      proxy_cache auth;
      proxy_cache_key "basic $http_authorization";
      proxy_cache_valid 202 401 1h;

      proxy_pass http://unix:<%= @nginx_auth_socket %>:/;
      proxy_pass_request_body off;
      proxy_set_header Content-Length "";
      proxy_method HEAD;
    }

    location = /auth/jwt {
      internal;

      # Cache JWT authorization as well but be less aggressive about it, only
      # caching successful auths for 1 minute. Note that if the jwt-authorizer
      # is ever refactored to use more than the request path and authorization
      # header to make decisions, the cache key will need to be changed
      # accordingly.
      proxy_cache auth;
      proxy_cache_key "jwt $request_uri$http_authorization";
      proxy_cache_valid 200 202 1m;

      proxy_pass http://unix:<%= @jwt_authorizer_socket %>:/$auth_request_path;
      proxy_pass_request_body off;
      proxy_set_header Content-Length "";
      proxy_method $auth_proxy_method;
    }

    location = /auth/none {
      internal;
      return 200;
    }
}
