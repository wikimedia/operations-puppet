#!/bin/bash
#
# Shell script that pulls zone templates from the origin or master DNS server,
# regenerate zones & configuration and reload the DNS server.
#
# Written by Faidon Liambotis, Jul 2013
# Updated for rsync+puppet methods by Brandon Black, Mar 2017
#
# Usage: authdns-local-update [--skip-reload] [--skip-review] [remote]
#
# The basic flow of this script is:
#   1. Possibly (usually) update /srv/authdns/staging-rsync from some source
#   2. Sanity-check in that directory (>= 10 zones, gdnsd checkconf passes)
#   3. Diff vs the live gdnsd config, ask for human yes/no confirm
#   4. Deploy to live config dir
#   5. Reload (or restart as appropriate) to make new config take effect
#
# --skip-reload unconditionally skips the reload/restart post-update
# --skip-review unconditionally skips human review/confirm (but not checkconf)
# "remote" is the fqdn of an authdns server (all of which run rsyncd exports)
# If "remote" is not present, the first step is requiring a successful puppet
#   agent run and then rsyncing that output locally from staging-puppet to
#   staging-rsync.
# If "remote" is specified and not ourselves, the above is replaced by an rsync
#   of "remote"'s staging-rsync to our own and implies --skip-review
# If "remote" is specified and is ourselves, we use the existing contents of
#    our staging-rsync, with default being to still human-review it
# If gdnsd is not installed, --skip-reload is implied and no preflight
#   "checkconf" action is taken, either.

set -e

PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

CONFFILE=/etc/wikimedia-authdns.conf

# Source the configuration file
[ -f $CONFFILE ] && . $CONFFILE

die() { echo >&2 "E: $*"; exit 1; }

if [ "$(id -u)" -ne "0" ]; then
    die "this script needs root"
fi

# setup locking; only one copy of this may be running at the same time
LOCKFILE=/var/lock/authdns-local-update
LOCKFD=9
lock()   { flock -xn $LOCKFD; }
unlock() { rm -f $LOCKFILE; }
eval "exec $LOCKFD>\"$LOCKFILE\""; trap unlock EXIT

if ! flock -xn $LOCKFD; then
    die "failed to lock, another update running?"
fi

SKIP_RELOAD="false"
SKIP_REVIEW="false"
SKIP_CHECKCONF="false"
REMOTE=""

while :; do
    case "$1" in
        --skip-reload)
            SKIP_RELOAD="true"
            shift
            ;;
        --skip-review)
            SKIP_REVIEW="true"
            shift
            ;;
        [a-z]*)
            REMOTE="$1"
            shift
            ;;
        *)
            die "invalid argument $1"
            ;;
    esac
done

# initial run, before gdnsd was installed - no checkconf or reload
if ! which gdnsd > /dev/null; then
    $SKIP_CHECKCONF = "true"
    $SKIP_RELOAD = "true"
fi

if [ -z "$REMOTE" ]; then
    if [ -f /var/lib/puppet/state/agent_disabled.lock ]; then
        $MSG=`jq -r '.disabled_message' < /var/lib/puppet/state/agent_disabled.lock`
        die "Puppet agent disabled ($MSG), aborting";
    fi
    set +e
    while :; do
        puppet agent -t
        if [ $? == 0 -o $? == 2 ]; then
           break # success
        elif [ $? == 1 ]; then
           sleep 1 # another agent still running
        else
           die "Puppet agent failed, aborting"
        fi
    done
    set -e
    run-no-puppet rsync --delete -cai /srv/authdns/staging-puppet/ /srv/authdns/staging-rsync/
elif [ "$REMOTE" != "$FQDN" ]; then
    SKIP_REVIEW="true"
    rsync --delete -cai rsync://${REMOTE}/srv/authdns/staging-rsync/ /srv/authdns/staging-rsync/
fi

## Now that the data is in staging-rsync, validate it, and do a human
## review/confirm if no remote specified (which may be ourselves)

if [ `ls /srv/authdns/staging-rsync/etc/zones |wc -l` -le 10 ]; then
    die "less than 10 zones, something's probably wrong, aborting";
fi

if [ $SKIP_CHECKCONF = "false" ]; then
    gdnsd -Ssc /srv/authdns/staging-rsync/etc checkconf
fi

DIFFCMD="diff --color=always -durN"
if [ $SKIP_REVIEW = "false" ]; then
    ($DIFFCMD /var/lib/gdnsd/admin_state /srv/authdns/staging-rsync/var/admin_state;
    $DIFFCMD /etc/gdnsd/ /srv/authdns/staging-rsync/etc/ )|less -EXr
    echo ""
    echo -n "Merge these changes? (yes/no)? "
    read answer
    if [ "x${answer}" != "xyes" ]; then
        echo "Aborting merge."
        exit 1
    fi
fi

## Sync the data to live config:
## The grep catches rsync output indicating deletions or file modifications
##   other than those in the zones/ subdirectory...

NEEDS_RESTART="false"
cp /srv/authdns/staging-rsync/var/admin_state /var/lib/gdnsd/admin_state
rsync --delete -cai /srv/authdns/staging-rsync/etc/ /etc/gdnsd/ \
  |grep -qP '^(\*deleting  |[^.]f.........) (?!zones/)' && NEEDS_RESTART="true"

## Take final action for potential reload/restart:

if [ $SKIP_RELOAD = "true" ]; then
    exit 0
elif [ $NEEDS_RESTART = "false" ]; then
    echo "Reloading zones"
    gdnsd reload-zones
else
    echo "Restarting to update zones & config"
    service gdnsd restart >/dev/null
fi
