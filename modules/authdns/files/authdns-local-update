#!/bin/bash
#
# Shell script that pulls zone templates from the origin or master DNS server,
# regenerate zones & configuration and reload the DNS server.
#
# Written by Faidon Liambotis, Jul 2013
# Updated for rsync+puppet methods by Brandon Black, Mar 2017

set -e

PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

CONFFILE=/etc/wikimedia-authdns.conf

# Source the configuration file
[ -f $CONFFILE ] && . $CONFFILE

die() { echo >&2 "E: $*"; exit 1; }

if [ "$(id -u)" -ne "0" ]; then
    die "this script needs root"
fi

# setup locking; only one copy of this may be running at the same time
LOCKFILE=/var/lock/authdns-local-update
LOCKFD=9
lock()   { flock -xn $LOCKFD; }
unlock() { rm -f $LOCKFILE; }
eval "exec $LOCKFD>\"$LOCKFILE\""; trap unlock EXIT

if ! flock -xn $LOCKFD; then
    die "failed to lock, another update running?"
fi

# If $REMOTE (only arg) is not present, the first step is requiring a
#   successful puppet agent run and then rsyncing that output locally from
#   staging-puppet to staging-rsync.  The lack of $REMOTE also triggers human
#   review before deployment.
# If $REMOTE is specified and not ourselves, the above replaced by an rsync of
#   $REMOTE's staging-rsync to our own
# If $REMOTE is specified and is ourselves, we trust the existing contents of
#   our staging-rsync

REMOTE=$1
if [ -z "$REMOTE" ]; then
    if [ -f /var/lib/puppet/state/agent_disabled.lock ]; then
        $MSG=`jq -r '.disabled_message' < /var/lib/puppet/state/agent_disabled.lock`
        die "Puppet agent disabled ($MSG), aborting";
    fi
    while :; do
        puppet agent -t
        if [ $? == 0 -o $? == 2 ]; then
           break # success
        elif [ $? == 1 ]; then
           sleep 1 # another agent still running
        else
           die "Puppet agent failed, aborting"
        fi
    done
    run-no-puppet rsync --delete -cai /srv/authdns/staging-puppet/ /srv/authdns/staging-rsync/
elif [ "$REMOTE" != "$FQDN" ]; then
    rsync --delete -cai rsync://${REMOTE}/srv/authdns/staging-rsync/ /srv/authdns/staging-rsync/
fi

## Now that the data is in staging-rsync, validate it, and do a human
## review/confirm if no remote specified (which may be ourselves)

if [ `ls /srv/authdns/staging-rsync/etc/zones |wc -l` -le 10 ]; then
    die "less than 10 zones, something's probably wrong, aborting";
fi

gdnsd -Ssc /srv/authdns/staging-rsync/etc checkconf

DIFFCMD="diff --color=always -durN"
if [ -z "$REMOTE" ]; then
    ($DIFFCMD /var/lib/gdnsd/admin_state /srv/authdns/staging-rsync/var/admin_state;
    $DIFFCMD /etc/gdnsd/ /srv/authdns/staging-rsync/etc/ )|less -EXr
    echo ""
    echo -n "Merge these changes? (yes/no)? "
    read answer
    if [ "x${answer}" != "xyes" ]; then
        echo "Aborting merge."
        exit 1
    fi
fi

## Sync the data to live config:
## The grep catchines rsync output indicating deletions or file modifications
##   other than those in the zones/ subdirectory...

NEEDS_RESTART="false"
cp /srv/authdns/staging-rsync/var/admin_state /var/lib/gdnsd/admin_state
rsync --delete -cai /srv/authdns/staging-rsync/etc/ /etc/gdnsd/ \
  |grep -qP '^(\*deleting  |[^.]f.........) (?!zones/)' && NEEDS_RESTART="true"

## Take final action for potential reload/restart:

# initial run, before gdnsd was installed
if ! which gdnsd > /dev/null; then
    exit 0
fi

if [ $NEEDS_RESTART != "false" ]; then
    echo "Restarting to update zones & config"
    service gdnsd restart >/dev/null
else
    echo "Reloading zones"
    gdnsd reload-zones
fi
