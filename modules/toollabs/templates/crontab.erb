#! /usr/bin/perl
#
#  Copyright © 2013 Marc-André Pelletier <mpelletier@wikimedia.org>
#
#  Permission to use, copy, modify, and/or distribute this software for any
#  purpose with or without fee is hereby granted, provided that the above
#  copyright notice and this permission notice appear in all copies.
#
#  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
#  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
#  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

#  This goes in /usr/local/bin to override the system crontab (which will
#  have its permissions restricted).

#  THIS FILE IS MANAGED BY PUPPET
#
#  This goes in /usr/local/bin to override the system crontab (which will
#  have its permissions restricted).
#
#  Source: modules/toollabs/templates/crontab.erb
#  From:   toollabs::submit

use strict;
use warnings;
use Getopt::Std;
use File::Temp qw(tempfile);

sub submit(@) {
  exec { '/usr/bin/ssh' } 'ssh', '<%= @cron_host %>', '/usr/bin/crontab', @_;
  die "$0: unable to execute remote crontab command\n";
}

# Save original command line arguments as getopts() changes
# @ARGV.
my @SavedARGV = @ARGV;

my %opts = ( e => 0, l => 0, r => 0, i => 0 );
getopts('ielru:', \%opts);

my $num = $opts{'e'}+$opts{'l'}+$opts{'r'};

die "$0: usage error: only one operation permitted\n" if $num > 1;

my @args;
my $uid = $<;
my $target = $uid;
my $uname = getpwuid $uid;
my $dashu = '';

if(defined $opts{'u'}) {
    $uname = $opts{'u'};
    $target = getpwnam $uname;
    die "$0: user '$uname' unknown\n" unless defined $target;
    die "must be privileged to use -u\n" unless $uid==0 or $uid == $target;
    push @args, '-u', $uname if $uid != $target;
    $dashu = " -u $uname" if $uid != $target;
}

# If the target user is not managed in LDAP and thus likely
# a system user, invoke the original crontab instead.
if ($target < <%= @ldapconfig["nss_min_uid"] %>) {
    exec ('/usr/bin/crontab', @SavedARGV);
}

die "$0: only tools are allowed crontabs\n" unless $uid==0 or $target>39999;

push @args, '-i'  if $opts{'i'} and $opts{'r'};

submit @args, '-r' if $opts{'r'};
submit @args, '-l' if $opts{'l'};

my $default_crontab = <<END
# Edit this file to introduce tasks to be run by cron.
# 
# Each task to run has to be defined through a single line
# indicating with different fields when the task will be run
# and what command to run for the task
# 
# To define the time you can provide concrete values for
# minute (m), hour (h), day of month (dom), month (mon),
# and day of week (dow) or use '*' in these fields (for 'any').# 
# Notice that tasks will be started based on the cron's system
# daemon's notion of time and timezones.
# 
# Output of the crontab jobs (including errors) is sent through
# email to the user the crontab file belongs to (unless redirected).
# 
# For example, you can run a backup of all your user accounts
# at 5 a.m every week with:
# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/
# 
# For more information see the manual pages of crontab(5) and cron(8)
#
# Wikimedia Tool Labs specific note:
#   Please be aware that *only* jsub and jstart are acceptable
#   commands to schedule via cron.  Any command specified here will
#   be modified to be invoked through jsub unless it is one of
#   the two.
# 
# m h  dom mon dow   command
END
;

my @crontab;

if($opts{'e'}) {

    my $crontab = '';
    die "$0: usage error: no arguments permitted after this option\n" unless $#ARGV<0;
    if(open OLD, "/usr/bin/ssh <%= @cron_host %> /usr/bin/crontab$dashu -l 2>/dev/null |") {
        $crontab = '';
        while(<OLD>) {
            $crontab .= $_;
        }
        close OLD;
    }
    $crontab = $default_crontab if $crontab eq '';

    my($fh, $filename) = tempfile();
    print $fh $crontab;
    close $fh;

    my $newfile = '';
    system { '/usr/bin/sensible-editor' } 'editor', $filename;

    if(open OLD, $filename) {
        while(<OLD>) {
            push @crontab, $_;
            $newfile .= $_;
        }
        close OLD;
    }
    unlink $filename;
    if($newfile eq $crontab) {
        print "No modification made\n";
        exit 0;
    }

} else {

    while(<>) {
        push @crontab, $_;
    }

    if($#crontab < 0) {
        print STDERR "$0: cowardly refusing to install empty crontab\n";
        print STDERR "$0: use '$0 -r' if you want to remove the crontab\n";
        exit 1;
    }

}

my $crlino = 0;
my $modified = 0;
if(open NEW, "| /usr/bin/ssh <%= @cron_host %> /usr/bin/crontab$dashu -") {
    foreach my $line (@crontab) {
        # Skip comments
        if($line =~ m/^\s*#/) {
            print NEW $line;
            next;
        }
        # Skip environment variables
        if($line =~ m/^\s*\S+\s*=/) {
            print NEW $line;
            next;
        }

        if($line =~ m/^\s*(\S+\s+\S+\s+\S+\s+\S+\s+\S+\s+|\@\S+\s+)([^#\n]*)(#.*)?\n?$/) {
            $crlino++;
            my($sched, $cmd, $cmt) = ($1, $2, $3);
            my $prefix = '';
            if($cmd =~ m/^\s*(cd\s+\S+|\[[^]]*\])\s*(\&\&|;)\s*(.*)/) {
                $prefix = "$1 $2 ";
                $cmd = $3;
            }
            unless($cmd =~ m[^\s*(/usr/(local/)?bin/)?(jsub|jstart|jmail|qsub)\s+]) {
                $cmd = "$prefix/usr/bin/jsub -N cron-$uname-$crlino -once -quiet $cmd";
                $modified = 1;
                $line = "$sched $cmd ";
                $line .= $cmt if defined $cmt;
                $line .= "\n";
            }
        }
        print NEW $line;
    }
    close NEW;
} else {
    die "$0: unable to install new crontab on <%= @cron_host %>\n";
}

if($modified) {
   print STDERR "\nNOTE: some crontab entries have been modified to grid submissions.\n";
   print STDERR "      You may want to examine the result with 'crontab -e'.\n\n";
}

