#!/usr/bin/perl -w
#
#  Copyright © 2013 Marc-André Pelletier <mpelletier@wikimedia.org>
#
#  Permission to use, copy, modify, and/or distribute this software for any
#  purpose with or without fee is hereby granted, provided that the above
#  copyright notice and this permission notice appear in all copies.
#
#  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
#  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
#  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
#  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
#  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
#  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

use Socket;
use File::NFSLock;
use Fcntl qw(LOCK_EX LOCK_NB);

my $scoreboard = "/data/project/.system/dynamic";
my $sockname = "/tmp/sock.portgranter";
my $uaddr = sockaddr_un($sockname);

unlink($sockname);
socket(Server, PF_UNIX, SOCK_STREAM, 0) || die "socket: $!";
bind  (Server, $uaddr)                  || die "bind: $!";
chmod 0666, $sockname;
listen(Server, SOMAXCONN)               || die "listen: $!";

sub spawn {
    my $sock = shift;
    my $coderef = shift;
    my $pid = fork();

    if($pid>0 or not defined $pid) {
        close $sock;
        return $pid;
    }

    exit($coderef->($sock));
}

my $hostname = `hostname`; chomp $hostname;
my %clients;
my @ports;
my $update = 1;

use POSIX ":sys_wait_h";
sub REAPER {
    my $child;
    while( ($child = waitpid(-1, WNOHANG)) > 0 ) {
        if(defined $clients{$child}) {
            my $c = $clients{$child};
            delete $clients{$child};
            $update = 1;
            unshift @ports, $c->{'port'};
        }
    }

    $SIG{CHLD} = \&REAPER;  # loathe SysV
}

$SIG{CHLD} = \&REAPER;


for(my $i=12000; $i<13000; $i++) {
    push @ports, $i;
}

$| = 1;
for(;;)
{
    if($update) {
        if(my $lock = new File::NFSLock {
            file               => "$scoreboard.new",
            lock_type          => LOCK_EX,
            blocking_timeout   => 10,
            stale_lock_timeout => 120,
        }) {
            my @scoreboard;
            if(open SB, "<$scoreboard") {
                while(<SB>) {
                    if(m/^\S+ ([^:]+):[0-9]+$/) {
                        next if $1 eq $hostname;
                    }
                    push @scoreboard, $_;
                }
                close SB;
            }
            foreach my $c (values %clients) {
                push @scoreboard, "$c->{'tool'} $hostname:$c->{'port'}\n";
            }

            if(open SB, ">$scoreboard.new") {
                print SB join '', @scoreboard;
                if(rename "$scoreboard.new", $scoreboard) {
                    $update = 0;
                } else {
                    unlink "$scoreboard.new";
                }
                close SB;
            }
        }
    }

    if($#ports < 0) {
        sleep 1;
        next;
    }

    my $client;
    next unless accept($client, Server);

    my $tool = <$client>;
    my $port = shift @ports;
    chomp $tool;
    print $client "$port\n";

    my $pid = spawn $client, sub {
        my $sock = shift;
        scalar <$sock>;
        close $sock;
        return 0;
    };
    if(defined $pid) {
        $clients{$pid} = {
            pid => $pid,
            tool => $tool,
            port => $port,
        };
        $update = 1;
    }
}

