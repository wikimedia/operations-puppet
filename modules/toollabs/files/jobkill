#! /usr/bin/perl

#use strict;
use Data::Dumper;

die "usage: $0 pid\n" unless $#ARGV == 0;
my $pid = shift @ARGV;
my %procs;
my %children;

sub descs($) {
    return () unless defined $children{$_[0]};
    my @desc;
    foreach my $p (@{$children{$_[0]}}) {
        push @desc, $p, descs($p);
    }
    return @desc;
}

foreach my $pfile (glob "/proc/*") {
    my @stat = stat "$pfile";
    next unless open PF, "<$pfile/stat";
    my $stat = <PF>;
    close PF;
    next unless $stat =~ m/^([0-9]+) \((.*)\) ([RSDZTW]) ([0-9]+) ([0-9]+) /;
    $procs{$1} = {
        cmd => $2, state => $3, ppid => $4,
        pgrp => $5, uid => $stat[4],
    };
    push @{$children{$4}}, $1;
}

my $proc = $procs{$pid};

if($proc->{cmd} eq 'sge_shepherd') {
    exit 0 unless defined $children{$pid} and $#{$children{$pid}} == 0;
    $pid = $children{$pid}->[0];
    $proc = $procs{$pid};
}

my $uid = $proc->{uid};
my $pgrp = $proc->{pgrp};

my @kill;
my @desc = descs $pid;
if($pgrp == $pid) {
    push @kill, -$pgrp;
    foreach my $p (@desc) {
        next if $procs{$p}->{pgrp} == $pgrp;
        push @notpg, $p;
    }
} else {
    push @kill, $pid, @desc;
}
push @desc, $pid;

my @stray;
foreach my $p (keys %procs) {
    if($procs{$p}->{uid} == $uid and $procs{$p}->{ppid} == 1) {
        push @stray, $p, descs $p;
    }
}

sub alive(@) {
    my @al;
    foreach my $p (@_) {
        push @al, $p  if kill 0, $p;
    }
    return @al;
}

kill 'SIGINT', @kill;
sleep 10;
my @left = alive(@desc);
exit 0 if $#left < 0;
kill 'SIGTERM', @kill;
sleep 10;
@left = alive(@desc);
exit 0 if $#left < 0;
kill 'SIGKILL', @desc;
exit 0
