#!/usr/bin/python
import os
import sys
import pwd
import re
import time
import subprocess
import argparse
import errno
import xml.etree.ElementTree as ET
import yaml


def get_queue_name(server):
    """
    Helper function that returns which queue to use for which server

    :param server: Type of server to get queue name for
    :return: String containing queue name to use for given server type
    """
    if server in ('nodejs', 'tomcat', 'uwsgi-python'):
        return 'webgrid-generic'
    return 'webgrid-' + server


def read_file(path, default=None):
    """
    Helper function to return contents of file if it exists, or a default value.

    :param path: Path to file to read from
    :param default: Value to return if the file does not exist
    :return: String containing either contents of the file, or default value
    """
    try:
        with open(path) as f:
            return f.read()
    except IOError as e:
        if e.errno == errno.ENOENT:
            return default
        raise


def start_web_job(server, release):
    """
    Submits a job to the grid, running a particular server, for current user

    :param server: Server type to start job as. Current options are lighttpd and tomcat
    """
    command = ['qsub',
               '-e', '%s/error.log' % HOME,
               '-o', '%s/error.log' % HOME,
               '-i', '/dev/null',
               '-q', get_queue_name(server),
               '-l', 'h_vmem=%s,release=%s' % (MEMLIMIT, release),
               '-b', 'y',
               '-N', '%s-%s' % (server, TOOL),
               '/usr/local/bin/tool-%s' % server]
    subprocess.check_call(command, stdout=open(os.devnull, 'wb'))


def stop_job(job):
    """
    Deletes a job from the grid

    :param job: Job to delete
    """
    job_id = job.findtext('.//JB_job_number')
    command = ['qdel', job_id]
    subprocess.check_call(command, stdout=open(os.devnull, 'wb'))


def get_job_xml(job_name):
    """
    Gets job status xml of a particular job with a particular name in a particular queue

    :param job_name:  Job name to look for
    :return: ET xml object if the job is found, None otherwise
    """
    output = subprocess.check_output(['qstat', '-xml'])

    # Fix XML.
    output = re.sub('JATASK:[^>]*', 'jatask', output)

    # GE is stupid.
    # Returns output like:
    # <><ST_name>blah</ST_name></>
    # If the job is not found.
    if '<unknown_jobs' in output and '<>' in output:
        return None
    xml = ET.fromstring(output)
    job_name_node = xml.find('.//job_list[JB_name="%s"]' % job_name)
    return job_name_node


def wait_for_job_running(job_name):
    """
    Waits for a job to be either up, printing .s while waiting

    :param job_name: Name of job to look for
    """
    for i in xrange(30):
        job = get_job_xml(job_name)
        state = job.findtext('.//state') if job is not None else None
        if job is None or 'r' not in state:
            sys.stdout.write('.')
            sys.stdout.flush()
            time.sleep(1)
        else:
            break
    else:
        # The loop ended without job being started
        sys.stderr.write('Timeout: could not start job in 30s')
        sys.exit(1)


def wait_for_job_stopped(job_name):
    """
    Waits for a job to be either down, printing .s while waiting

    :param job_name: Name of job to look for
    """
    for i in xrange(30):
        job = get_job_xml(job_name)
        if job is not None:
            sys.stdout.write('.')
            sys.stdout.flush()
            time.sleep(1)
        else:
            break
    else:
        # The loop ended without job being stopped
        sys.stderr.write('Timeout: could not stop job in 30s')
        sys.exit(1)

# Setup constants that we would need later on
PREFIX = read_file('/etc/wmflabs-project', 'tools').strip()  # project name

pwd_entry = pwd.getpwuid(os.getuid())
USER = pwd_entry.pw_name
HOME = pwd_entry.pw_dir

# Ensure that we are indeed a tool.
if not USER.startswith(PREFIX + '.'):
    sys.stderr.write('Only tool accounts have web services.\n')
    sys.exit(1)
TOOL = USER[len(PREFIX) + 1:]

# Read memlimit customizations for individual tools, set by
# admins for tools that require more than usual memory limits.
MEMLIMIT = read_file(
    os.path.join(
        '/data/project/.system/config/',
        '%s.web-memlimit' % TOOL
    ), '4g'
).strip()


def get_service_defaults():
    """
    Return default webservice type.

    If service.manifest exists, read from it.
    Else, trusty lighttpd for you!
    """
    try:
        with open(os.path.expanduser('~/service.manifest')) as f:
            manifest = yaml.load(f)
            if manifest is not None and 'web' in manifest:
                web = manifest['web']
                if web == 'lighttpd-precise':
                    return 'lighttpd', 'precise'
                else:
                    return web, 'trusty'
    except IOError as e:
        if e.errno != errno.ENOENT:  # File not found
            raise
    return 'lighttpd', 'trusty'



def update_service_manifest(webservice_type):
    """
    Update the current tool's service manifest to specify the currently started / stopped web service type

    :param webservice_type: string representing webservice type (lighttpd, lighttpd-precise, nodejs, uwsgi-python)
                            or None to represent lack of a webservice (will result in web: being removed)
    """
    with open(os.path.expanduser('~/service.manifest'), 'wb+') as f:
        manifest = yaml.load(f)
        if manifest is None:
            manifest = {}
        if webservice_type is None:
            if 'web' in manifest:
                del manifest['web']
        else:
            manifest['web'] = webservice_type
        if manifest == {}:
            f.write('')
        else:
            yaml.dump(manifest, f, default_flow_style=False)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('server', help='Type of server to start',
                        choices=['lighttpd', 'tomcat', 'uwsgi-python', 'nodejs'],
                        nargs='?')
    parser.add_argument('action', help='Action to perform',
                        choices=['stop', 'start', 'restart', 'status'])
    parser.add_argument('--release',
                        help='Which Ubuntu release the node running the webservice sould be on',
                        choices=['precise', 'trusty'])

    # Compat with 'old style' webservice params, which were '-lighttpd' and '-tomcat'
    # Only support lighttpd and tomcat because old webservice only supported those
    # FIXME: Instrument this, get rid of old style callers, and get rid of this hack
    hacked_args = [arg.strip('-') if arg in ('-lighttpd', '-tomcat') else arg
                   for arg in sys.argv[1:]]
    args = parser.parse_args(hacked_args)

    if args.release is None or args.server is None:
        server, release = get_service_defaults()
        args.release = release if args.release is None else args.release
        args.server = server if args.server is None else args.server

    # No precise support for anything other than lighttpd
    if args.release == 'precise' and args.server != 'lighttpd':
        print 'Running on Ubuntu Precise only available for lighttpd servers'
        sys.exit(-1)

    job_name = '%s-%s' % (args.server, TOOL) # Format for job names. one tool can have only one job running on webgrid

    job = get_job_xml(job_name)

    # Only lighttpd has precise support
    # Start modifying service.manifest files!1!
    webservice_type = args.server if args.release != 'precise' else 'lighttpd-precise'

    if args.action == 'start':
        if job is not None:
            print 'Your webservice is already running'
            exit()
        start_web_job(args.server, args.release)
        print 'Starting web service',
        wait_for_job_running(job_name)
        update_service_manifest(webservice_type)
    elif args.action == 'stop':
        if job is None:
            print 'Your webservice is not running'
            exit()
        stop_job(job)
        print 'Stopping web service',
        wait_for_job_stopped(job_name)
        update_service_manifest(None)
    elif args.action == 'restart':
        if job is not None:
            print 'Restarting',
            stop_job(job)
            wait_for_job_stopped(job_name)
            start_web_job(args.server, args.release)
            wait_for_job_running(job_name)
        else:
            print 'Webservice not running, starting',
            start_web_job(args.server, args.release)
            wait_for_job_running(job_name)
    elif args.action == 'status':
        if job is None:
            print 'Your webservice is not running',
        else:
            print 'Your webservice is running',
    print  # Extra newline at the end, since we're not outputting newlines by default elsewhere

if __name__ == '__main__':
    main()
