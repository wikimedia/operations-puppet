# Note: This file is managed by Puppet.

#
# see kafka.server.KafkaConfig for additional details and defaults
#

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
brokerid=<%= brokerid %>

# Hostname the broker will advertise to consumers. If not set, kafka will use the value returned
# from InetAddress.getLocalHost().  If there are multiple interfaces getLocalHost
# may not be what you want.
#hostname=


############################# Socket Server Settings #############################

# The port the socket server listens on
port=<%= port %>

# The number of processor threads the socket server uses for receiving and answering requests. 
# Defaults to the number of cores on the machine
<%= @num_threads ? "num.threads=#{num_threads}" : "#num_threads=" %>

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer=<%= socket_send_buffer %>

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer=<%= socket_receive_buffer %>

# The maximum size of a request that the socket server will accept (protection against OOM)
max.socket.request.bytes=<%= max_socket_request_bytes %>


############################# Log Basics #############################

# The directory under which to store log files
log.dir=<%= log_dir %>

# The number of logical partitions per topic per server. More partitions allow greater parallelism
# for consumption, but also mean more files.
num.partitions=<%= num_partitions %>

# Overrides for for the default given by num.partitions on a per-topic basis
#topic.partition.count.map=topic1:3, topic2:4

############################# Log Flush Policy #############################

# The following configurations control the flush of data to disk. This is the most
# important performance knob in kafka.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data is at greater risk of loss in the event of a crash.
#    2. Latency: Data is not made available to consumers until it is flushed (which adds latency).
#    3. Throughput: The flush is generally the most expensive operation. 
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
log.flush.interval=<%= log_flush_interval %>

# The maximum amount of time a message can sit in a log before we force a flush
log.default.flush.interval.ms=<%= log_default_flush_interval_ms %>

# Per-topic overrides for log.default.flush.interval.ms
#topic.flush.intervals.ms=topic1:1000, topic2:3000

# The interval (in ms) at which logs are checked to see if they need to be flushed to disk.
log.default.flush.scheduler.interval.ms=<%= log_default_flush_scheduler_interval_ms %>

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion
log.retention.hours=<%= log_retention_hours %>

# A size-based retention policy for logs. Segments are pruned from the log as long as the remaining
# segments don't drop below log.retention.size.
log.retention.size=<%= log_retention_size %>

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.file.size=<%= log_file_size %>

# The interval at which log segments are checked to see if they can be deleted according 
# to the retention policies
log.cleanup.interval.mins=<%= log_cleanup_interval_mins %>

############################# Zookeeper #############################

<% if @zookeeper_hosts -%>
# Enable connecting to zookeeper
enable.zookeeper=true

# Zk connection string (see zk docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
zk.connect=<%= zookeeper_hosts.join(',') %>

# Timeout in ms for connecting to zookeeper
zk.connectiontimeout.ms=<%= zookeeper_connectiontimeout_ms %>

<% else -%>
# Disable connecting to zookeeper
enable.zookeeper=false
<% end %>
