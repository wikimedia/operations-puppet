# == Define: ca::certs
#
# Installs keystores and/or keyfiles generated by ca-manager using
# puppet secret().
#
# === Usage
#   ca::certs { 'cassandra/services/restbase1007':
#       destination    => '/etc/cassandra/tls',
#       local_name     => 'server',
#       owner          => 'cassandra',
#   }
#
#   ca::certs { 'kafka/main/kafka1001.eqiad.wmnet':
#       destination    => '/etc/kafka/tls'
#       owner          => 'kafka',
#   }
#
#   ca::certs { 'kafka/main/eventbus':
#       destination    => '/etc/eventbus/tls',
#       # Need pem files for python kafka client, but not Java keystore files.
#       pem_files      => true,
#       keystore_files => false,
#       owner          => 'eventlogging',
#   }
#
# === Parameters
#
# [*title*]
#   The secrets path to the ca-manager keys directory.
#   e.g. 'cassandra/services/restbase1007'.  'restbase1007' here
#   is the certificate we want to distribute.
#
# [*keystore_files*]
#   Distribute java keystore (.jks) files.  Default: true
#
# [*pem_files*]
#   Distribute .pem format key files.  Default: false
#
# [*destination*]
#   Destination directory for distributed cert and key files.  This
#   directory is fully managed by Puppet, so any files in this directory
#   that Puppet doesn't know about will be deleted.
#
# [*local_name*]
#   Rename the source key name to this when distributing.
#   E.g. $title = cassandra/services/restbase1007, the default local name for
#   this key will be 'restbase1007'.  Setting $local_name will override this.
#   Default: undef
#
# [*owner*]
#   Default: root
#
# [*group*]
#   Default: root
#
define ca::certs(
    $destination,
    $java_keystore = true,
    $pem_files     = false,
    $local_name    = undef,
    $owner         = 'root',
    $group         = $owner,
) {


    # cassandra/services/restbase1007: $source_name = restbase1007
    $source_name = basename($title)

    # If $local_key_name not provided, default to $source_name.
    $_local_name = $local_name ? {
        undef   => $source_name,
        default => $local_name,
    }

    # Base secret path is the directory above where this
    # particular key was generated.
    # E.g. cassandra/services/restbase1007: $base_secret_path = cassandra/services.
    # This is to build the secrets path, and should be equivalent
    # to the base_directory (in the private secrets module) as provided
    # to ca-manager manifest config when the key files were generated.
    $base_secret_path = dirname($title)

    # Default subsequent file resources with these.
    File {
        owner => $owner,
        group => $group,
        mode  => '0400',
    }

    file { $destination:
        ensure  => 'directory',
        mode    => '0500',
        # Puppet will fully manage this directory.  Any files in
        # this directory that are not managed by puppet will be deleted.
        recurse => true,
        purge   => true,
    }

    if $keystore_files {
        # Java Keystore
        file { "${destination}/${_local_name}.jks":
            content => secret("${base_secret_path}/${source_name}/${source_name}.jks"),
            require => File[$destination],
        }

        # Java CA trust keystore
        file { "${destination}/truststore.jks":
            content => secret("${base_secret_path}/truststore.jks"),
            require => File[$destination],
        }
    }

    if $pem_files {
        # Public Certificate in .pem format
        file { "${destination}/${_local_name}.crt":
            content => secret("${base_secret_path}/${source_name}/${source_name}.crt"),
            require => File[$destination],
        }

        # Private key in .pem format
        file { "${destination}/${_local_name}.key":
            content => secret("${base_secret_path}/${source_name}/${source_name}.key"),
            require => File[$destination],
        }

        # CA Certificate
        file { "${destination}/rootCa.crt":
            content => secret("${base_secret_path}/rootCa.crt"),
            require => File[$destination],
        }
    }
}