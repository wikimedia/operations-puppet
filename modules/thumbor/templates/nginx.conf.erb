<%- if scope.lookupvar('::nginx::variant') == 'extras' -%>
lua_shared_dict prometheus_metrics 10M;
lua_package_path "/etc/nginx/prometheus.lua";

init_by_lua '
  duration_buckets = {0.01, 0.05, 0.1, 0.120, 0.140, 0.160, 0.180, 0.2, 0.5, 0.75, 1, 5, 10, 35, 65, 120, 180}
  prometheus = require("prometheus").init("prometheus_metrics")
  metric_requests = prometheus:counter(
    "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
  metric_latency = prometheus:histogram(
    "nginx_http_request_duration_seconds", "HTTP request latency", {"host"}, duration_buckets)
  metric_connections = prometheus:gauge(
    "nginx_http_connections", "Number of HTTP connections", {"state"})
';

log_by_lua '
  local host = ngx.var.host:gsub("^www.", "")
  metric_requests:inc(1, {host, ngx.var.status})
  metric_latency:observe(ngx.now() - ngx.req.start_time(), {host})
';
<%- end -%>

upstream thumbor {
    least_conn;

    <%- @ports.each do |port| -%>
    server 127.0.0.1:<%= port -%>;
    <%- end -%>
}

server {
    listen <%= @listen_port %>;

    location / {
        ssi on;
        # Nginx uses chunked encoding for 404s, which rewrite.py can't handle properly,
        # sending a malformed response to Varnish.
        chunked_transfer_encoding off;
        # We want swift to rotate between thumbor instances, not stick to one. This disables
        # keep-alive client connections.
        keepalive_timeout 0;
        proxy_redirect off;
        proxy_buffering off;
        proxy_pass http://thumbor;
        # fallback to the next upstream at most once
        proxy_next_upstream error timeout invalid_header http_502 http_504;
        proxy_next_upstream_tries 2;
        # Maximum pause between read operations. Thumbor stays silent while it processes
        # images, which means that this should be higher than the Thumbor processing total time limit
        proxy_read_timeout 180;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Request-Date $date_gmt;
        add_header X-Upstream $upstream_addr;
    }

<%- if scope.lookupvar('::nginx::variant') == 'extras' -%>
    location /metrics {
        content_by_lua '
            metric_connections:set(ngx.var.connections_reading, {"reading"})
            metric_connections:set(ngx.var.connections_waiting, {"waiting"})
            metric_connections:set(ngx.var.connections_writing, {"writing"})
            prometheus:collect()
        ';
    }
<%- end -%>
}
