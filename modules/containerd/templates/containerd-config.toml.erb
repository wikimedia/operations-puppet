# SPDX-License-Identifier: Apache-2.0
# This is based on the config shipped with the containerd package in Debian (1.6.20~ds1-1+b1)
#
# All possible config values including their defaults can be found by running:
# containerd config default
version = 2

[plugins]
  [plugins."io.containerd.grpc.v1.cri"]
    # Define our sandbox image
    sandbox_image = "<%= @sandbox_image %>"
    # By default docker does set net.ipv4.ip_unprivileged_port_start=0 allowing containers to bind to ports
    # below 1024 without explicit NET_BIND_SERVICE capability.
    # It also sets net.ipv4.ping_group_range="0 2147483647", allowing ICMP sockets without CAP_NET_RAW.
    # The following two options ensure compatibility with current workloads.
    #
    # enable_unprivileged_ports configures net.ipv4.ip_unprivileged_port_start=0
    # for all containers which are not using host network and if it is not overwritten by PodSandboxConfig
    # Note that currently default is set to disabled but target change it in future, see:
    # https://github.com/kubernetes/kubernetes/issues/102612
    enable_unprivileged_ports = true
    # enable_unprivileged_icmp configures net.ipv4.ping_group_range="0 2147483647"
    # for all containers which are not using host network, are not running in user namespace and if it is not
    # overwritten by PodSandboxConfig.
    # Note that currently default is set to disabled but target change it in future together with enable_unprivileged_ports
    enable_unprivileged_icmp = true
    [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
      # Re-define the runtime type as defining runc.options would shadow the default setting.
      # Without this kubelet will fail to run containers with the following error:
      # failed to create containerd container: create container failed validation: container.Runtime.Name must be set: invalid argument
      runtime_type = "io.containerd.runc.v2"
      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
        # With cgroup v2 we need to use the systemd cgroup driver
        SystemdCgroup = true
    # If dragonfly is enabled, configure the local dfget as registry mirror
    # https://d7y.io/docs/v2.0.2/setup/runtime/containerd/mirror
    <%- if @dragonfly_enabled -%>
    [plugins."io.containerd.grpc.v1.cri".registry.mirrors."docker-registry.discovery.wmnet"]
      endpoint = ["https://127.0.0.1:65001","https://docker-registry.discovery.wmnet"]
    <%- end -%>
    <%- if @registry_auth -%>
    # NOTE: registry.configs.*.auth is DEPRECATED and will NOT have an equivalent way to store unencrypted secrets in the host
    # configuration files. However, it will not be removed until a suitable secret management alternative is available as a plugin.
    # It remains supported in 1.x releases, including the 1.6 LTS release.
    # Source: https://github.com/containerd/containerd/blob/main/docs/cri/registry.md
      <%- if @dragonfly_enabled -%>
    [plugins."io.containerd.grpc.v1.cri".registry.configs."127.0.0.1:65001".auth]
      auth = "<%= @registry_auth %>"
      <%- end -%>
    [plugins."io.containerd.grpc.v1.cri".registry.configs."docker-registry.discovery.wmnet".auth]
      auth = "<%= @registry_auth %>"
    <%- end -%>
  [plugins."io.containerd.internal.v1.opt"]
    # Debian overrides path from /opt/containerd
    path = "/var/lib/containerd/opt"