#!/usr/bin/python
#
# Copyright (c) 2014 Jeff Green <jgreen@wikimedia.org>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is furnished to do
# so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
import argparse
import json
import requests
import sys

class HTTPError(Exception):
	pass

def parse_arguments():
	"""parse command line arguments into various thresholds
	:returns: dict containing validated arguments
	"""
	parser = argparse.ArgumentParser(
			formatter_class=argparse.RawDescriptionHelpFormatter,
			description='Online Content Generator health check plugin for Nagios',
			epilog="example:\n  check_ocg_health --wjs 75000 --cjs 100000 --wrj 10000 --crj 20000\n",
		)
	parser.add_argument('--wjs', type=int, help='job status queue critical threshold (integer)')
	parser.add_argument('--cjs', type=int, help='job status queue warning threshold (integer)')
	parser.add_argument('--wrj', type=int, help='render jobs queue warning threshold (integer)')
	parser.add_argument('--crj', type=int, help='render jobs queue critical threshold (integer)')
	parser.add_argument('--url', help='OCG health check URI (%(default)s)',
			default='http://localhost:8000/?command=health'
		)
	try:
		args = parser.parse_args()
	except SystemExit:
		sys.exit(1) # trigger a nagios warning
	return args

def poll_ocg_server(url):
	"""make an http request to OCG server and parse JSON response data
	:param url: URL for the OCG health status JSON report
	:returns: dict containing the parsed JSON data
	"""
	try:
		r = requests.get(url, timeout=5)
	except requests.exceptions.RequestException as e:
		raise HTTPError("connection error: %s" % e)
	if r.status_code != 200:
		raise HTTPError("http status %s" % r.status_code)
	try:
		json_data = r.json()
	except:
		raise ValueError("failed to parse json data from %s" % url)
	return json_data

def check_queue_message_count(cth, wth, qd):
	"""check the server-reported message queue size against alert thresholds
	:param cth: message count critical threshold, an integer
	:param wth: message count warning threshold, an integer
	:returns: status, result
	"""
	result = str(qd[u'name']) + ' ' + str(qd[u'length']) + ' msg'
	if cth and qd[u'length'] >= cth:
		result += ' (>=' +str(cth) + ' critical)'
		status = 2
	elif wth and qd[u'length'] >= wth:
		result += ' (>=' +str(wth) + ' warning)'
		status = 1
	else:
		status = 0
	return status, result

def run_checks(args, data):
	"""loop through a list of individual results, return the highest alert and report text
	:param args: dict containing santized command line arguments
	:param data: dict containing OCG server report data
	:returns: max_alert, report_blob
	"""
	raw_results = []
	try:
		raw_results.append(check_queue_message_count( qd=data[u'StatusObjects'], cth=args.cjs, wth=args.wjs ))
		raw_results.append(check_queue_message_count( qd=data[u'JobQueue'], cth=args.crj, wth=args.wrj ))
	except:
		raw_results.append([1,"some report data didn't process successfully!"])
	previous = None
	max_alert = None
	result_list = []
	for status, result in raw_results:
		max_alert = max(previous, status)
		result_list.append(result)
		previous = max_alert
	report_blob = ': '.join(result_list)
	return max_alert, report_blob

def main():
	"""fetches arguments, poll ocg daemon, produce report, trigger nagios alert"""
	args = parse_arguments()
	try:
		data = poll_ocg_server(args.url)
	except HTTPError as e:
		report = str(e)
		exit_status = 2
	except Exception as e:
		report = str(e)
		exit_status = 1
	else:
		exit_status, report = run_checks(args, data)
	if exit_status == 2:
		print "CRITICAL: %s" % report
	elif exit_status == 1:
		print "WARNING: %s" % report
	else:
		print "OK: %s" % report
	sys.exit(exit_status)

if __name__ == "__main__":
	main()
