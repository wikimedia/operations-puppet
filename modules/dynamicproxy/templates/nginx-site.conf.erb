# Copyright 2020-2024 Wikimedia Foundation and contributors
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Top-level config needs to go to nginx.conf.erb, not here!

server {
    resolver <%= @resolver %>;

    # Serve both HTTP and HTTPS
    listen 443 ssl http2;
    server_name *.<%= @fqdn %>;

    ssl_certificate /etc/acmecerts/<%= @zone['acmechief_cert'] %>/live/rsa-2048.chained.crt;
    ssl_certificate_key /etc/acmecerts/<%= @zone['acmechief_cert'] %>/live/rsa-2048.key;

    # Copied from modules/tlsproxy/templates/nginx.conf.erb. Eugh
    # Enable a shared cache, since it is defined at this level
    # it will be used for all virtual hosts. 1m = 4000 active sessions,
    # so we are allowing 200,000 active sessions.
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 5m;

    <%= @ssl_settings.join("\n    ") %>

    # http -> https redirects handled by separate server block above.
    # T120486: 366 days
    add_header Strict-Transport-Security "max-age=31622400" always;

    # Some projects have tools that take data in and process them
    # for a long time. While ideally they should be made async, this
    # is an interim solution that works for now.
    # This is doubly important for websockets
    proxy_read_timeout 3600s;

    # People upload large files, and that is okay.
    # We can make this larger if need be.
    client_max_body_size 2048m;

    # To avoid being overwhelmed by large file uploads, disable buffering
    proxy_request_buffering off;

    # To avoid being overwhelmed by large downloads, disable file buffering
    # note that buffering on is the default, we just explicitly state it for clarity
    # we set the temp_file_size to 0 to disable using temporary files
    proxy_buffering on;
    proxy_max_temp_file_size 0;

    # And support HTTP 1.1 for the backend connection. This means that clients using
    # chunked transfer encoding will not be buffered as long as the backend server
    # also supports that.
    proxy_http_version 1.1;

    # See http://www.gnuterrypratchett.com/
    add_header X-Clacks-Overhead "GNU Terry Pratchett" always;
    # T353589: Opt-out of Google's "topics" interest-based advertising system
    add_header Permissions-Policy "browsing-topics=()" always;
    proxy_hide_header Permissions-Policy;

    # Protect against http://httpoxy.org/
    # This is enough, since we aren't running any cgi/fastcgi directly from
    # this nginx. We just want to protect downstream users who might be
    proxy_set_header Proxy "";

    # Block clients that do not behave well
    # OruxMaps is flooding our tileserver with requests
    if ($http_user_agent ~ "OruxMaps.*")  { # T97841
        return 403;
    }

    <% if @blocked_user_agent_regex != "" %>
    if ($http_user_agent ~* "<%= @blocked_user_agent_regex -%>") {
        return 403 "Blocked user agent";
    }
    <% end -%>

    <% if @blocked_referer_regex != "" %>
    if ($http_referer ~* "<%= @blocked_referer_regex -%>") {
        return 403 "Blocked referer";
    }
    <% end -%>

    location /.error/ {
        alias /var/www/error/;
        default_type text/html;
    }

    # A block like this is needed for anything used as a rewrite target.
    # An `error_page` directive to the HTML directly is enough for most
    # error pages.
    location /.error/banned/ {
        error_page 403 /.error/banned.html;
        return 403;
    }

    location / {
        if ($bad_user) {
            rewrite ^ /.error/banned/;
        }

        # NOTE: These error_page directives only apply to errors
        # generated by this Nginx instance (and not to those proxied
        # from the backends) as proxy_intercept_errors defaults to no.
        # Our access_by_lua_file script should return a 404 status when
        # no proxy has been configured for the current $http_host.
        error_page 404 /.error/noproxy.html;
        error_page 429 /.error/ratelimit.html;
        error_page 502 503 504 /.error/unreachable.html;

        set $backend '';
        set $vhost '';

        access_by_lua_file /etc/nginx/lua/domainproxy.lua;

        proxy_pass $backend;
        proxy_set_header Host $vhost;

        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        # Conditionally passes client's IP to the backend
        proxy_set_header X-Forwarded-For $xff;
    }

    location /.well-known/healthz {
        return 200 'proxy ok!';
    }

    limit_req zone=cloudvps burst=<%= @rate_limit_requests %> nodelay;

    # GZIP (ALMOST) ALL THE THINGS!
    gzip on;
    gzip_proxied any;
    gzip_types text/plain text/css text/xml application/json application/javascript application/x-javascript text/javascript;
}
# vim:sw=4:ts=4:sts=4:et:ft=nginx
