<%#- SPDX-License-Identifier: Apache-2.0 -%>
<%- cas_version = Gem::Version.new(@facts.fetch('cas_version', '0.a')) -%>
# Without the following line we seem to have 5-15 sec lag for most requests
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration
<%- if @spring_password -%>
spring.security.user.name=<%= @spring_username %>
spring.security.user.password=<%= @spring_password %>
<%- end -%>
server.ssl.enabled=<%= @server_enable_ssl %>
<%- if @server_enable_ssl -%>
server.ssl.key-store-file:<%= @keystore_path %>
server.ssl.key-store-password=<%= @keystore_password %>
server.ssl.key-password=<%= @key_password %>
<%- end -%>
server.port=<%= @server_port %>
server.servlet.context-path=<%= @server_prefix %>
cas.server.name=<%= @server_name %>
<%#- We strip trailing slashes here as it can causes issues with auto generated urls -%>
cas.server.prefix=<%= @server_name %><%= @server_prefix.sub(/\/$/, '') %>
server.tomcat.basedir=<%= @tomcat_basedir %>
<%- if @tomcat_proxy -%>
# we proxy from nginx over localhost
server.tomcat.remoteip.internal-proxies=127\\.0\\.0\\.1
management.endpoints.web.base-path=/api

<%- if cas_version >= Gem::Version.new('6.6') -%>
cas.server.tomcat.http[0].enabled=false
<%- else -%>
cas.server.tomcat.http.enabled=false
<%- end -%>
cas.server.tomcat.http-proxy.enabled=true
cas.server.tomcat.http-proxy.secure=true
cas.server.tomcat.http-proxy.scheme=https
cas.server.tomcat.http-proxy.protocol=HTTP/1.1
<%- end -%>


management.endpoints.web.exposure.include=<%= @actuators.join(',') %>
<% @actuators.each do |actuator| -%>
management.endpoint.<%= actuator %>.enabled=true
<% end -%>

<%- if @actuators.include?('prometheus') and !@prometheus_ips.empty? %>
management.metrics.tags.application=${spring.application.name}
management.metrics.export.prometheus.enabled=true
cas.monitor.endpoints.endpoint.prometheus.access[0]=IP_ADDRESS
cas.monitor.endpoints.endpoint.prometheus.required-ip-addresses[0]=::1,127.0.0.1,<%= @prometheus_ips.join(',') %>
<%- end -%>

# This only returns a result for a session of an authenticated
# users, so the lack of access control doesn't leak anything
# AUTHENTICATED would be better fit, but it seems broken; it
# redirects to a non-existing /adminlogin URL instead of the
# IDP login page
<%- if @actuators.include?('sso') -%>
cas.monitor.endpoints.endpoint.sso.access=ANONYMOUS
<%- end -%>

<%- if @actuators.include?('ssoSessions') -%>
cas.monitor.endpoints.endpoint.ssoSessions.access[0]=IP_ADDRESS
cas.monitor.endpoints.endpoint.ssoSessions.required-ip-addresses=::1,127.0.0.1,<%= @idp_ips.join(',') %>
<%- end -%>

cas.service-registry.json.location=file:<%= @services_dir %>
logging.config: file:/etc/cas/config/log4j2.xml
logging.level.org.apereo=<%= @log_level %>

cas.authn.accept.users=

cas.ticket.tgt.remember-me.enabled=true
cas.ticket.tgt.remember-me.time-to-kill-in-seconds=<%= @max_rememberme_session_length %>
cas.ticket.tgt.primary.time-to-kill-in-seconds=<%= @session_inactivity_timeout %>
cas.ticket.tgt.primary.max-time-to-live-in-seconds=<%= @max_session_length %>

cas.tgc.same-site-policy=<%= @tgc_cookie_same_site %>
cas.tgc.pin-to-session=<%= @tgc_cookie_pin_to_session.to_s %>

<%- if @enable_ldap -%>
cas.authn.ldap[0].principal-attribute-list=<%= @ldap_attribute_list.join(',') %>
cas.authn.ldap[0].type=<%= @ldap_auth %>
cas.authn.ldap[0].connection-strategy=<%= @ldap_connection %>
cas.authn.ldap[0].ldapurl=<%= @ldap_uris.join(' ') %>
cas.authn.ldap[0].use-start-tls=<%= @ldap_start_tls %>
cas.authn.ldap[0].basedn=<%= @ldap_base_dn %>
cas.authn.ldap[0].search-filter=<%= @ldap_search_filter %>
cas.authn.ldap[0].binddn=<%= @ldap_bind_dn %>
cas.authn.ldap[0].bindcredential=<%= @ldap_bind_pass %>
<%- end -%>


<%- if @enable_u2f -%>
cas.authn.mfa.triggers.principal.global-principal-attribute-predicate.location=file:<%= @groovy_file %>
  <%- if @u2f_signing_key -%>
cas.authn.mfa.u2f.crypto.signing.key=<%= @u2f_signing_key %>
  <%- end -%>
  <%- if @u2f_encryption_key -%>
cas.authn.mfa.u2f.crypto.encryption.key=<%= @u2f_encryption_key %>
  <%- end -%>
  <%- if @u2f_jpa_enable -%>
cas.authn.mfa.u2f.jpa.user=<%= @u2f_jpa_username %>
cas.authn.mfa.u2f.jpa.password=<%= @u2f_jpa_password %>
cas.authn.mfa.u2f.jpa.driver-class=org.mariadb.jdbc.Driver
<%# dont't bother with ssl if db is local (cloud) %>
cas.authn.mfa.u2f.jpa.url=jdbc:mysql://<%= @u2f_jpa_server %>/<%= @u2f_jpa_db %><% unless @u2f_jpa_server == '127.0.0.1' %>?useSSL=true&disableSslHostnameVerification=true<% end %>
cas.authn.mfa.u2f.jpa.dialect=org.hibernate.dialect.MariaDBDialect
  <%- end -%>

  <%- if @u2f_token_expiry_days -%>
cas.authn.mfa.u2f.core.expire-devices=<%= @u2f_token_expiry_days %>
cas.authn.mfa.u2f.core.expire-devices-time-unit=DAYS
  <%- end -%>
<%- end -%>
<% if @tgc_signing_key %>cas.tgc.crypto.signing.key=<%= @tgc_signing_key %><% end %>
<% if @tgc_encryption_key %>cas.tgc.crypto.encryption.key=<%= @tgc_encryption_key %><% end %>
<% if @webflow_signing_key %>cas.webflow.crypto.signing.key=<%= @webflow_signing_key %><% end %>
<% if @webflow_encryption_key %>cas.webflow.crypto.encryption.key=<%= @webflow_encryption_key %><% end %>

<%- if cas_version >= Gem::Version.new('6.6') -%>
<% if @web_authn_signing_key %>cas.authn.mfa.web-authn.crypto.signing.key=<%= @web_authn_signing_key %><% end %>
<% if @web_authn_encryption_key %>cas.authn.mfa.web-authn.crypto.encryption.key=<%= @web_authn_encryption_key %><% end %>
<% if @oauth_crypto_signing_key %>cas.authn.oauth.crypto.signing.key=<%= @oauth_crypto_signing_key %><% end %>
<% if @oauth_crypto_encryption_key %>cas.authn.oauth.crypto.encryption.key=<%= @oauth_crypto_signing_key %><% end %>
<% if @oauth_token_signing_key %>cas.authn.oauth.access-token.crypto.signing.key=<%= @oauth_token_signing_key %><% end %>
<% if @oauth_token_encryption_key %>cas.authn.oauth.access-token.crypto.encryption.key=<%= @oauth_token_signing_key %><% end %>
<%- end -%>

<%- if @tomcat_version == 'tomcat10' -%>
cas.authn.oauth.session-replication.cookie.crypto.encryption.key=<%= @oauth_session_encryption_key %>
cas.authn.oauth.session-replication.cookie.crypto.signing.key=<%= @oauth_session_signing_key %>
cas.authn.pac4j.core.session-replication.cookie.crypto.encryption.key=<%= @authn_pac4j_encryption_key %>
cas.authn.pac4j.core.session-replication.cookie.crypto.signing.key=<%= @authn_pac4j_signing_key %>
<%- end -%>

<%- if @memcached_enable -%>
cas.ticket.registry.memcached.servers=<%= @memcached_server %>:<%= @memcached_port %>
cas.ticket.registry.memcached.transcoder=<%= @memcached_transcoder %>
<%- end -%>

<%- if @redis_enable -%>
cas.ticket.registry.redis.enabled=true
cas.ticket.registry.redis.cluster.nodes[0].host=<%= @redis_server %>
cas.ticket.registry.redis.cluster.nodes[0].port=<%= @redis_port %>
<%- else -%>
cas.ticket.registry.redis.enabled=false
<%- end -%>

<%- if @enable_cors -%>
cas.http-web-request.cors.enabled=true
cas.http-web-request.cors.allow-credentials=<%= @cors_allow_credentials.to_s %>
<%# if cors is enabled but no origins provided allow all origins %>
  <%- if @cors_allowed_origins.empty? -%>
cas.http-web-request.cors.allow-origins[0]=*
  <%- else -%>
    <%- @cors_allowed_origins.each_with_index do |origin, idx| -%>
cas.http-web-request.cors.allow-origins[<%= idx %>]=<%= origin %>
    <%- end -%>
  <%- end -%>
  <%- if @cors_allowed_headers.empty? -%>
cas.http-web-request.cors.allow-headers[0]=*
  <%- else -%>
    <%- @cors_allowed_headers.each_with_index do |header, idx| -%>
cas.http-web-request.cors.allow-headers[<%= idx %>]=<%= header %>
    <%- end -%>
  <%- end -%>
  <%- @cors_allowed_methods.each_with_index do |method, idx| -%>
cas.http-web-request.cors.allow-methods[<%= idx %>]=<%= method %>
  <%- end -%>
<%- end -%>

<%- provider_count = Hash.new(0) -%>
<%- @delegated_authenticators.each do |delegate| -%>
  <%- delegate.each_pair do |key, value| -%>
    <%- next if key == 'provider' -%>
cas.authn.pac4j.<%= delegate['provider'] %>[<%= provider_count[delegate['provider']] %>].<%= key.tr('_', '-') %>=<%= value %>
  <%- end -%>
 <%- provider_count[delegate['provider']] += 1 -%>
<%- end -%>

cas.authn.oidc.core.issuer=<%= @server_name %><%= @server_prefix.sub(/\/$/, '') %>/oidc
cas.authn.oidc.core.accepted-issuers-pattern=<%= @oidc_issuers_pattern %>
cas.authn.oidc.id-token.include-id-token-claims=<%= @oidc_id_token_claims %>

# Add OIDC claims and scopes.
# Map LDAP fields to OIDC claims.
# The following claims are considered standard OIDC claims:
#  * preferred_username
#  * email
#  * name (firstname)
#  * family_name
#  * group

cas.authn.oidc.core.claims-map.preferred_username=uid
cas.authn.oidc.core.claims-map.email=mail
cas.authn.oidc.core.claims-map.name=cn
cas.authn.oidc.core.claims-map.family_name=givenName
cas.authn.oidc.core.claims-map.groups=memberOf

# Add a custom claim: memberOf
# memberOf is also represented as group in OIDC, but we
# add it as an additional claim to map it as an attribute
# for CAS to use when doing group membership validation.
cas.authn.oidc.core.claims-map.memberOf=memberOf

# Groups are considered standard in most OIDC implementations,
# but not in CAS, so we add it as a custom scope. For the
# clients where will be no difference between a custom defined
# and standard scope.
cas.authn.oidc.core.user-defined-scopes.groups=memberOf

# Let the clients know which scopes we provide.
cas.authn.oidc.discovery.scopes=openid,profile,email,groups

# Claims available to clients, note that we add both memberOf
# and groups. The groups attribute is to provide the data in
# an attribute the clients will expect. Adding memberOf is
# solely to ensure that the attribute will be available to
# CAS itself when doing group membership validation. Removing
# the "memberOf" claim WILL remove is from the internal workings
# of the service definition and we will not be able to utilize
# it in "requiredAttributes". Note that memberOf is not part
# of any offered scope, clients will need to use groups.
cas.authn.oidc.discovery.claims=sub,name,groups,email,family_name,preferred_username,profile,memberOf

<%- if @enable_webauthn -%>
cas.authn.mfa.triggers.principal.global-principal-attribute-predicate.location=file:<%= @groovy_file %>
cas.authn.mfa.web-authn.core.relying-party-id=<%= @webauthn_relaying_party %>
cas.authn.mfa.web-authn.core.relying-party-name<%= @webauthn_relaying_party %>
cas.authn.mfa.web-authn.core.enabled=true
cas.authn.mfa.web-authn.core.expire-devices=3650
cas.authn.mfa.web-authn.json.location=file:/srv/cas/webauthn/devices
cas.authn.mfa.web-authn.core.allow-primary-authentication=false
<%- end -%>
