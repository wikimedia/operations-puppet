# Note: This file is managed by Puppet.

global
  log 127.0.0.1  local0
  log 127.0.0.1  local1 notice
  maxconn        4096
  user           haproxy
  group          haproxy
  daemon

defaults
  log            global
  mode           http
  option         httplog
  option         dontlognull
  retries        3
  option         redispatch
  option         forwardfor
  option         http-server-close
  maxconn        2000
  contimeout     5000
  clitimeout     50000
  srvtimeout     50000


# HTTP authentication
# NOTE:  An easy way to generate a new crypt(3) password hash is:
# openssl passwd -crypt <password>
userlist kraken
<% http_auth.each do |key, value| -%>
  user <%= key %>     password  <%= value %>
<% end -%>


frontend kraken
  bind <%= bind %>
  timeout client 86400000
  
  # Auth ACLs
  acl auth_ok           http_auth(kraken)

  # Test for the WebSocket HTTP-upgrade header
  acl is_websocket      hdr(Upgrade) -i WebSocket

  # HTTP Host based ACLs
  acl host_namenode     hdr_beg(host)    -i namenode.analytics.
  acl host_datanode     hdr_beg(host)    -i datanode.analytics
  acl host_jobs         hdr_beg(host)    -i jobs.analytics.
  acl host_history      hdr_beg(host)    -i history.analytics.
  acl host_hue          hdr_beg(host)    -i hue.analytics.
  acl host_oozie        hdr_beg(host)    -i oozie.analytics.
  acl host_storm        hdr_beg(host)    -i storm.analytics.

  # Whitelisted Network/IP ACLs
<% whitelist.each do |key, value| -%>
  acl src_<%= key %>    src <%= value %>
<% end -%>

  acl host_<%= hostname %> hdr_beg(host)   -i <%= hostname %>.

  # Kraken Apt repository
  acl path_apt           path_beg        -i /apt

  # datanode streamfile public path.
  # this allows anyone who knows the URLs
  # to access files in HDFS in the /wmf/public
  # directory without needing to enter HTTP auth
  # credentials.
  acl path_hdfs_public path_beg     -i /streamFile/wmf/public

  # Allow public access to the Kraken Apt repository
  http-request allow if host_<%= hostname %> path_apt

  # Only allow proxying if:
  # - the request is to a datanode url and the url path is to the /wmf/public directory
  # - the request is coming from a whitelisted network or IP,
  # - the HTTP auth test passes
  # - the request is to analytics.wikimedia.org.
  http-request auth unless auth_ok or path_hdfs_public or src_analyticsA or src_analyticsB or src_wmf_office or src_diederik or src_dsc

  # Use appropriate server backend based
  # on matched HTTP Host ACL
  use_backend   namenode  if host_namenode
  use_backend   datanode  if host_datanode
  use_backend   jobs      if host_jobs
  use_backend   history   if host_history
  use_backend   hue       if host_hue
  use_backend   oozie     if host_oozie
  use_backend   storm     if host_storm

  default_backend localhost_81





# Backends

backend namenode
  server namenode <%= namenode_hostname %>:50070

backend datanode
  server datanode <%= datanode_hostname %>:50075

backend jobs
  server job_server <%= namenode_hostname %>:8088

backend history
  server history_server <%= namenode_hostname %>:19888

backend hue
  server hue_server <%= hue_hostname %>:8888

backend oozie
  server oozie_server <%= oozie_hostname %>:11000

backend storm
  server storm_server <%= storm_hostname %>:<%= storm_port %>

backend localhost_81
  server localhost 127.0.0.1:81
