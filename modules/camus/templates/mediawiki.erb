# NOTE: This file is managed by Puppet

#
# Camus properties file for consuming Mediawiki avro binary data into HDFS.
#

# submit this job in the WMF Analytics Cluster's 'default' queue.
mapreduce.job.queuename=default

# final top-level data output directory, sub-directory will be dynamically created for each topic pulled
etl.destination.path=hdfs://analytics-hadoop/wmf/data/raw/mediawiki
# HDFS location where you want to keep execution files, i.e. offsets, error logs, and count files
etl.execution.base.path=hdfs://analytics-hadoop/wmf/camus/mediawiki
# where completed Camus job output directories are kept, usually a sub-dir in the base.path
etl.execution.history.path=hdfs://analytics-hadoop/wmf/camus/mediawiki/history

# Concrete implementation of the Decoder class to use.
camus.message.decoder.class=org.wikimedia.analytics.refinery.camus.coders.AvroBinaryMessageDecoder

# Default schema for messages produced without a schema rev id.
camus.message.schema.default=101446746400

# Used by avro-based Decoders to use as their schema registry.
kafka.message.coder.schema.registry.class=org.wikimedia.analytics.refinery.camus.schemaregistry.KafkaTopicSchemaRegistry

# Our timestamps look like 2013-09-20T15:40:17
camus.message.timestamp.format=unix_seconds

# use the dt field
camus.message.timestamp.field=ts

etl.default.timezone=UTC

# Store output into hourly buckets
etl.output.file.time.partition.mins=60
etl.keep.count.files=false
etl.execution.history.max.of.quota=.8

# records are delimited by newline
etl.output.record.delimiter=\n

# Class that writes AVRO records to Hadoop
etl.record.writer.provider.class=com.linkedin.camus.etl.kafka.common.AvroRecordWriterProvider

mapred.map.tasks=25

# Connection parameters.
kafka.brokers=<%= Array(@kafka_brokers).join(',') %>

# max historical time that will be pulled from each partition based on event timestamp
#  Note:  max.pull.hrs doesn't quite seem to be respected here.
#  This will take some more sleuthing to figure out why, but in our case
#  here its ok, as we hope to never be this far behind in Kafka messages to
#  consume.
kafka.max.pull.hrs=24
# events with a timestamp older than this will be discarded.
kafka.max.historical.days=1
# Max minutes for each mapper to pull messages (-1 means no limit)
# Let each mapper run for no more than 55 minutes.
# Camus creates hourly directories, and we don't want a single
# long running mapper keep other Camus jobs from being launched.
kafka.max.pull.minutes.per.task=55

# if whitelist has values, only whitelisted topic are pulled.  nothing on the blacklist is pulled
kafka.blacklist.topics=

# These are the kafka topics camus brings to HDFS
kafka.whitelist.topics=mediawiki_.+

# Name of the client as seen by kafka
kafka.client.name=camus-mediawiki-00

# Fetch Request Parameters
#kafka.fetch.buffer.size=
#kafka.fetch.request.correlationid=
#kafka.fetch.request.max.wait=
#kafka.fetch.request.min.bytes=

kafka.client.buffer.size=20971520
kafka.client.so.timeout=60000


# Controls the submitting of counts to Kafka
# Default value set to true
post.tracking.counts.to.kafka=false

# Stops the mapper from getting inundated with Decoder exceptions for the same topic
# Default value is set to 10
max.decoder.exceptions.to.print=5

log4j.configuration=false

# everything below this point can be ignored for the time being, will provide more documentation down the road
##########################
etl.run.tracking.post=false
#kafka.monitor.tier=
kafka.monitor.time.granularity=10

etl.hourly=hourly
etl.daily=daily
etl.ignore.schema.errors=true

# WMF relies on the relevant Hadoop properties for this,
# not Camus' custom properties.
#   i.e.  mapreduce.output.compression* properties
# # configure output compression for deflate or snappy. Defaults to deflate.
# etl.output.codec=deflate
# etl.deflate.level=6
# #etl.output.codec=snappy
