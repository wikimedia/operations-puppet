# Three counters to implement Prometheus histograms
counter varnish_backend_requests_seconds_bucket by le, status_bucket, method, backend
counter varnish_backend_requests_seconds_sum by status_bucket, method, backend
counter varnish_backend_requests_seconds_count by status_bucket, method, backend

/http_status (?P<status_bucket>[0-9])[0-9][0-9]\thttp_method (?P<method>[A-Z]+)\tbackend (vcl-[a-z0-9-]+|boot)\.(?P<backend>\S+)\tttfb (?P<ttfb>[0-9.]+)/ {
  varnish_backend_requests_seconds_count[$status_bucket + "xx"][$method][$backend]++
  varnish_backend_requests_seconds_sum[$status_bucket + "xx"][$method][$backend] += $ttfb

  # these statements "fall through", so the histogram is cumulative. The
  # collecting system can compute the percentile bands by taking the ratio of
  # each bucket value over the final bucket.
  $ttfb < 0.01 {
    varnish_backend_requests_seconds_bucket["0.01"][$status_bucket + "xx"][$method][$backend]++
  }
  $ttfb < 0.05 {
    varnish_backend_requests_seconds_bucket["0.05"][$status_bucket + "xx"][$method][$backend]++
  }
  $ttfb < 0.1 {
    varnish_backend_requests_seconds_bucket["0.1"][$status_bucket + "xx"][$method][$backend]++
  }
  $ttfb < 0.5 {
    varnish_backend_requests_seconds_bucket["0.5"][$status_bucket + "xx"][$method][$backend]++
  }
  $ttfb < 1 {
    varnish_backend_requests_seconds_bucket["1.0"][$status_bucket + "xx"][$method][$backend]++
  }
  $ttfb < 5 {
    varnish_backend_requests_seconds_bucket["5.0"][$status_bucket + "xx"][$method][$backend]++
  }
  varnish_backend_requests_seconds_bucket["+Inf"][$status_bucket + "xx"][$method][$backend]++
}
