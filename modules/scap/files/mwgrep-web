#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
  mwgrep-web -- web interface for mwgrep

"""
import sys
reload(sys)
sys.setdefaultencoding('utf-8')


import json
import urllib
import urllib2

import flask




TIMEOUT = 30
BASE_URI = 'http://search.svc.eqiad.wmnet:9200/_all/page/_search'
NS_MEDIAWIKI = 8
NS_USER = 2
NS_MODULE = 828
NAMESPACES = {
    NS_MEDIAWIKI: 'MediaWiki:',
    NS_USER: 'User:',
    NS_MODULE: 'Module:'
}
MAX_RESULTS = 200

SITEMATRIX_URL = ('https://meta.wikimedia.org/w/api.php?action=sitematrix'
                  '&format=json')

app = flask.Flask(__name__)


def get_db_matrix():
    req = urllib2.urlopen(SITEMATRIX_URL)
    wikis = {}
    for result in json.load(req).values().pop().values():
        try:
            sites = result['site']
        except (KeyError, TypeError):
            continue
        for site in sites:
            if 'fishbowl' in site or 'closed' in site or 'private' in site:
                continue
            wikis[site['dbname']] = site['url']
    return wikis


wikis = get_db_matrix()


def grep(term, namespace=NS_MEDIAWIKI, max_results=MAX_RESULTS,
         timeout=TIMEOUT):
    script = "_source['text'].contains('%s')" % term.replace("'", "\\'")
    filters = [
        {'term': {'namespace': str(namespace)}},
        {'script': {'script': script}},
    ]
    if namespace in (NS_MEDIAWIKI, NS_USER):
        filters.append({'regexp': {'title.keyword': '.*\\.(js|css)'}})

    search = {
        'size': max_results,
        '_source': ['namespace', 'title'],
        'query': {'filtered': {'filter': {'bool': {'must': filters}}}},
        'stats': ['mwgrep'],
    }
    query = {'timeout': str(TIMEOUT)}
    uri = BASE_URI + '?' + urllib.urlencode(query)
    req = urllib2.urlopen(uri, json.dumps(search))
    resp = json.load(req)
    results = []
    for hit in resp['hits']['hits']:
        db_name = hit['_index'].rsplit('_', 2)[0]
        if db_name not in wikis:
            continue
        title = hit['_source']['title']
        page_name = '%s%s' % (NAMESPACES[namespace], title)
        url = '%s/wiki/%s' % (wikis[db_name], page_name)
        results.append({'wiki': db_name, 'page': page_name, 'url': url})
    return results



@app.route('/')
def get_metrics():
    params = flask.request.args.copy()
    q = params.pop('q', '')
    if not q:
        return flask.jsonify(error='The "q" parameter is required.'), 401

    try:
        namespace = int(params.pop('namespace', NS_MEDIAWIKI))
        assert namespace in NAMESPACES
    except (AssertionError, ValueError):
        return flask.jsonify(error='Invalid namespace "%s".' % namespace), 401

    try:
        max_results = int(params.pop('max_results', MAX_RESULTS))
        assert max_results >= 1 and max_results <= 1000
    except (AssertionError, ValueError):
        error = '"max_results" must be a number between 1 and 1000.'
        return flask.jsonify(error=error), 401

    if params:
        error = 'Unrecognized parameter(s): %s' % params
        return flask.jsonify(error=error), 401

    try:
        results = grep(q, namespace, max_results)
    except Exception as e:
        flask.jsonify(error='Query error: %s' % e), 401

    return flask.jsonify(results=results)


if __name__ == '__main__':
    app.run(debug=True)
