#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
  usage: mwgrep [-h] [--max-results N] [--timeout N] [--user | --module]
                [--title TITLE] regex

  Grep for Lua or CSS and JS code fragments on (per default) MediaWiki wiki pages

  positional arguments:
    regex            regex to search for

  optional arguments:
    -h, --help       show this help message and exit
    --max-results N  show at most this many results (default: 100)
    --timeout N      abort search after this many seconds (default: 30)
    --user           search NS_USER rather than NS_MEDIAWIKI
    --module         search NS_MODULE rather than NS_MEDIAWIKI
    --title TITLE    restrict search to pages with this title

  mwgrep will grep the MediaWiki namespace across Wikimedia wikis. specify
  --user to search the user namespace instead. See the lucene documentation
  for org.apache.lucene.util.automaton.RegExp for supported syntax. The current
  lucene version is available from `curl search.svc.eqiad.wmnet:9200`.

"""
import sys
reload(sys)
sys.setdefaultencoding('utf-8')

import argparse
import bisect
import collections
import json
import urllib
import urllib2


TIMEOUT = 30
BASE_URI = 'http://search.svc.eqiad.wmnet:9200/_all/page/_search'
NS_MEDIAWIKI = 8
NS_USER = 2
NS_MODULE = 828
PREFIX_NS = {
    NS_MEDIAWIKI: 'MediaWiki:',
    NS_USER: 'User:',
    NS_MODULE: 'Module:'
}

ap = argparse.ArgumentParser(
    prog='mwgrep',
    description='Grep for CSS and JS code fragments in MediaWiki wiki pages',
    epilog='mwgrep will grep the MediaWiki namespace across Wikimedia wikis. '
           'specify --user to search the user namespace instead.'
)
ap.add_argument('term', help='text to search for')

ap.add_argument(
    '--max-results',
    metavar='N',
    type=int, default=100,
    help='show at most this many results (default: 100)'
)

ap.add_argument(
    '--timeout',
    metavar='N',
    type='{0}s'.format,
    default='30',
    help='abort search after this many seconds (default: 30)'
)

ap.add_argument(
    '--title',
    help='Restrict search to pages with this title (sans namespace)'
)

ns_group = ap.add_mutually_exclusive_group()
ns_group.add_argument(
    '--user',
    action='store_const',
    const=NS_USER,
    default=NS_MEDIAWIKI,
    dest='ns',
    help='search NS_USER rather than NS_MEDIAWIKI'
)

ns_group.add_argument(
    '--module',
    action='store_const',
    const=NS_MODULE,
    default=NS_MEDIAWIKI,
    dest='ns',
    help='search NS_MODULE rather than NS_MEDIAWIKI'
)

args = ap.parse_args()

filters = [
    {'term': {'namespace': str(args.ns)}},
    {'source_regex': {
        'regex': args.term,
        'field': 'source_text',
        'ngram_field': 'source_text.trigram',
        'max_inspect': 10000,
        'max_determinized_states': 20000,
        'case_sensitive': True,
        'locale': 'en',
    }},
]

if args.ns == NS_USER or args.ns == NS_MEDIAWIKI:
    filters.append( {'regexp': {'title.keyword': '.*\\.(js|css)'}} )

if args.title is not None:
    filters.append( {'term': {'title.keyword': args.title}} )

search = {
    'size': args.max_results,
    '_source': ['namespace', 'title'],
    'query': {'filtered': {'filter': {'bool': {'must': filters}}}},
    'stats': ['mwgrep'],
}

query = {
    'timeout': args.timeout,
}

matches = {'public': [], 'private': []}
uri = BASE_URI + '?' + urllib.urlencode(query)
try:
    req = urllib2.urlopen(uri, json.dumps(search))
    result = json.load(req)['hits']

    private_wikis = open('/srv/mediawiki/dblists/private.dblist').read().splitlines()

    for hit in result['hits']:
        db_name = hit['_index'].rsplit('_', 2)[0]
        title = hit['_source']['title']
        page_name = '%s%s' % (PREFIX_NS[args.ns], title)
        if db_name in private_wikis:
            bisect.insort(matches['private'], (db_name, page_name))
        else:
            bisect.insort(matches['public'], (db_name, page_name))

    if matches['public']:
        print('## Public wiki results')
        for db_name, page_name in matches['public']:
            print('{:<20}{}'.format(db_name, page_name))

    if matches['private']:
        if matches['public']:
            print('')
        print('## Private wiki results')
        for db_name, page_name in matches['private']:
            print('{:<20}{}'.format(db_name, page_name))

    print('')
    print('(total: %s, shown: %s)' % (result['total'], len(result['hits'])))
except urllib2.HTTPError, error:
    try:
        error_body = json.load(error)
        if 'error' in error_body and 'root_cause' in error_body['error']:
            root_cause = error_body['error']['root_cause'][0]
            if root_cause['type'] == 'invalid_regex_exception':
                sys.stderr.write('Error while parsing regular expression: {0}\n{1}\n'\
                    .format(args.term, root_cause['reason']))
            else:
                sys.stderr.write('Unknown error: {0}\n'.format(root_cause['reason']))
        else:
            sys.stderr.write('Received unexpected json body from elasticsearch:\n{0}\n'\
                .format(json.dumps(error_body, indent=4, separators=(',', ': '))))
    except ValueError, e:
        sys.stderr.write("Error '{0}' while parsing elasticsearch response '{1}'.\n"\
            .format(e.message, error))
    exit(1)
