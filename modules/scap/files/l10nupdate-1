#!/bin/bash
# This script belongs in /usr/local/bin/.

. /etc/profile.d/mediawiki.sh
. $MEDIAWIKI_STAGING_DIR/multiversion/MWRealm.sh

BINDIR=/usr/local/bin
SCAPDIR=/srv/deployment/scap/scap/bin
MWMULTIDIR=$MEDIAWIKI_STAGING_DIR/multiversion
# The configuration in CommonSettings.php should match GITDIR and GITREPOS
GITDIR=/var/lib/l10nupdate/mediawiki
GITURL=https://gerrit.wikimedia.org/r/p/mediawiki
GITREPOS="core extensions skins"
QUIET=--quiet

umask 0002
BEGAN=$(date +"%s")

TEMP=`getopt -o '' -l verbose -- "$@"`
if [ $? -ne 0 ]; then
    exit 1
fi
eval set -- "$TEMP"
while true; do
    case "$1" in
        --verbose)
            QUIET=
            shift
            ;;
        --)
            shift
            break
    esac
done

echo "Starting l10nupdate at $(date -ud @$BEGAN)."

# Update i18n messages from git to the HEAD of master, or create the clone if it doesn't exist yet
echo "Updating git clone ..."
for path in $GITREPOS
do
	if [ -d $GITDIR/$path ]
	then
		# Checkout exists, update it
		if cd $GITDIR/$path && git pull && git submodule update --init
		then
			echo "Updated $path"
		else
			$BINDIR/dologmsg "!log LocalisationUpdate failed: git pull of $path failed"
			echo "Updating $path FAILED."
			exit 1
		fi
	else
		# Create the checkout's parent directory
		if mkdir -p `dirname $GITDIR/$path` &&
			git clone $GITURL/$path $GITDIR/$path &&
			cd $GITDIR/$path &&
			git submodule update --init
		then
			echo "Cloned $path"
		else
			$BINDIR/dologmsg "!log LocalisationUpdate failed: git clone of $path failed"
			echo "Cloning $path FAILED."
			exit 1
		fi
	fi
done
echo "git clone updated."

# Get all MW message cache versions (and a wiki DB name for each)
mwVerDbSets=$(mwversionsinuse --withdb)
if [ -z "$mwVerDbSets" ]; then
	$BINDIR/dologmsg "!log LocalisationUpdate failed: mwversionsinuse returned empty list"
	echo "Obtaining MediaWiki version list FAILED"
	exit 1
fi

# Update l10n cache and clear the message cache for these versions
for i in ${mwVerDbSets[@]}
do
	mwVerNum=${i%=*}
	mwDbName=${i#*=}
	tempCacheDir=/var/lib/l10nupdate/caches/cache-"$mwVerNum"

	if [ ! -d "$tempCacheDir" ]; then
		sudo -u www-data mkdir "$tempCacheDir"
	fi

	echo "Running updates for $mwVerNum (on $mwDbName)"
	if /usr/local/bin/mwscript extensions/LocalisationUpdate/update.php \
		  --wiki="$mwDbName" $QUIET
	then
		echo "Rebuilding localization cache at `date --rfc-3339=seconds`"
		/usr/local/bin/mwscript rebuildLocalisationCache.php \
			--wiki="$mwDbName" \
			--outdir="$tempCacheDir" $QUIET
		# Copy the LC files
		echo "Completed at `date --rfc-3339=seconds`. Copying LC files to $MEDIAWIKI_STAGING_DIR"
		cp --preserve=timestamps --force "$tempCacheDir"/l10n_cache-* $MEDIAWIKI_STAGING_DIR/php-"$mwVerNum"/cache/l10n
		# Include JSON versions of the CDB files and add MD5 files
		refreshCdbJsonFiles --directory="$MEDIAWIKI_STAGING_DIR/php-$mwVerNum/cache/l10n"

		echo "Syncing to Apaches at `date --rfc-3339=seconds`"
		SYNC_START=$(date +%s)
		# FIXME: This should use the keyholder proxy so we can kill the
		# l10nupdate private key.
		NOLOGMSG=1 $BINDIR/sudo-withagent l10nupdate $SCAPDIR/sync-dir --no-shared-authsock "php-$mwVerNum/cache/l10n"
		if [[ $? -ne 0 ]]; then
			echo "Failed to sync-dir 'php-$mwVerNum/cache/l10n'"
			exit 1
		fi

		# TODO: Add parameter to scap-rebuild-cdbs to only build 1 version of MW
		dsh -g mediawiki-installation -M -F 40 -- "sudo -u mwdeploy $SCAPDIR/scap-rebuild-cdbs"
		SYNC_END=$(date +%s)

		$BINDIR/dologmsg "!log LocalisationUpdate completed ($mwVerNum) at `date --rfc-3339=seconds`"
		echo "All done at `date --rfc-3339=seconds`"
		$BINDIR/deploy2graphite l10nupdate-sync $((SYNC_END-SYNC_START))
	else
		$BINDIR/dologmsg "!log LocalisationUpdate failed ($mwVerNum) at `date --rfc-3339=seconds`"
		echo "FAILED"
	fi
done

# Clear the ResourceLoader cached messages
echo "Refreshing ResourceLoader caches"
ALLDB=`getRealmSpecificFilename "$MEDIAWIKI_STAGING_DIR/all.dblist"`
for wiki in `<"$ALLDB"`; do
	/usr/local/bin/mwscript extensions/WikimediaMaintenance/refreshMessageBlobs.php --wiki="$wiki"
done
echo "All done"
ENDED=$(date +"%s")
LENGTH=$(($ENDED-$BEGAN))
$BINDIR/deploy2graphite l10n $LENGTH
$BINDIR/dologmsg "!log LocalisationUpdate ResourceLoader cache refresh completed at $(date -ud @$ENDED) (duration $(date -ud @"$LENGTH" +'%-Mm %-Ss'))"
