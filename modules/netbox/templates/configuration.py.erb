<%#- SPDX-License-Identifier: Apache-2.0 -%>
#
# MANAGED BY PUPPET do not hand edit
#
#########################
#                       #
#   Required settings   #
#                       #
#########################

# This is a list of valid fully-qualified domain names (FQDNs) for the NetBox server. NetBox will not permit write
# access to the server via any other hostnames. The first FQDN in the list will be treated as the preferred name.
#
# Example: ALLOWED_HOSTS = ['netbox.example.com', 'netbox.internal.local']
# We are behind an apache httpd server, so use X-Forwarded_Host header
USE_X_FORWARDED_HOST = True

ALLOWED_HOSTS = ['<%= [@service_hostname, @facts['networking']['fqdn'], @facts['networking']['hostname'], @discovery_name].uniq.join("','")%>']

# PostgreSQL database configuration.
DATABASE = {
    'NAME': 'netbox',                   # Database name
    'USER': '<%= @db_user %>',          # PostgreSQL username
    'PASSWORD': '<%= @db_password %>',  # PostgreSQL password
    'HOST': '<%= @db_host %>',          # Database server
    'PORT': '<%= @db_port %>',          # Database port (leave blank for default)
    'OPTIONS': {'sslmode': 'require'}   # Force database encyption
}
<%- if @http_proxy -%>
HTTP_PROXIES = {
  'http': '<%= @http_proxy %>',
  'https': '<%= @http_proxy %>',
}
<%- end -%>
# This key is used for secure generation of random numbers and strings. It must never be exposed outside of this file.
# For optimal security, SECRET_KEY should be at least 50 characters in length and contain a mix of letters, numbers, and
# symbols. NetBox will not run without this defined. For more information, see
# https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-SECRET_KEY
SECRET_KEY = '<%= @secret_key %>'


#########################
#                       #
#   Optional settings   #
#                       #
#########################

# Specify one or more name and email address tuples representing NetBox administrators. These people will be notified of
# application errors (assuming correct email settings are provided).
ADMINS = []


# Base URL path if accessing NetBox within a directory. For example, if installed at http://example.com/netbox/, set:
# BASE_PATH = 'netbox/'
BASE_PATH = ''

# Cache timeout in seconds. Defaults to zero (disabled).
CACHE_TIMEOUT = 0

# The number of days to retain logged changes (object creations, updates, and deletions).
# Set this to 0 to retain changes in the database indefinitely.
CHANGELOG_RETENTION = <%= @changelog_retention %>

# API Cross-Origin Resource Sharing (CORS) settings. If CORS_ORIGIN_ALLOW_ALL is set to True, all origins will be
# allowed. Otherwise, define a list of allowed origins using either CORS_ORIGIN_WHITELIST or
# CORS_ORIGIN_REGEX_WHITELIST. For more information, see https://github.com/ottoyiu/django-cors-headers
CORS_ORIGIN_ALLOW_ALL = False
CORS_ORIGIN_WHITELIST = [
    # 'hostname.example.com',
]
CORS_ORIGIN_REGEX_WHITELIST = [
    # r'^(https?://)?(\w+\.)?example\.com$',
]

# Set to True to enable server debugging. WARNING: Debugging introduces a substantial performance penalty and may reveal
# sensitive information about your installation. Only enable debugging while performing testing. Never enable debugging
# on a production system.
<%- if @debug -%>
DEBUG = True
<%- else -%>
DEBUG = False
<%- end -%>

# Email settings
EMAIL = {
    'SERVER': 'localhost',
    'PORT': 25,
    'USERNAME': '',
    'PASSWORD': '',
    'TIMEOUT': 10,  # seconds
    'FROM_EMAIL': '',
}

# The number of days to retain job results (scripts and reports).
# Set this to 0 to retain job results in the database indefinitely.
# Renamed to JOB_RETENTION on 3.5, delete JOBRESULT_RETENTION after upgrade
JOBRESULT_RETENTION = <%= @job_retention %>
JOB_RETENTION = <%= @job_retention %>

# Enable custom logging. Please see the Django documentation for detailed guidance on configuring custom logs:
#   https://docs.djangoproject.com/en/1.11/topics/logging/
# See also: https://www.agiliq.com/blog/2017/12/configure-django-log-exceptions-production/
LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'filters': {
                'require_debug_false': {
                        '()': 'django.utils.log.RequireDebugFalse',
                },
                'require_debug_true': {
                        '()': 'django.utils.log.RequireDebugTrue',
                },
        },
        'formatters': {
                'django.server': {
                        '()': 'django.utils.log.ServerFormatter',
                        'format': '[%(server_time)s] %(message)s',
                }
        },
        'handlers': {
                'console': {
                        'level': 'INFO',
                        'filters': ['require_debug_true'],
                        'class': 'logging.StreamHandler',
                },
                'console_debug_false': {
                        'level': 'ERROR',
                        'filters': ['require_debug_false'],
                        'class': 'logging.StreamHandler',
                },
                'django.server': {
                        'level': 'INFO',
                        'class': 'logging.StreamHandler',
                        'formatter': 'django.server',
                }
        },
        'loggers': {
                'django': {
                        'handlers': ['console', 'console_debug_false'],
                        'level': 'INFO',
                },
                'django.server': {
                        'handlers': ['django.server'],
                        'level': 'INFO',
                        'propagate': False,
                }
        }
}

# Automatically reset the lifetime of a valid session upon each authenticated request. Enables users to remain
# authenticated to NetBox indefinitely.
LOGIN_PERSISTENCE = False

# Setting this to True will permit only authenticated users to access any part of NetBox. By default, anonymous users
# are permitted to access most data in NetBox (excluding secrets) but not make any changes.
LOGIN_REQUIRED = True

# The file path where uploaded media such as image attachments are stored. A trailing slash is not needed. Note that
# the default value of this setting is derived from the installed location.
# MEDIA_ROOT = '/opt/netbox/netbox/media'

# Expose Prometheus monitoring metrics at the HTTP endpoint '/metrics'
METRICS_ENABLED = True

# When determining the primary IP address for a device, IPv6 is preferred over IPv4 by default.
# Set this to True to prefer IPv4 instead.
PREFER_IPV4 = <%= @prefer_ipv4.to_s.capitalize %>

# To be removed after Netbox >= 3.7
# The default value for this parameter was changed from False to True in NetBox v3.7.
ENFORCE_GLOBAL_UNIQUE = True

# The file path where custom reports will be stored. A trailing slash is not needed. Note that the default value of
# this setting is derived from the installed location.
# REPORTS_ROOT = '/opt/netbox/netbox/reports'
# TODO: remove REPORTS_ROOT after Netbox 4 upgrade
REPORTS_ROOT = '<%= @scripts_path %>/reports'
SCRIPTS_ROOT = '<%= @scripts_path %>/customscripts'

# Time zone (default: UTC)
TIME_ZONE = 'UTC'

# Date/time formatting. See the following link for supported formats:
# https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date
DATE_FORMAT = 'N j, Y'
SHORT_DATE_FORMAT = 'Y-m-d'
TIME_FORMAT = 'g:i a'
SHORT_TIME_FORMAT = 'H:i:s'
DATETIME_FORMAT = 'N j, Y g:i a'
SHORT_DATETIME_FORMAT = 'Y-m-d H:i'

PLUGINS = [
    'netbox_more_metrics'
]

<% if @swift_auth_url %>
# Swift backend storage configuration.
STORAGE_BACKEND = 'swift.storage.SwiftStorage'
STORAGE_CONFIG = {
    'SWIFT_AUTH_URL': '<%= @swift_auth_url %>/auth/v1.0',
    'SWIFT_USERNAME': '<%= @swift_user %>',
    'SWIFT_PASSWORD': '<%= @swift_key %>',
    'SWIFT_CONTAINER_NAME': '<%= @swift_container %>',
    'SWIFT_USE_TEMP_URLS': True,
    'SWIFT_TEMP_URL_KEY': '<%= @swift_url_key %>',
    'SWIFT_BASE_URL': 'https://<%= @service_hostname %>',
}
<% end %>

RQ_DEFAULT_TIMEOUT = 300

SESSION_COOKIE_NAME = 'sessionid'

REDIS = {
    'tasks': {
        'HOST': '<%= @redis_host %>',
        'PORT': <%= @redis_port %>,
        'PASSWORD': '<%= @redis_password %>',
        'DATABASE': <%= @netbox4 ? 2 : 0 %>,
    },
    'caching': {
        'HOST': '<%= @redis_host %>',
        'PORT': <%= @redis_port %>,
        'PASSWORD': '<%= @redis_password %>',
        'DATABASE': <%= @netbox4 ? 3 : 1 %>,
        'DEFAULT_TIMEOUT': 300,
    },
}

<% unless @validators.empty? %>
CUSTOM_VALIDATORS = {
  <%- @validators.each_with_index do |validator, index| -%>
    <%- comma = index == @validators.size - 1 ? '' : ',' -%>
    '<%= validator %>': ( 'validators.<%= validator %>.Main', )<%= comma %>
  <%- end -%>
}
<%- end -%>

<% if @authentication_provider == 'ldap' %>
REMOTE_AUTH_BACKEND = 'netbox.authentication.LDAPBackend'
<% elsif @authentication_provider == 'cas' %>
CAS_ENABLED = True
<% elsif @authentication_provider == 'oidc' %>
REMOTE_AUTH_BACKEND = 'social_core.backends.open_id_connect.OpenIdConnectAuth'
REMOTE_AUTH_GROUP_SYNC_ENABLED = True
REMOTE_AUTH_SUPERUSER_GROUPS = 'ops'
REMOTE_AUTH_STAFF_GROUPS = 'ops'
SOCIAL_AUTH_ALLOW_GROUPS = ['ops', 'wmf']
SOCIAL_AUTH_OIDC_ENDPOINT = '<%= @cas_server_url %>'
SOCIAL_AUTH_OIDC_KEY = '<%= @oidc_key %>'
SOCIAL_AUTH_OIDC_SECRET = '<%= @oidc_secret %>'
SOCIAL_AUTH_OIDC_USERINFO_URL = '<%= @cas_server_url %>/profile'
SOCIAL_AUTH_OIDC_SCOPE = ['openid', 'profile', 'email', 'groups']
SOCIAL_AUTH_OIDC_USERNAME_KEY = 'username'

# Extend pipeline to create and associate groups
SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.social_auth.associate_by_email',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'netbox.authentication.user_default_groups_handler',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
    'apereo.pipelines.groups.add_user_to_groups',
)
<% end %>
