#!/usr/bin/python3
import argparse
import os
import logging
import sys
import subprocess
import yaml


def ensure_dir(dir, recurse=False):
    """ create directories on disk (or ensure they exist)
    :param dir: str
    :param recurse: bool
    """
    try:
        if recurse:
            os.makedirs(dir)
        else:
            os.mkdir(dir)
        logging.debug('mkdir %s' % dir)
    except OSError:
        if not os.path.exists(dir):
            raise

def is_mount(path):
    """ confirm a path is a mountpoint
    :param src: str
    """
    try:
        with open(os.devnull, 'w') as null:
            subprocess.check_call(['/bin/findmnt', path], stdout=null)
        return True
    except subprocess.CalledProcessError:
        return False

def bind_mount(src, dst):
    """ bind mount two paths on disk
    :param src: str
    :param dst: str
    """

    if is_mount(src):
        logging.debug("%s is already a mountpoint" % src)
        return

    try:
        bind = ["/bin/mount", "--bind", src, dst]
        logging.debug(' '.join(bind))
        subprocess.check_call(bind)
    except subprocess.CalledProcessError:
        logging.error("bind mount %s %s failed" % (src, dst))

def create_binding(target, export, force=False):
        """ manage bind state on disk (with possible inline creations)
        :param target: str
        :param export: str
        :param force: bool
        """

        ensure_dir(export, recurse=True)

        if force:
            ensure_dir(target)

        if os.path.exists(target):
            bind_mount(target, export)
        else:
            logging.warning("no bind on %s as %s does not exist" % (export, target))

def main():

    argparser = argparse.ArgumentParser()

    argparser.add_argument(
        '-f',
        action='store_true',
        help='New project directories (not /exp directories) need -f to be created.',
    )

    argparser.add_argument(
        '-disk_path',
        default='/srv',
        help='Path on disk under which to setup the share tree',
    )

    argparser.add_argument(
        '-debug',
        help='Turn on debug logging',
        action='store_true'
    )

    args = argparser.parse_args()

    logging.basicConfig(
        format='%(asctime)s %(levelname)s %(message)s',
        level=logging.DEBUG if args.debug else logging.INFO)

    if os.getuid() != 0:
        logging.error('Needs to be run as root')
        sys.exit(1)

    if args.f:
        logging.warning("forcing creation for new project directories")

    try:
        with open('/etc/nfs-mounts.yaml') as f:
            config = yaml.safe_load(f)
    except:
        logging.exception('Could not load projects config file from %s', args.config_path)
        sys.exit(1)

    srv_root = args.disk_path
    # get dict of path_on_disk:share_name to create in descending order
    public_inverse = {v.split(' ')[0]: k for k, v in config['public'].items()}
    for k in sorted(public_inverse, key=len, reverse=False):
        path = k
        if public_inverse[k] == 'root':
            exp_root = os.path.join('/', path)
            if not os.path.exists(exp_root):
                logging.error('The root export path does not exist')
                sys.exit(1)
            continue

        base = os.path.basename(path)
        exp = os.path.join(exp_root, base)
        srv = os.path.join(srv_root, base)
        create_binding(srv, exp, force=args.f)

    device_path_default = '/srv/misc'
    device_paths = {
         'tools': '/srv/tools',
          'maps': '/srv/maps',
    }

    for project in sorted(config['private']):
        srv_device = device_paths.get(project, device_path_default)
        srv = os.path.join(srv_device, 'shared', project)
        exp = os.path.join('/exp/project', project)
        create_binding(srv, exp, force=args.f)

if __name__ == '__main__':
    main()
