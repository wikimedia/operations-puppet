# Class: bacula::client
#
# This class installs bacula-fd, configures it and ensures that it is running
#
# Parameters:
#   $director
#       The FQDN of the server being our director
#   $catalog
#       Which bacula catalog will be used for this client
#   $file_retention
#       How much time the catalog will hold data about files
#   $job_retention
#       How much time the catalog will hold data about jobs
#   $fd_port
#       If needed to change the port the fd listens on. Default 9102
#
# Actions:
#       Install bacula-fd, configure, ensure running
#       The director password is autogenerated and exported
#       Exports configuration to bacula-director
#       Defines a virtual resource for a bpipe mysql plugin
#
# Requires:
#
# Sample Usage:
#       class { 'bacula::client':
#           director    => 'dir.example.com',
#       }

class bacula::client($director, $catalog, $file_retention, $job_retention, $fdport='9102') {
    $directorpassword = sha1($::uniqueid)

    package { 'bacula-fd':
        ensure => installed,
    }

    service { 'bacula-fd':
        ensure  => running,
        require => Package['bacula-fd'],
    }

    file { '/etc/bacula/bacula-fd.conf':
        ensure  => present,
        owner   => root,
        group   => root,
        mode    => '0600',
        notify  => Service['bacula-fd'],
        content => template('bacula/bacula-fd.conf.erb'),
        require => [
                    Package['bacula-fd'],
                    Exec['concat-bacula-keypair'],
                ]
    }

    # To avoid reimplementing a PKI infrastructure we use puppet's already well
    # managed one. Bacula needs the keypair in one single file though hence this
    # resource
    exec { 'concat-bacula-keypair':
        command => "/bin/cat
/var/lib/puppet/ssl/{private_keys,certs}/$::fqdn.pem > /var/lib/puppet/ssl/private_keys/bacula_keypair-$::fqdn.pem",
        creates => "/var/lib/puppet/ssl/private_keys/bacula-keypair-$::fqdn.pem",
    }

    # We export oufself to the director
    @@file { "/etc/bacula/clients.puppet.d/$::fqdn.conf":
        ensure  => present,
        owner   => root,
        group   => bacula,
        mode    => '0640',
        content => template('bacula/bacula-client.erb'),
        notify  => Service['bacula-director'],
        tag     => "bacula-client-$director",
    }

    # We include but not realize a simple bpipe plugin used to dump mysql
    # databases. It is quite naive and should be used on small to medium
    # databases only (~50-75m rows)
    @file { '/etc/bacula/scripts/bpipe-mysql-db':
        ensure  => present,
        owner   => root,
        group   => root,
        mode    => '0700',
        source  => 'puppet:///modules/bacula/etc/bpipe-mysql-db',
        require => Package['bacula-fd'],
        tag     => 'bacula-client-mysql',
    }
}
