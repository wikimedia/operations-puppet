#!/usr/bin/env python

import argparse
import sys
from elasticsearch import ConnectionError
from elasticsearch import Elasticsearch


# Helper functions go here
def cluster_health():
    es = Elasticsearch(args.server)
    return es.cluster.health()["status"]


def set_replication_state(status):
        es = Elasticsearch(args.server)
        res = es.cluster.put_settings(
            body={
                "transient": {
                    "cluster.routing.allocation.enable": status
                }
            }
        )
        if res["acknowledged"]:
            return True
        else:
            return False


# Add new command functions here
def es_health():
    health = cluster_health()
    print health
    if health != "green":
        return 1
    else:
        return 0


def es_start_replication():
    if set_replication_state("all"):
        print "All replication enabled"
        return 0
    else:
        print "Failed to set replication state"
        return 1


def es_stop_replication():
    if set_replication_state("primaries"):
        print "Non-primary replication disabled"
        return 0
    else:
        print "Failed to set replication state"
        return 1

# And register them here
commands = {
    "health": es_health,
    "start-replication": es_start_replication,
    "stop-replication": es_stop_replication
}

# main()
if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Tool for Elasticsearch cluster maintenance")
    parser.add_argument("command", metavar='C', type=str,
                        help="Subcommand, one of: " + ",".join(commands))
    parser.add_argument("--server", metavar='S', type=str, default="localhost",
                        help="Server to work on, default localhost")
    args = parser.parse_args()

    if args.command not in commands:
        print "Unknown command"
        sys.exit(1)

    try:
        sys.exit(commands[args.command]())
    except ConnectionError:
        print "Unable to connect"
        sys.exit(1)
