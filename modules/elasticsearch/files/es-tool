#!/usr/bin/env python
# -*- coding: utf-8 -*-
import argparse
import os
import sys
import time

from elasticsearch import Elasticsearch, TransportError
from subprocess import Popen


# Helper functions go here
def cluster_health():
    es = Elasticsearch(args.server)
    return es.cluster.health()["status"]


def set_setting(setting, value, settingtype="transient"):
        es = Elasticsearch(args.server)
        res = es.cluster.put_settings(
            body={
                settingtype: {
                    setting: value
                }
            }
        )
        if res["acknowledged"]:
            return True
        else:
            return False


def set_allocation_state(status):
    return set_setting("cluster.routing.allocation.enable", status)


def set_banned_ips(iplist):
    return set_setting("cluster.routing.allocation.exclude._ip",
                       ",".join(iplist))


def get_banned_ips():
    es = Elasticsearch(args.server)
    res = es.cluster.get_settings()
    try:
        if res["transient"]["cluster"]["routing"]["allocation"]["exclude"]["_ip"]:
            return res["transient"]["cluster"]["routing"]["allocation"]["exclude"]["_ip"].split(",")
    except KeyError:
        pass
    return []


# Add new command functions here
def es_ban_node():
    banned = get_banned_ips()
    if args.IP in banned:
        print "Already banned from allocation, nothing to do"
        return os.EX_OK

    banned.append(args.IP)
    if set_banned_ips(banned):
        print "Banned IP"
        return os.EX_OK
    else:
        print "Failed to ban IP"
        return os.EX_UNAVAILABLE


def es_health():
    health = cluster_health()
    print health
    if health != "green":
        return os.EX_UNAVAILABLE
    else:
        return os.EX_OK


def es_restart_fast():
    # Sanity checks
    if os.getuid() != 0:
        print "Must be run as root"
        return os.EX_UNAVAILABLE
    if args.server != "localhost":
        print "Must be run against localhost only"
        return os.EX_UNAVAILABLE

    # Disable replication so we can make recovery easier
    print "Disabling non-primary replication...",
    if not set_allocation_state("primaries"):
        print "failed!"
        return os.EX_UNAVAILABLE
    print "ok"

    # Actually restart the service
    print "Restarting Elasticsearch...",
    p = Popen(["/etc/init.d/elasticsearch", "restart"], shell=True)
    out, err = p.communicate()
    if p.returncode != 0:
        print "failed! -- You will still need to enable replication again"
        return os.EX_UNAVAILABLE
    print "ok"

    # Wait for it to come back alive
    print "Waiting for Elasticsearch...",
    while True:
        try:
            if cluster_health():
                print "ok"
                break
        except:
            pass
        print ".",
        time.sleep(1)

    # Wait a sec
    time.sleep(1)

    # Turn replication back on so things will recover fully
    print "Enabling all replication...",
    if not set_allocation_state("all"):
        print "failed! -- You will still need to enable replication again"
        return os.EX_UNAVAILABLE
    print "ok"

    # Wait a bit
    time.sleep(5)
    print "Waiting for green (you can ctrl+c here if you have to)...",
    while cluster_health() != "green":
        time.sleep(1)
    print "ok"

    return os.EX_OK


def es_start_replication():
    if set_allocation_state("all"):
        print "All replication enabled"
        return os.EX_OK
    else:
        print "Failed to set replication state"
        return os.EX_UNAVAILABLE


def es_stop_replication():
    if set_allocation_state("primaries"):
        print "Non-primary replication disabled"
        return os.EX_OK
    else:
        print "Failed to set replication state"
        return os.EX_UNAVAILABLE


def es_unban_node():
    banned = get_banned_ips()
    if args.IP not in banned:
        print "Not banned from allocation currently, nothing to do"
        return os.EX_OK

    banned.remove(args.IP)
    if set_banned_ips(banned):
        print "Unbanned IP"
        return os.EX_OK
    else:
        print "Failed to unban IP"
        return os.EX_UNAVAILABLE

# And register them here
commands = {
    "ban-node": es_ban_node,
    "health": es_health,
    "restart-fast": es_restart_fast,
    "start-replication": es_start_replication,
    "stop-replication": es_stop_replication,
    "unban-node": es_unban_node,
}

# main()
parser = argparse.ArgumentParser(
    description="Tool for Elasticsearch cluster maintenance")
parser.add_argument("command", metavar='CMD', type=str,
                    choices=commands.keys(),
                    help="Subcommand, one of: " + ",".join(commands))
parser.add_argument("IP", metavar='IP', type=str, nargs="?",
                    help="IP address, used by (un)ban-node")
parser.add_argument("--server", metavar='S', type=str, default="localhost",
                    help="Server to work on, default localhost")
args = parser.parse_args()

try:
    sys.exit(commands[args.command]())
except TransportError as te:
    print te
    sys.exit(os.EX_UNAVAILABLE)
