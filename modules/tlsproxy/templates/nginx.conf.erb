# This file is managed by Puppet!
<%
# Shortcuts for convenience
realm =  @realm
-%>

# Thumbs server configuration file

user www-data www-data;
# Adapted from https://github.com/priestjim/chef-openresty/blob/master/recipes/commons_conf.rb
# Hyperthread siblings assumed to be enumerated as 0+16, 1+17, 2+18, etc, and
#  if HT is detected, we map 2 process per physical core onto both siblings
worker_processes  <%= @processorcount %>;
<%
    ht_mode = false
    if @processorcount.to_i == (2 * @physicalcorecount.to_i)
        ht_mode = true
    end
    affinity_mask = Array.new
    cpupos = 0
    ncpus = @physicalcorecount.to_i
    (0...ncpus).each do |worker|
        bitmask = (1 << cpupos).to_s(2)
        bitstring = '0' * (ncpus - bitmask.size) + bitmask.to_s
        if ht_mode
            affinity_mask << (bitstring + bitstring)
            affinity_mask << (bitstring + bitstring)
        else
            affinity_mask << bitstring
        end
        cpupos += 1
    end
-%>
worker_cpu_affinity <%= affinity_mask.join(" ") %>;
worker_rlimit_nofile <%= @nginx_worker_connections.to_i * 2 %>;


error_log  /var/log/nginx/error.log;
pid        /run/nginx.pid;

events {
    worker_connections <%= @nginx_worker_connections %>;
    multi_accept off; # accept 1 conn per epoll hit, basically
    accept_mutex off; # better latencies at high connection rates
}

http {
<% if realm == 'labs' then -%>
    # On labs nginx find a CPU cache size of 32 bytes which is
    # not enough to hold the keys defined by mime types.
    # See T50210
    types_hash_bucket_size 64;
    server_names_hash_bucket_size 64;
<% end -%>
    include       /etc/nginx/mime.types;

    access_log	/var/log/nginx/access.log;

    client_max_body_size 100m;
    large_client_header_buffers 4 16k; 
    client_body_buffer_size 64k;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;
    tcp_nodelay        on;

    gzip  off;
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";

    # Enable a shared cache, since it is defined at this level
    # it will be used for all virtual hosts. 1m = 4000 active sessions,
    # so we are allowing 800,000 active sessions.  Any fixed value here is
    # probably less than ideal, as we'll want to vary it based on cluster
    # traffic levels and pybal node weightings, but for now we're just
    # experimenting with the fixed value to get ballpark ideas.
    ssl_session_cache shared:SSL:200m;
    ssl_session_timeout 15m;

    # Disable RFC5077 tickets (may revisit later when client support is better)
    ssl_session_tickets off;

    # ssl_buffer_size: 1300 is a good magic value for minimizing TTFB, at the
    # expense of server overhead and total throughput.  We may have to back
    # this off if it becomes a significant server performance issue, and we
    # may want to set it higher (e.g. 4k) specifically for the upload caches
    # to trade a little TTFB for throughput.  This is something that will have
    # to be watched, experimented on, and tuned as more load comes in...
    ssl_buffer_size 1300;

    # nginx's $http2 is either 'h2' or '' (empty string) for http/1
    # Map it to $h2 as a boolean string value '1' or '0' for use in headers
    map $http2 $h2 {
        default '1';
        '' '0';
    }

    # Nginx indicates session reuse with 'r' and '.', which is rather cryptic.
    # Map this value to '1' and '0' instead.
    map $ssl_session_reused $session_reused {
        'r' '1';
        '.' '0';
    }

    <%= @nginx_ssl_conf.join("\n")  %>

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}
