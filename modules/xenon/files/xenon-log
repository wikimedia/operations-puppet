#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
  xenon-log
  ~~~~~~~~~
  
  `xenon` is a built-in HHVM extension that periodically captures
  stacktraces of running PHP code. This tool reads xenon-generated
  traces via redis and logs them to disk.

"""
from __future__ import print_function

import sys
reload(sys)
sys.setdefaultencoding('utf-8')

import argparse
import datetime
import errno
import fnmatch
import logging
import os
import os.path
import re

import redis
import yaml


parser = argparse.ArgumentParser()
parser.add_argument('config', nargs='?', default='/etc/xenon-log.yaml')
args = parser.parse_args()

with open(args.config) as f:
    config = yaml.load(f)


class TimeLog(object):

    base_path = config.get('base_path', '/srv/xenon/logs')

    def __init__(self, period, format, retain):
        self.period = period
        self.format = format
        self.retain = retain
        self.path = os.path.join(self.base_path, period)
        try:
            os.makedirs(self.path, 0755)
        except OSError as exc:
            if exc.errno != errno.EEXIST: raise

    def write(self, message, time=None, tag='all'):
        time = datetime.datetime.utcnow() if time is None else time
        base_name = '%s.%s.log' % (time.strftime(self.format), tag)
        file_path = os.path.join(self.path, base_name)
        if not os.path.isfile(file_path):
            self.prune_files(tag)
        with open(file_path, 'a') as f:
            print(message, file=f)

    def prune_files(self, tag):
        mask = '*.%s.log' % tag
        files = {}
        for base_name in os.listdir(self.path):
            if not fnmatch.fnmatch(base_name, mask):
                continue
            file_path = os.path.join(self.path, base_name)
            try:
                files[file_path] = os.path.getctime(file_path)
            except ValueError:
                continue
        files = list(sorted(files, key=files.get, reverse=True))
        for file_path in files[self.retain:]:
            try:
                os.remove(file_path)
            except OSError:
                continue



logs = [TimeLog(**log) for log in config['logs']]
conn = redis.Redis(**config['redis'])
pubsub = conn.pubsub()
pubsub.subscribe('xenon')


def get_tag(raw_stack):
    m = re.match(r'(?:[^;]+/)*(\w+).php', raw_stack)
    return m.group(1) if m else None


for message in pubsub.listen():
    data = message['data']
    time = datetime.datetime.utcnow()
    tag = get_tag(str(data))
    for log in logs:
        log.write(data, time, 'all')
        if tag:
            log.write(data, time, tag)
