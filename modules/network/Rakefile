require 'rake'
require 'fileutils'

require 'rspec/core/rake_task'

extra_modules = [ 'stdlib' ]

modulename = File.basename(File.expand_path(File.dirname(__FILE__)))

symlinks = { format('spec/fixtures/modules/%s/files', modulename) => '../../../../files',
             format('spec/fixtures/modules/%s/manifests', modulename) => '../../../../manifests',
             format('spec/fixtures/modules/%s/templates', modulename) => '../../../../templates',
           }


task :setup do
  FileUtils.mkdir_p(format('spec/fixtures/modules/%s', modulename))
  extra_modules.each do |x|
      FileUtils.ln_s(format('../../../../%s', x), format('spec/fixtures/modules/%s', x))
  end
  FileUtils.mkdir_p('spec/fixtures/manifests/')
  FileUtils.touch('spec/fixtures/manifests/site.pp')
  symlinks.each do |x|
    if !File.exist?(x[0])
      FileUtils.ln_s(x[1], x[0])
    end
  end
end

task :teardown do
  symlinks.each { |x| FileUtils.rm(x[0], :force => true) }
  FileUtils.rmdir(format('spec/fixtures/modules/%s', modulename))
  extra_modules.each do |x|
    FileUtils.rm(format('spec/fixtures/modules/%s', x), :force => true)
  end
  FileUtils.rmdir('spec/fixtures/modules')
  FileUtils.rm('spec/fixtures/manifests/site.pp')
  FileUtils.rmdir('spec/fixtures/manifests')
end

RSpec::Core::RakeTask.new(:realspec) do |t|
  t.fail_on_error = false
  t.pattern = 'spec/*/*_spec.rb'
end

task :spec_standalone => [ :setup, :realspec, :teardown]

task :default => :spec do
end
