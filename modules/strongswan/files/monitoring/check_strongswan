#!/usr/bin/perl

# check_strongswan
# jgage@wikimedia.org 2015
#
# Nagios/Icinga check script for Strongswan
# Parses output of 'ipsec statusall': checks that each defined connection has
# corresponding established Security Associations (IKE parent + ESP child).
# Also checks that connections configured by Strongswan have
# corresponding xfrm policies in place in the kernel, by parsing output of
# 'ip xfrm state' for matching Security Parameter Index values.

use strict;
use warnings;

my $OK    = "OK";
my $EOK   = 0;
my $WARN  = "WARNING";
my $EWARN = 1;
my $CRIT  = "CRITICAL";
my $ECRIT = 2;
my $UNKN  = "UNKNOWN";
my $EUNKN = 3;

sub get_ipsec {
    # /usr/sbin/ipsec is a wrapper; save an exec by calling the
    # equivalent non-blocking internal command directly.
    my @ip_statusall = `/usr/lib/ipsec/stroke statusall-nb 2>&1`;
    if ($? != 0) {
        print("Strongswan $UNKN - ipsec statusall: @ip_statusall");
        exit($EUNKN);
    }

    # Parse output into a hash of connections
    my $conns = {};
    foreach my $line (@ip_statusall) {
        # match Connections as well as Security Assocations, in order.
        # when parsing Connections, a key is created for each one
        # then when parsing Security Associations, the value is updated for ESTABLISHED IKE parent SAs
        if ($line =~ m/\.\.\./) {
            # Connection:
            # curium_v4:  10.64.0.169...10.64.0.170  IKEv1/2
            # Security Assocation:
            # curium_v4[17]: ESTABLISHED 2 minutes ago, 10.64.0.169[CN=berkelium.eqiad.wmnet]...10.64.0.170[CN=curium.eqiad.wmnet]
            my ($key, $value) = split(/: /, $line, 2);
            $key =~ s/\[\d+\]$//;
            $conns->{$key}->{'IKE'} = $value;
        }
        # finally, key values are updated again for INSTALLED ESP TRANSPORTs
        if ($line =~ m/INSTALLED/) {
            # curium_v6{23}:  INSTALLED, TRANSPORT, reqid 2, ESP SPIs: c471b24b_i c65454f9_o
            my ($key, $value, $SPIs) = split(/: /, $line, 3);
            $key =~ s/\{\d+\}$//;
            $conns->{$key}->{'IKE'} = $value;

            my ($in, $out) = split(/ /, $SPIs, 2);
            $in =~ s/_i//;
            $out =~ s/_o\n//;
            $conns->{$key}->{'SPI-in'} = $in;
            $conns->{$key}->{'SPI-out'} = $out;
        }
    }

    return $conns;
}

sub get_xfrm {
    my @ip_xfrm_state = `/bin/ip xfrm state 2>&1`;
    if ($? != 0) {
        print("Strongswan $UNKN - ip xfrm state: @ip_xfrm_state");
        exit($EUNKN);
    }

    # parse into a hash of xfrm SPIs for existence checks
    my $xfrms = {};
    foreach (@ip_xfrm_state) {
        # proto esp spi 0xc65454f9 reqid 2 mode transport
        / spi 0x([0-9a-f]{8}) / || next;
        $xfrms->{$1} = 1;
    }

    return $xfrms;
}

sub summarize {
    my ($conns, $xfrms) = @_;

    # count of full successes
    my $ok = 0;

    # arrays of connection keys for failure states
    my @nochildsa = ();
    my @connecting = ();
    my @neither = ();
    my @kernelfail = ();

    # process the input hashes into the above
    foreach my $key (keys %$conns) {
        my $conn = $conns->{$key};
        my $ike = $conn->{'IKE'};
        if ($ike =~ m/INSTALLED/) {
            if ($xfrms->{$conn->{'SPI-in'}} && $xfrms->{$conn->{'SPI-out'}}) {
                # expected ESP transport SPIs described in 'ipsec statusall' found in 'ip xfrm state'
                $ok++;
            } else {
                # Charon thinks connection is installed but the kernel doesn't agree
                # this might happen if kernel modules fail to load
                push(@kernelfail, $key);
            }
        } elsif ($ike =~ m/ESTABLISHED/) {
            # IKE parent SA established but there's no corresponding child SA for ESP transport installed
            push(@nochildsa, $key);
        } elsif ($ike =~ m/CONNECTING/) {
            # transitional state while IKE SA connection is attempted
            push(@connecting, $key);
        } else {
            # connection is defined but not established or connecting (failed)
            push(@neither, $key);
        }
    }

    my @problem_strs = ();
    if (scalar(@nochildsa)) {
        push(@problem_strs, 'no-child-sa: ' . join(q{,}, @nochildsa));
    }
    if (scalar(@connecting)) {
        push(@problem_strs, 'connecting: ' . join(q{,}, @connecting));
    }
    if (scalar(@neither)) {
        push(@problem_strs, 'not-conn: ' . join(q{,}, @neither));
    }
    if (scalar(@kernelfail)) {
        push(@problem_strs, 'no-xfrm: ' . join(q{,}, @kernelfail));
    }

    my $problems = join(q{ | }, @problem_strs);
    return ($ok, $problems);
}

### Start of execution ###

my ($ok, $problems) = summarize(get_ipsec(), get_xfrm());

if ($problems) {
    print("Strongswan $CRIT - ok: $ok | $problems\n");
    exit($ECRIT);
}

if (!$ok) {
    print("Strongswan $CRIT - No connections configured: check ipsec.conf\n");
    exit($ECRIT);
}

print("Strongswan $OK - $ok ESP OK\n");
exit($EOK);
