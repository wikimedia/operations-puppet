import dateutil.parser
import json
import time
import unittest


def mysql_mapper(e):
    """
    The WMF EventLogging Analytics MySQL log database has a lot of curious
    legacy compatibility problems.  This function converts an event
    to a format that the MySQL database expects.  If an event comes from
    a non-Mediawiki bot, it will be mapped to 'None' and thus excluded from the stream.
    """
    if 'userAgent' in e and isinstance(e['userAgent'], dict):
        # Get rid of unwanted bots. T67508
        is_bot = e['userAgent'].get('is_bot', False)
        is_mediawiki = e['userAgent'].get('is_mediawiki', False)
        # Don't insert events generated by bots unless they are mediawiki bots.
        if is_bot and not is_mediawiki:
            # Returning None will cause map://
            # reader to exclude this event.
            return None

        # MySQL expects that userAgent is a string, so we
        # convert it to JSON string now.  T153207
        e['userAgent'] = json.dumps(e['userAgent'])

    # jrm.py expects an integer `timestamp` field to convert into
    #  Mediawiki timestamp. Inject it into the event.
    if 'dt' in e:
        # Use the time from `dt`
        e['timestamp'] = int(dateutil.parser.parse(e['dt']).strftime("%s"))
    else:
        # Else just use current time.
        e['timestamp'] = int(time.time())

    # Historicaly, EventCapsule did not have `dt` so we remove it from
    # insertion into MySQL.
    if 'dt' in e:
        del e['dt']

    return e


# ##### Tests ######
# To run:
#   python -m unittest -v plugins.py
# Or:
#   python plugins.py
#
class TestEventLoggingPlugins(unittest.TestCase):


    def test_mysql_mapper(self):
        e1 = {
            'dt': '2017-11-01T11:00:00',
            'userAgent': {'browser_family': 'Chrome'}
        }
        should_be1 = {'timestamp': 1509548400, 'userAgent': '{"browser_family": "Chrome"}'}
        self.assertEqual(mysql_mapper(e1), should_be1)

        e2 = {
            'dt': '2017-11-01T11:00:00',
            'userAgent': {'is_bot': True}
        }
        self.assertEqual(mysql_mapper(e2), None)

        e3 = {
            'dt': '2017-11-01T11:00:00',
            'userAgent': {'is_bot': True, 'is_mediawiki': True}
        }
        should_be1 = {'timestamp': 1509548400, 'userAgent': '{"is_bot": True, "is_mediawiki": True}'}
        self.assertEqual(mysql_mapper(e2), None)

if __name__ == '__main__':
    unittest.main(verbosity=2)
