#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
  Gmond metric-gathering module for MediaWiki fatals and exceptions

  Reads fatals / exceptions from a ZeroMQ publisher. MediaWiki logs to a file
  or a UDP socket, so for this to work you will also need a UDP-to-ZMQ router.
  See 'udp2zmq' in EventLogging.

  When invoked by itself, runs a self-test.

  Usage: mwerrors.py tcp://HOST:PORT

  Written by Ori Livneh <ori@wikimedia.org>

"""
import sys
reload(sys)
sys.setdefaultencoding('utf8')

import errno
import threading
import time

import zmq


patterns = (
    # Substring to match                     # Metric      # Metric title
    ('Fatal error: Out of memory',           'oom',        'Out-of-memory fatals'),  # noqa
    ('Fatal error: Maximum execution time',  'timelimit',  'Time limit fatals'),     # noqa
    ('Fatal error:',                         'fatal',      'Miscellaneous fatals'),  # noqa
    ('Exception from',                       'exception',  'Exceptions'),
    ('Catchable fatal error',                'catchable',  'Catchable fatals'),
    ('DatabaseBase->reportQueryError',       'query',      'Query errors'),
)


def count_errors(counter, endpoint):
    """Count error types in error stream."""
    ctx = zmq.Context.instance()
    sock = ctx.socket(zmq.SUB)
    sock.connect(endpoint)
    sock.setsockopt(zmq.SUBSCRIBE, b'')

    while 1:
        try:
            line = sock.recv()
            for pattern, name, description in patterns:
                if pattern in line:
                    counter[name] += 1
                    break
        except zmq.ZMQError as e:
            # Calls interrupted by EINTR should be re-tried.
            if e.errno == errno.EINTR:
                continue
            raise


def metric_init(params):
    """
    Initialize; part of Gmond interface

    `params` is a dictionary of configuration options, generated by
    Ganglia out of values specified in the module's .pyconf file. It
    should contain an 'endpoint' key, specifying the address of the
    streaming endpoint. Example:

        param endpoint {
            value = 'tcp://127.0.0.1:8423'
        }

    """
    endpoint = params['endpoint']
    counter = {name: 0 for pattern, name, description in patterns}

    thread = threading.Thread(target=count_errors, args=(counter, endpoint))
    thread.daemon = True
    thread.start()

    time.sleep(2)

    return [{
        'name': name,
        'value_type': 'uint',
        'format': '%d',
        'units': 'errors',
        'slope': 'positive',
        'time_max': 15,
        'description': description,
        'groups': 'mediawiki',
        'call_back': counter.get,
    } for pattern, name, description in patterns]


def metric_cleanup():
    """Teardown; part of Gmond interface"""
    pass


if __name__ == '__main__':
    # Self-test: report metrics to stdout every 10 seconds.
    import sys

    if len(sys.argv) != 2:
        sys.exit('Usage: %s tcp://HOST:PORT' % __file__)

    params = {'endpoint': sys.argv[1]}
    metrics = metric_init(params)

    print('Streaming errors from %(endpoint)s...' % params)

    while 1:
        print('\n{:-^32}'.format(time.asctime()))
        for metric in metrics:
            call_back = metric['call_back']
            name = metric['name']
            description = metric['description']
            print('{:.<30}{}'.format(description, call_back(name)))
        time.sleep(10)

# vim: set et ft=python ts=4 sw=4:
