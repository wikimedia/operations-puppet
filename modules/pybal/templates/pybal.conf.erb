# PyBal configuration file
# This file is managed by Puppet!

[global]
bgp = <%= @global_options.fetch('bgp', "no") %>
bgp-local-asn = 64600
bgp-peer-address = <%= @global_options['bgp-peer-address'] %>
#bgp-as-path = 64600 64601
bgp-nexthop-ipv4 = <%= @global_options['bgp-nexthop-ipv4'] %>
bgp-nexthop-ipv6 = <%= @global_options['bgp-nexthop-ipv6'] %>
instrumentation = <%= @global_options.fetch('instrumentation', 'yes') %>
<% if @global_options.fetch('dry-run', nil) %>dry-run = <%= @global_options.fetch('dry-run', 'no') %><% end %>
#
# LVS service definitions
#

<% @lvs_services.sort.each do |servicename, service|
if service['sites'].include?(@site) and @lvs_class_hosts[service['class']].include?(scope.lookupvar("::hostname")) then
    serviceip = service['ip'][@site]
    if serviceip.class.eql?(String) then
        serviceip = { servicename => service['ip'][@site] }
    end
-%>
<% serviceip.sort.each do |subservicename, subserviceip| -%>
# SERVICE <%= subservicename %>
# Class: <%= service['class'] %>
# Description: <%= service['description'] %>
# LVS balancers: <%= @lvs_class_hosts[service['class']].join(" ") %>
<% if service.fetch('protocol', 'tcp') != 'tcp' -%>
[<%= subservicename %>_<%= service.fetch('port', 80) %>_<%= service.fetch('protocol') %>]
<% else -%>
[<%= subservicename %>_<%= service.fetch('port', 80) %>]
<% end -%>
protocol = <%= service.fetch('protocol', "tcp") %>
ip = <%= subserviceip %>
port = <%= service.fetch('port', 80) %>
scheduler = <%= service.fetch('scheduler', "wrr") %>

<% if @config == 'etcd' -%>
<%- conftool = service['conftool'] -%>
config = etcd://<%= @config_host %><%= @conftool_prefix %>/pools/<%= @site %>/<%= conftool['cluster'] %>/<%= conftool['service'] %>/
<%- else -%>
config = http://<%= @config_host %>/pybal/<%= @site %>/<%= servicename %>
<% end -%>

bgp = <%= service.fetch('bgp', "no") %>
depool-threshold = <%= service.fetch('depool-threshold', ".5") %>
monitors = <%= service['monitors'].keys.sort.inspect %>

<% service['monitors'].sort.each do |monitorname, monitor| -%>
# <%= monitorname %> monitor configuration
<% monitor.keys.sort.each do |param|
value = monitor[param] -%>
<%= monitorname.downcase %>.<%= param %> = <%= value.class == Array ? value.inspect : value %>
<% end -%>
<% end -%>

<% end -%>

<% end -%>
<% end -%>
