#!/bin/bash
verbose_opts="--verbose"
force=""
attempts=12
enable=""

show_help() {
    cat << EOF
Usage: ${0##*/} [-q] [-a ATTEMPTS] [-e [MSG]|-f]
Will execute a puppet agent run reliably, waiting for any preceding puppet runs
to complete before starting. This should allow to ensure a coordinated puppet
run after a change is effective everywhere.

Options:
    -q --quiet      Will make the puppet run quiet and not output any verbose
                    difference.
    -e --enable MSG Will enable puppet if it was disabled with reason MSG.
    -f --force      Will forcibly enable puppet if it's not enabled.
    -a --attempts N When waiting for a preceding puppet run, wait N*10 seconds
                    before giving up.
EOF
}


while :; do
    case "$1" in
        -q|--quiet)  verbose_opts=""
            ;;
        -f|--force)
            force=1
            ;;
        -a|--attempts)
            if [ -n "$2" ]; then
                attempts=$2
                shift
            else
                show_help
                exit 1
            fi
            ;;
        -e|--enable)
            if [ -n "$2" ]; then
                enable=$2
                shift
            else
                show_help
                exit 1
            fi
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        -*)
            printf "Unkown option: %s" "$1" >&2
            show_help
            exit 1
            ;;
        *)
            break
            ;;
    esac
    shift
done

# shellcheck disable=SC1091
. /usr/local/share/bash/puppet-common.sh

test "$force" && puppet agent --enable
test "$enable" && enable-puppet "$enable"

if ! wait_for_puppet "$attempts"; then
    SECONDS=$(( $attempts * 10 ))
    echo "Waited ${SECONDS} seconds and a preceding puppet run is still ongoing, aborting"
    exit 1
fi
puppet agent --onetime --no-daemonize $verbose_opts --no-splay --show_diff \
       --ignorecache --no-usecacheonfailure
