#!/usr/bin/ruby

# A simple nagios check that should be run as root an
# can check when the last run was done of puppet.
# It can also check fail counts and skip machines
# that are not enabled
#
# The script will use the puppet last_run-summary.yaml
# file to determine when last Puppet ran

require 'optparse'
require 'yaml'
require 'json' # TODO: Remove once we are free from precise

runlockfile = "/var/lib/puppet/state/agent_catalog_run.lock"
adminlockfile = "/var/lib/puppet/state/agent_disabled.lock"
summaryfile = "/var/lib/puppet/state/last_run_summary.yaml"
enabled = true
running = false
lastrun = 0
failcount = 0
warn = 0
crit = 0
enabled_only = false

opt = OptionParser.new

opt.on("--critical [CRIT]", "-c", Integer, "Critical staleness threshold, time in seconds") do |f|
    crit = f.to_i
end

opt.on("--warn [WARN]", "-w", Integer, "Warning staleness threshold, time in seconds") do |f|
    warn = f.to_i
end

opt.on("--only-enabled", "-e", "Only alert if Puppet is enabled") do
    enabled_only = true
end

opt.on("--runlock-file [FILE]", "-l", "Location of the run lock file, default #{runlockfile}") do |f|
    runlockfile = f
end

opt.on("--adminlock-file [FILE]", "-a", "Location of the admin lock file, default #{adminlockfile}") do |f|
    adminlockfile = f
end

opt.on("--summary-file [FILE]", "-s", "Location of the summary file, default #{summaryfile}") do |f|
    summaryfile = f
end

opt.parse!

if warn == 0 || crit == 0
    puts "Please specify a warning and critical level"
    exit 3
end

if File.exists?(adminlockfile)
       enabled = false
       # TODO: ruby 1.8 YAML parser sucks. Once we are free, transform into
       # disabled_message = YAML.load_file(adminlockfile)["disabled_message"]
       tmp = JSON.parse(File.read(adminlockfile))
       disabled_message = tmp["disabled_message"]
end

if File.exists?(runlockfile)
       running = true
end

if File.exists?(summaryfile)
    begin
        summary = YAML.load_file(summaryfile)
        lastrun = summary["time"]["last_run"]

        # machines that outright failed to run like on missing dependencies
        # are treated as huge failures. The yaml file will be valid but
        # it wont have anything but last_run in it
        unless summary.include?("events")
            failcount = :failed
        else
            failcount = summary["events"]["failure"]
        end
    rescue
        failcount = :failed_to_parse_summary_file
        summary = nil
    end
else
    failcount = :no_summary_file
end

def time_ago(s)
  units = {86400 => 'day', 3600 => 'hour', 60 => 'minute', 1 => 'second'}
  if s == 0
    return "0 seconds"
  end
  units.sort.reverse.each do |len, unit|
    return "#{s / len} #{unit}#{'s' if s / len > 1}" if s >= len
  end
  "Indeterminate amount of time (see time_ago)"
end


if failcount == :failed
    puts "CRITICAL: puppet fail"
    exit 2
end

if failcount == :failed_to_parse_summary_file || failcount == :no_summary_file
    puts "UNKNOWN: Failed to check. Reason is: #{failcount}"
    exit 3
end

time_since_last_run = Time.now.to_i - lastrun
human_time_since_last_run = time_ago(time_since_last_run)

if enabled_only && enabled == false
    puts "OK: Puppet is currently disabled, not alerting. Last run #{human_time_since_last_run} ago with #{failcount} failures"
    exit 0
end

if not enabled
    puts "WARNING: Puppet is currently disabled, message: #{disabled_message}, last run #{human_time_since_last_run} ago with #{failcount} failures"
    exit 1
end

if failcount > 0
    puts "CRITICAL: Puppet has #{failcount} failures"
    exit 2
end

if time_since_last_run >= crit
    puts "CRITICAL: Puppet last ran #{human_time_since_last_run} ago"
    exit 2
end

if time_since_last_run >= warn
    puts "WARNING: Puppet last ran #{human_time_since_last_run} ago"
    exit 1
end

puts "OK: Puppet is currently enabled, last run #{human_time_since_last_run} ago with #{failcount} failures"
exit 0
