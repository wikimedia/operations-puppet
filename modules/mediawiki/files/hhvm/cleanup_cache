#!/usr/bin/python
import urllib2
import sqlite3, sys
import logging
from logging.handlers import SysLogHandler
import argparse
def get_repo_schema():
    """
    Gets the repository schema version from the hhvm admin interface
    """
    response = urllib2.urlopen('http://localhost:9002/repo-schema')
    return response.read()

def delete_and_vacuum(dbh, tables):
    """
    Drops stale tables and vacuums the database
    """
    log = logging.getLogger('cleanup_hhvm_cache')
    cur = dbh.cursor()
    log.info("Deleting tables")
    for table in tables:
        log.debug("Deleting table %s", table)
        cur.execute("DROP TABLE {}".format(table))
    log.info("Vacuuming the db")
    cur.execute("VACUUM")
    log.info("Done")

def setup_logging(debug=False):
    """
    Setting up logging
    """
    log_format = '%(name)s: %(levelname)s - %(message)s'
    log = logging.getLogger('cleanup_hhvm_cache')
    if not debug:
        #if normal mode, log to syslog
        log.setLevel(logging.INFO)
        log.propagate = False
        handler = SysLogHandler(
            address='/dev/log',
            facility=SysLogHandler.LOG_LOCAL3)
        formatter = logging.Formatter(fmt=log_format)
        handler.setFormatter(formatter)
        log.addHandler(handler)
    else:
        #if debug mode, print to stderr
        logging.basicConfig(level=logging.DEBUG, format=log_format)
    return log



def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--debug', action='store_true', default=False)
    parser.add_argument('--noop', action='store_true', default=False)
    parser.add_argument('filename')
    args = parser.parse_args()
    log = setup_logging(args.debug)
    try:
        repo_schema = get_repo_schema()
        if not repo_schema:
            log.error("Got an empty schema, cannot continue")
            sys.exit(1)
        else:
            log.info("Current schema version is %s", repo_schema)
            hhvm_db = args.filename
        with sqlite3.connect(hhvm_db) as dbh:
            cursor = dbh.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables_to_clean = [table for (table,) in cursor.fetchall() \
                               if not table.endswith(repo_schema)]
            printable_tables = ", ".join(tables_to_clean)
            if args.noop:
                log.info("Tables to remove: %s", printable_tables)
                log.info("NOT deleting tables (noop)")
            else:
                log.debug("Tables to remove: %s", printable_tables)
                delete_and_vacuum(dbh, tables_to_clean)
    except Exception as e:
        log.error("Execution failed with error %s", e)
        sys.exit(1)

if __name__ == '__main__':
    main()
