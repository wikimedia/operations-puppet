#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
  mwerrors.py
  ~~~~~~~~~~~

  This is a Gmond metric-gathering module; it listens on a UDP port for
  MediaWiki fatals and exceptions and reports them to Ganglia.

  To use this module, copy this file to /usr/lib/ganglia/python_modules.
  Then edit mwerrors.pyconf and ensure the UDP port is correct. Finally,
  copy mwerrors.pyconf to /etc/ganglia/conf.d and run 'service
  ganglia-monitor restart'.

  You can test this module by invoking it from the command line with the
  UDP port number as an argument. When invoked from the command line,
  this script will emit a count of errors every ten seconds.

  Copyright (C) 2013, Ori Livneh <ori@wikimedia.org>
  Licensed under the terms of the GNU General Public License, version 2
  or later.

"""
import sys
reload(sys)
sys.setdefaultencoding('utf8')

import io
import socket
import threading
import time


BLOCK_SIZE = 65536  # Matches Udp2LogConfig::BLOCK_SIZE

patterns = (
    # Substring to match                # Metric      # Metric title
    ('Fatal error: Out of memory',      'oom',        'OOM fatals'),
    ('Fatal error: Maximum execution',  'timelimit',  'Time limit fatals'),
    ('Fatal error:',                    'fatal',      'Misc fatals'),
    ('Exception from',                  'exception',  'Exceptions'),
    ('Catchable fatal error',           'catchable',  'Catchable fatals'),
    ('DatabaseBase->reportQueryError',  'query',      'Query errors'),
)


def count_errors(counter, port):
    """Count error types in error stream."""
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock.bind(('0.0.0.0', port))
    with io.open(sock.fileno(), buffering=BLOCK_SIZE, encoding='utf8',
                 errors='replace') as f:
        for line in f:
            for pattern, name, description in patterns:
                if pattern in line:
                    counter[name] += 1
                    break


def metric_init(params):
    """
    Initialize; part of Gmond interface

    `params` is a dictionary of configuration options, generated by
    Ganglia out of values specified in the module's .pyconf file. It
    should contain an 'port' key, specifying the UDP port to listen on.

        param port {
            value = "8423"
        }

    """
    port = int(params['port'])
    counter = {name: 0 for pattern, name, description in patterns}

    thread = threading.Thread(target=count_errors, args=(counter, port))
    thread.daemon = True
    thread.start()

    time.sleep(2)

    return [{
        'name': name,
        'value_type': 'uint',
        'format': '%d',
        'units': 'errors',
        'slope': 'positive',
        'time_max': 15,
        'description': description,
        'groups': 'mediawiki',
        'call_back': counter.get,
    } for pattern, name, description in patterns]


def metric_cleanup():
    """Teardown; part of Gmond interface"""
    pass


if __name__ == '__main__':
    # Self-test: report metrics to stdout every 10 seconds.
    import sys

    if len(sys.argv) != 2:
        sys.exit('Usage: %s PORT' % __file__)

    params = {'port': sys.argv[1]}
    metrics = metric_init(params)

    print('Listening on %(port)s...' % params)

    while 1:
        print('\n{:-^32}'.format(time.asctime()))
        for metric in metrics:
            call_back = metric['call_back']
            name = metric['name']
            description = metric['description']
            print('{:.<30}{}'.format(description, call_back(name)))
        time.sleep(10)

# vim: set et ft=python ts=4 sw=4:
