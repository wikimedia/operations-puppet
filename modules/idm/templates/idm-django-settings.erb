<%#- SPDX-License-Identifier: Apache-2.0 -%>
from django.urls import reverse_lazy
from ldap3 import HASHED_SALTED_SHA

from bitu.base_settings import *
<%- if @production == false -%>
import structlog
<%- end -%>

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '<%= @django_secret_key %>'

# SECURITY WARNING: don't run with debug turned on in production!
# Never set DEBUG to True in production environment, that includes
# staging as this WILL leak passwords.
DEBUG = False

ALLOWED_HOSTS = ['<%= @service_fqdn %>',]
ADMINS = [('Infrastruction Foundations','sre-foundations@wikimedia.org'),]
ADMINS_LIMITED = ['slyngshede@wikimedia.org', 'mmuhlenhoff@wikimedia.org']

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

<%- if @production -%>
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': '<%= @django_mysql_db_name %>',
        'HOST': '<%= @django_mysql_db_host %>',
        'USER': '<%= @django_mysql_db_user %>',
        'PASSWORD': '<%= @django_mysql_db_password %>',
    }
}
<%- else -%>
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': '/srv/idm/db.sqlite3', # noqa
    }
}
<%- end -%>

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} {message}',
            'style': '{',
        },
        <%- if @production == false -%>
        'json': {
            '()': structlog.stdlib.ProcessorFormatter,
            'processor': structlog.processors.JSONRenderer(),
        },
        <%- end -%>
    },
    'handlers': {
        'mail_admins': {
          'level': 'ERROR',
          'class': 'django.utils.log.AdminEmailHandler',
          'include_html': DEBUG  # Use debug (False) to avoid sending sensetive information in emails.
        },
        'django': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': '<%= @log_dir %>/django.log',
            'formatter': 'simple',
        },
        'bitu': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': '<%= @log_dir %>/idm.log',
            'formatter': 'simple',
        },
        <%- if @production == false -%>
        'audit': {
            'level': 'INFO',
            'class': 'logging.handlers.WatchedFileHandler',
            'filename': '<%= @log_dir %>/audit.log',
            'formatter': 'json'
        },
        <%- end -%>
    },
    'loggers': {
        'django': {
            'handlers': ['django'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'bitu': {
            'handlers': ['bitu'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'social': {
            'handlers': ['bitu'],
            'level': 'DEBUG',
            'propagate': True,
        },
        <%- if @production == false -%>
        'audit': {
            'handlers': ['audit',],
            'level': 'INFO',
            'propagate': True
        },
        <%- end -%>
    },
}
<%- if @production == false -%>
structlog.configure(
    processors=[
        structlog.contextvars.merge_contextvars,
        structlog.stdlib.filter_by_level,
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.stdlib.ProcessorFormatter.wrap_for_formatter,
    ],
    logger_factory=structlog.stdlib.LoggerFactory(),
    cache_logger_on_first_use=True,
)
<%- end -%>

RQ_QUEUES = {
    'default': {
        'HOST': '<%= @redis_master %>',
        'PORT': <%= @redis_port %>,
        'DB': 0,
        'PASSWORD': '<%= @redis_password %>',
        'DEFAULT_TIMEOUT': 360,
    },
    'notification': {
        'HOST': '<%= @redis_master %>',
        'PORT': <%= @redis_port %>,
        'DB': 0,
        'PASSWORD': '<%= @redis_password %>',
        'DEFAULT_TIMEOUT': 360,
    },
}

# Wikimedia IDM configuration

LDAP_USER_CONF = {
    'default_gid': 500,
}

BITU_LDAP = {
    'uri': ['ldaps://<%= @ldap_config["rw-server"] %>',],
    'username': '<%= @ldap_dn %>',
    'password': '<%= @ldap_dn_password %>',
    'ppolicy': 'cn=disabled,ou=ppolicies,<%= @ldap_config["base-dn"] %>',
    'readonly': False,
    'connection_timeout': 5,
    'users': {
        'dn': '<%= @ldap_config["users_cn"] %>,<%= @ldap_config["base-dn"] %>',
        'object_classes': ['inetOrgPerson'],
        'auxiliary_classes': ['posixAccount', 'wikimediaPerson', 'ldapPublicKey'],
    },
    'groups': {
        'dn': '<%= @ldap_config["groups_cn"] %>,<%= @ldap_config["base-dn"] %>',
        'object_classes': ['groupOfNames',],
        'auxiliary_classes': ['posixGroup',]
    }
}

BITU_SUB_SYSTEMS = {
    'ldapbackend': {
        'default_gid': 500,
        'manage_ssh_keys': True,
        'permissions': 'ldapbackend.permission.LDAPPermissions',
        'ssh_keys_display_name': 'Wikimedia Cloud Services SSH keys',
        'password_hash': 'ldapbackend.helpers.hash_password',
        'password_hash_method': HASHED_SALTED_SHA,
        'default_groups': [],
        'attributes': {
            'view': [{'name': 'uid', 'display': 'SSH access (shell) username'},
                     {'name': 'mail', 'display': 'e-mail', 'action': reverse_lazy('accounts:email'), 'action_label': 'Update'},
                     {'name': 'wikimediaGlobalAccountName', 'display': 'Wikimedia Global Account (SUL)', 'tooltip': 'This is the account you use when signing into one of Wikimedias wikis, e.g. Wikipedia.',
                      'action': reverse_lazy('social:begin', args=['mediawiki']), 'action_label': 'refresh â†º'},
                     {'name': 'uidNumber', 'display': 'POSIX User ID', 'tooltip': 'If you have SSH access to Cloud VPS, Toolforge or other Wikimedia servers, this will be the ID they use to identify you.'},
                     {'name': 'gidNumber', 'display': 'POSIX Group ID', 'tooltip': 'If you have SSH access to Cloud VPS, Toolforge or other Wikimedia servers, this will be the ID of your primary user group.'},
                     {'name': 'loginShell', 'display': 'Shell', 'tooltip': 'This is the command-line interface presented to you if you have SSH access to Wikimedia servers.'}
            ]
        },
    }
}

BITU_SSH_KEY_VALIDATOR = {
    'allowed_key_type': {
        'ssh-rsa': {'min_key_size': 2048},
        'ssh-ecdsa': {},
        'ssh-ed25519': {},
        'sk-ssh-ed25519@openssh.com': {},
        'sk-ssh-ecdsa@openssh.com': {},
        'ecdsa-sha2-nistp256': {}
    }
}

BITU_DOMAIN = 'https://<%= @service_fqdn %>'
BITU_NOTIFICATION = {
    'default_sender': 'no-reply@wikimedia.org',
    'signup_template_prefix': 'email_wmf_signup_activation',
    'signup_subject': 'Wikimedia Developer Account activation'
}

# Signup settings:
# Enable validators
SIGNUP_USERNAME_VALIDATORS = ['ldapbackend.validators.LDAPUsernameValidator',
                              'ldapbackend.validators.LDAPCommonNameValidator',
                              'signups.validators.UsernameValidator']

SIGNUP_UID_VALIDATORS = ['ldapbackend.validators.unix_username_regex_validator',
                         'ldapbackend.validators.unix_username_length_validator',
                         'signups.validators.UsernameValidator',
                         'ldapbackend.validators.LDAPUsernameValidator',
                         'ldapbackend.validators.LDAPCommonNameValidator']

# Display Wikimedia Foundation Signup message
SIGNUP_INFO_TEMPLATE = 'signup_info_wmf.html'


# Social Auth
# Autheticate users via CAS / OIDC
AUTHENTICATION_BACKENDS = [
    "social_core.backends.cas.CASOpenIdConnectAuth",
    "social_core.backends.mediawiki.MediaWiki",
    "django.contrib.auth.backends.ModelBackend",
]

SOCIAL_AUTH_CAS_OIDC_ENDPOINT = '<%= @oidc["endpoint"] %>'
SOCIAL_AUTH_CAS_KEY = '<%= @oidc["key"] %>'
SOCIAL_AUTH_CAS_SECRET = '<%= @oidc["secret"] %>'
SOCIAL_AUTH_CAS_USERINFO_URL = '<%= @oidc["endpoint"] %>/profile'
SOCIAL_AUTH_CAS_SCOPE = ['openid', 'profile', 'email', 'groups']
SOCIAL_AUTH_CAS_ID_KEY = 'username'

SOCIAL_AUTH_MEDIAWIKI_KEY = '<%= @mediawiki["key"] %>'
SOCIAL_AUTH_MEDIAWIKI_SECRET = '<%= @mediawiki["secret"] %>'
SOCIAL_AUTH_MEDIAWIKI_URL = 'https://meta.wikimedia.org/w/index.php'
SOCIAL_AUTH_MEDIAWIKI_CALLBACK = '<%= @mediawiki["callback"] %>'

SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.social_auth.associate_by_email',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
    'bitu.social_pipeline.add_user_to_groups',
)

# Byparse most pipelines to avoid issues with groups and
# prevent logging in with MediaWiki account.
SOCIAL_AUTH_MEDIAWIKI_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'wikimedia.social_pipeline.global_account_link'
)

LOGIN_URL = 'wikimedia:login'
LOGIN_REDIRECT_URL = 'ldapbackend:properties'
LOGOUT_REDIRECT_URL = LOGIN_URL

# CAPTCHA settings, use our own generator
CAPTCHA_CHALLENGE_FUNCT = 'signups.forms.captcha_input_generator'
CAPTCHA_IMAGE_SIZE = (130,40)

<%- if @enable_api -%>
# Bitu API
ENABLE_API = True
API_PERMISSIONS = (
  'accounts.add_token',
)
<%- end -%>

<%- if @production == false -%>
ACCESS_REQUEST_RULES = {
    'ldapbackend': {
        'cn=idptest-users,ou=groups,dc=wikimedia,dc=org': [{
            'module': 'permissions.validators.manager_approval',
            'managers': ['slyngshede', 'jmm'],
            'count': 2
        }],
    }
}
<%- end -%>

<%- if @mediawiki_oauth -%>
MEDIAWIKI = {
  'host': 'https://meta.wikimedia.org',
  'consumer_token': '<%= @mediawiki_oauth["consumer_token"] %>',
  'consumer_secret': '<%= @mediawiki_oauth["consumer_secret"] %>',
  'access_token': '<%= @mediawiki_oauth["access_token"] %>',
  'access_secret': '<%= @mediawiki_oauth["access_secret"] %>',
  'user_agent': 'Bitu IDM'
}
<%- end -%>

# Settings for integrations for account blocking features.
USER_AGENT = 'Bitu Identity Manager/0.1'
ACCOUNT_MANAGERS = []

GERRIT = {
    'base_url': 'https://gerrit.wikimedia.org',
    'user': '<%= @gerrit_user %>',
    'password': '<%= @gerrit_password %>'
}

GITLAB = {
  'base_url': '<%- if @production -%>https://gitlab.wikimedia.org/api/v4/<%- else -%>http://gitlab.devtools.wmcloud.org/api/v4/<%- end -%>',
  'token': '<%= @gitlab_token %>'
}

PHABRICATOR_URI = 'https://phabricator.wikimedia.org'
PHABRICATOR_API_TOKEN = '<%= @phabricator_token %>'

<%- if @install_via_git -%>
STATICFILES_DIRS = [
  '/srv/idm/bitu/src/bitu/static/',
]
<%- end -%>
