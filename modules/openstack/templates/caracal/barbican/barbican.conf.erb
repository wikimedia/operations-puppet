# SPDX-License-Identifier: Apache-2.0

[DEFAULT]

#
# From barbican.common.config
#

# Role used to identify an authenticated user as administrator. (string value)
#admin_role = admin

# Allow unauthenticated users to access the API with read-only privileges. This only applies when using ContextMiddleware. (boolean value)
#allow_anonymous_access = false

# Maximum allowed http request size against the barbican-api. (integer value)
#max_allowed_request_size_in_bytes = 15000

# Maximum allowed secret size in bytes. (integer value)
#max_allowed_secret_in_bytes = 10000

# Host name, for use in HATEOAS-style references Note: Typically this would be the load balanced endpoint that clients would use to
# communicate back with this service. If a deployment wants to derive host from wsgi request instead then make this blank. Blank is needed
# to override default config value which is 'http://localhost:9311' (string value)
#host_href = http://localhost:9311

# SQLAlchemy connection string for the reference implementation registry server. Any valid SQLAlchemy connection string is fine. See:
# http://www.sqlalchemy.org/docs/05/reference/sqlalchemy/connections.html#sqlalchemy.create_engine. Note: For absolute addresses, use '////'
# slashes after 'sqlite:'. (string value)
sql_connection = mysql+pymysql://<%= @db_user %>:<%= @db_pass %>@<%= @db_host %>/<%= @db_name %>

# Period in seconds after which SQLAlchemy should reestablish its connection to the database. MySQL uses a default `wait_timeout` of 8
# hours, after which it will drop idle connections. This can result in 'MySQL Gone Away' exceptions. If you notice this, you can lower this
# value to ensure that SQLAlchemy reconnects before MySQL can drop the connection. (integer value)
#sql_idle_timeout = 3600

# Maximum number of database connection retries during startup. Set to -1 to specify an infinite retry count. (integer value)
#sql_max_retries = 60

# Interval between retries of opening a SQL connection. (integer value)
#sql_retry_interval = 1

# Create the Barbican database on service startup. (boolean value)
#db_auto_create = true

# Maximum page size for the 'limit' paging URL parameter. (integer value)
#max_limit_paging = 100

# Default page size for the 'limit' paging URL parameter. (integer value)
#default_limit_paging = 10

# Accepts a class imported from the sqlalchemy.pool module, and handles the details of building the pool for you. If commented out,
# SQLAlchemy will select based on the database dialect. Other options are QueuePool (for SQLAlchemy-managed connections) and NullPool (to
# disabled SQLAlchemy management of connections). See http://docs.sqlalchemy.org/en/latest/core/pooling.html for more details (string value)
#sql_pool_class = QueuePool

# Show SQLAlchemy pool-related debugging output in logs (sets DEBUG log level output) if specified. (boolean value)
#sql_pool_logging = false

# Size of pool used by SQLAlchemy. This is the largest number of connections that will be kept persistently in the pool. Can be set to 0 to
# indicate no size limit. To disable pooling, use a NullPool with sql_pool_class instead. Comment out to allow SQLAlchemy to select the
# default. (integer value)
#sql_pool_size = 5

# # The maximum overflow size of the pool used by SQLAlchemy. When the number of checked-out connections reaches the size set in
# sql_pool_size, additional connections will be returned up to this limit. It follows then that the total number of simultaneous connections
# the pool will allow is sql_pool_size + sql_pool_max_overflow. Can be set to -1 to indicate no overflow limit, so no limit will be placed
# on the total number of concurrent connections. Comment out to allow SQLAlchemy to select the default. (integer value)
#sql_pool_max_overflow = 10

# Enable eventlet backdoor.  Acceptable values are 0, <port>, and <start>:<end>, where 0 results in listening on a random tcp port number;
# <port> results in listening on the specified port number (and not enabling backdoor if that port is in use); and <start>:<end> results in
# listening on the smallest unused port number within the specified range of port numbers.  The chosen port is displayed in the service's
# log file. (string value)
#backdoor_port = <None>

# Enable eventlet backdoor, using the provided path as a unix socket that can receive connections. This option is mutually exclusive with
# 'backdoor_port' in that only one should be provided. If both are provided then the existence of this option overrides the usage of that
# option. (string value)
#backdoor_socket = <None>

#
# From oslo.log
#

# If set to true, the logging level will be set to DEBUG instead of the default INFO level. (boolean value)
# Note: This option can be changed without restarting.
#debug = false

# The name of a logging configuration file. This file is appended to any existing logging configuration files. For details about logging
# configuration files, see the Python logging module documentation. Note that when logging configuration files are used then all logging
# configuration is set in the configuration file and other logging configuration options are ignored (for example,
# logging_context_format_string). (string value)
# Note: This option can be changed without restarting.
# Deprecated group/name - [DEFAULT]/log_config
#log_config_append = <None>

# Defines the format string for %%(asctime)s in log records. Default: %(default)s . This option is ignored if log_config_append is set.
# (string value)
#log_date_format = %Y-%m-%d %H:%M:%S

# (Optional) Name of log file to send logging output to. If no default is set, logging will go to stderr as defined by use_stderr. This
# option is ignored if log_config_append is set. (string value)
# Deprecated group/name - [DEFAULT]/logfile
#log_file = <None>

# (Optional) The base directory used for relative log_file  paths. This option is ignored if log_config_append is set. (string value)
# Deprecated group/name - [DEFAULT]/logdir
#log_dir = <None>

# Uses logging handler designed to watch file system. When log file is moved or removed this handler will open a new log file with specified
# path instantaneously. It makes sense only if log_file option is specified and Linux platform is used. This option is ignored if
# log_config_append is set. (boolean value)
#watch_log_file = false

# Use syslog for logging. Existing syslog format is DEPRECATED and will be changed later to honor RFC5424. This option is ignored if
# log_config_append is set. (boolean value)
#use_syslog = false

# Enable journald for logging. If running in a systemd environment you may wish to enable journal support. Doing so will use the journal
# native protocol which includes structured metadata in addition to log messages.This option is ignored if log_config_append is set.
# (boolean value)
#use_journal = false

# Syslog facility to receive log lines. This option is ignored if log_config_append is set. (string value)
#syslog_log_facility = LOG_USER

# Use JSON formatting for logging. This option is ignored if log_config_append is set. (boolean value)
#use_json = false

# Log output to standard error. This option is ignored if log_config_append is set. (boolean value)
#use_stderr = false

# Format string to use for log messages with context. (string value)
#logging_context_format_string = %(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [%(request_id)s %(user_identity)s] %(instance)s%(message)s

# Format string to use for log messages when context is undefined. (string value)
#logging_default_format_string = %(asctime)s.%(msecs)03d %(process)d %(levelname)s %(name)s [-] %(instance)s%(message)s

# Additional data to append to log message when logging level for the message is DEBUG. (string value)
#logging_debug_format_suffix = %(funcName)s %(pathname)s:%(lineno)d

# Prefix each line of exception output with this format. (string value)
#logging_exception_prefix = %(asctime)s.%(msecs)03d %(process)d ERROR %(name)s %(instance)s

# Defines the format string for %(user_identity)s that is used in logging_context_format_string. (string value)
#logging_user_identity_format = %(user)s %(tenant)s %(domain)s %(user_domain)s %(project_domain)s

# List of package logging levels in logger=LEVEL pairs. This option is ignored if log_config_append is set. (list value)
#default_log_levels = amqp=WARN,amqplib=WARN,boto=WARN,qpid=WARN,sqlalchemy=WARN,suds=INFO,oslo.messaging=INFO,oslo_messaging=INFO,iso8601=WARN,requests.packages.urllib3.connectionpool=WARN,urllib3.connectionpool=WARN,websocket=WARN,requests.packages.urllib3.util.retry=WARN,urllib3.util.retry=WARN,keystonemiddleware=WARN,routes.middleware=WARN,stevedore=WARN,taskflow=WARN,keystoneauth=WARN,oslo.cache=INFO,dogpile.core.dogpile=INFO

# Enables or disables publication of error events. (boolean value)
#publish_errors = false

# The format for an instance that is passed with the log message. (string value)
#instance_format = "[instance: %(uuid)s] "

# The format for an instance UUID that is passed with the log message. (string value)
#instance_uuid_format = "[instance: %(uuid)s] "

# Interval, number of seconds, of log rate limiting. (integer value)
#rate_limit_interval = 0

# Maximum number of logged messages per rate_limit_interval. (integer value)
#rate_limit_burst = 0

# Log level name used by rate limiting: CRITICAL, ERROR, INFO, WARNING, DEBUG or empty string. Logs with level greater or equal to
# rate_limit_except_level are not filtered. An empty string means that all levels are filtered. (string value)
#rate_limit_except_level = CRITICAL

# Enables or disables fatal status of deprecations. (boolean value)
#fatal_deprecations = false

#
# From oslo.messaging
#

# Size of RPC connection pool. (integer value)
#rpc_conn_pool_size = 30

# The pool size limit for connections expiration policy (integer value)
#conn_pool_min_size = 2

# The time-to-live in sec of idle connections in the pool (integer value)
#conn_pool_ttl = 1200

# ZeroMQ bind address. Should be a wildcard (*), an ethernet interface, or IP. The "host" option should point or resolve to this address.
# (string value)
#rpc_zmq_bind_address = *

# MatchMaker driver. (string value)
# Possible values:
# redis - <No description provided>
# sentinel - <No description provided>
# dummy - <No description provided>
#rpc_zmq_matchmaker = redis

# Number of ZeroMQ contexts, defaults to 1. (integer value)
#rpc_zmq_contexts = 1

# Maximum number of ingress messages to locally buffer per topic. Default is unlimited. (integer value)
#rpc_zmq_topic_backlog = <None>

# Directory for holding IPC sockets. (string value)
#rpc_zmq_ipc_dir = /var/run/openstack

# Name of this node. Must be a valid hostname, FQDN, or IP address. Must match "host" option, if running Nova. (string value)
#rpc_zmq_host = localhost

# Number of seconds to wait before all pending messages will be sent after closing a socket. The default value of -1 specifies an infinite
# linger period. The value of 0 specifies no linger period. Pending messages shall be discarded immediately when the socket is closed.
# Positive values specify an upper bound for the linger period. (integer value)
# Deprecated group/name - [DEFAULT]/rpc_cast_timeout
#zmq_linger = -1

# The default number of seconds that poll should wait. Poll raises timeout exception when timeout expired. (integer value)
#rpc_poll_timeout = 1

# Expiration timeout in seconds of a name service record about existing target ( < 0 means no timeout). (integer value)
#zmq_target_expire = 300

# Update period in seconds of a name service record about existing target. (integer value)
#zmq_target_update = 180

# Use PUB/SUB pattern for fanout methods. PUB/SUB always uses proxy. (boolean value)
#use_pub_sub = false

# Use ROUTER remote proxy. (boolean value)
#use_router_proxy = false

# This option makes direct connections dynamic or static. It makes sense only with use_router_proxy=False which means to use direct
# connections for direct message types (ignored otherwise). (boolean value)
#use_dynamic_connections = false

# How many additional connections to a host will be made for failover reasons. This option is actual only in dynamic connections mode.
# (integer value)
#zmq_failover_connections = 2

# Minimal port number for random ports range. (port value)
# Minimum value: 0
# Maximum value: 65535
#rpc_zmq_min_port = 49153

# Maximal port number for random ports range. (integer value)
# Minimum value: 1
# Maximum value: 65536
#rpc_zmq_max_port = 65536

# Number of retries to find free port number before fail with ZMQBindError. (integer value)
#rpc_zmq_bind_port_retries = 100

# Default serialization mechanism for serializing/deserializing outgoing/incoming messages (string value)
# Possible values:
# json - <No description provided>
# msgpack - <No description provided>
#rpc_zmq_serialization = json

# This option configures round-robin mode in zmq socket. True means not keeping a queue when server side disconnects. False means to keep
# queue and messages even if server is disconnected, when the server appears we send all accumulated messages to it. (boolean value)
#zmq_immediate = true

# Enable/disable TCP keepalive (KA) mechanism. The default value of -1 (or any other negative value) means to skip any overrides and leave
# it to OS default; 0 and 1 (or any other positive value) mean to disable and enable the option respectively. (integer value)
#zmq_tcp_keepalive = -1

# The duration between two keepalive transmissions in idle condition. The unit is platform dependent, for example, seconds in Linux,
# milliseconds in Windows etc. The default value of -1 (or any other negative value and 0) means to skip any overrides and leave it to OS
# default. (integer value)
#zmq_tcp_keepalive_idle = -1

# The number of retransmissions to be carried out before declaring that remote end is not available. The default value of -1 (or any other
# negative value and 0) means to skip any overrides and leave it to OS default. (integer value)
#zmq_tcp_keepalive_cnt = -1

# The duration between two successive keepalive retransmissions, if acknowledgement to the previous keepalive transmission is not received.
# The unit is platform dependent, for example, seconds in Linux, milliseconds in Windows etc. The default value of -1 (or any other negative
# value and 0) means to skip any overrides and leave it to OS default. (integer value)
#zmq_tcp_keepalive_intvl = -1

# Maximum number of (green) threads to work concurrently. (integer value)
#rpc_thread_pool_size = 100

# Expiration timeout in seconds of a sent/received message after which it is not tracked anymore by a client/server. (integer value)
#rpc_message_ttl = 300

# Wait for message acknowledgements from receivers. This mechanism works only via proxy without PUB/SUB. (boolean value)
#rpc_use_acks = false

# Number of seconds to wait for an ack from a cast/call. After each retry attempt this timeout is multiplied by some specified multiplier.
# (integer value)
#rpc_ack_timeout_base = 15

# Number to multiply base ack timeout by after each retry attempt. (integer value)
#rpc_ack_timeout_multiplier = 2

# Default number of message sending attempts in case of any problems occurred: positive value N means at most N retries, 0 means no retries,
# None or -1 (or any other negative values) mean to retry forever. This option is used only if acknowledgments are enabled. (integer value)
#rpc_retry_attempts = 3

# List of publisher hosts SubConsumer can subscribe on. This option has higher priority then the default publishers list taken from the
# matchmaker. (list value)
#subscribe_on =

# Size of executor thread pool when executor is threading or eventlet. (integer value)
# Deprecated group/name - [DEFAULT]/rpc_thread_pool_size
#executor_thread_pool_size = 64

# Seconds to wait for a response from a call. (integer value)
#rpc_response_timeout = 60

# The network address and optional user credentials for connecting to the messaging backend, in URL format. The expected format is:
#
# driver://[user:pass@]host:port[,[userN:passN@]hostN:portN]/virtual_host?query
#
# Example: rabbit://rabbitmq:password@127.0.0.1:5672//
#
# For full details on the fields in the URL see the documentation of oslo_messaging.TransportURL at
# https://docs.openstack.org/oslo.messaging/latest/reference/transport.html (string value)
#transport_url = <None>

# DEPRECATED: The messaging driver to use, defaults to rabbit. Other drivers include amqp and zmq. (string value)
# This option is deprecated for removal.
# Its value may be silently ignored in the future.
# Reason: Replaced by [DEFAULT]/transport_url
#rpc_backend = rabbit

# The default exchange under which topics are scoped. May be overridden by an exchange name specified in the transport_url option. (string
# value)
#control_exchange = openstack

#
# From oslo.service.periodic_task
#

# Some periodic tasks can be run in a separate process. Should we run them here? (boolean value)
#run_external_periodic_tasks = true

#
# From oslo.service.wsgi
#

# File name for the paste.deploy config for api service (string value)
#api_paste_config = api-paste.ini

# A python format string that is used as the template to generate log lines. The following values can beformatted into it: client_ip,
# date_time, request_line, status_code, body_length, wall_seconds. (string value)
#wsgi_log_format = %(client_ip)s "%(request_line)s" status: %(status_code)s  len: %(body_length)s time: %(wall_seconds).7f

# Sets the value of TCP_KEEPIDLE in seconds for each server socket. Not supported on OS X. (integer value)
#tcp_keepidle = 600

# Size of the pool of greenthreads used by wsgi (integer value)
#wsgi_default_pool_size = 100

# Maximum line size of message headers to be accepted. max_header_line may need to be increased when using large tokens (typically those
# generated when keystone is configured to use PKI tokens with big service catalogs). (integer value)
#max_header_line = 16384

# If False, closes the client socket connection explicitly. (boolean value)
#wsgi_keep_alive = true

# Timeout for client connections' socket operations. If an incoming connection is idle for this number of seconds it will be closed. A value
# of '0' means wait forever. (integer value)
#client_socket_timeout = 900


[certificate]

#
# From barbican.certificate.plugin
#

# Extension namespace to search for plugins. (string value)
#namespace = barbican.certificate.plugin

# List of certificate plugins to load. (multi valued)
#enabled_certificate_plugins = simple_certificate


[certificate_event]

#
# From barbican.certificate.plugin
#

# Extension namespace to search for eventing plugins. (string value)
#namespace = barbican.certificate.event.plugin

# List of certificate plugins to load. (multi valued)
#enabled_certificate_event_plugins = simple_certificate_event


[cors]

#
# From oslo.middleware.cors
#

# Indicate whether this resource may be shared with the domain received in the requests "origin" header. Format:
# "<protocol>://<host>[:<port>]", no trailing slash. Example: https://horizon.example.com (list value)
#allowed_origin = <None>

# Indicate that the actual request can include user credentials (boolean value)
#allow_credentials = true

# Indicate which headers are safe to expose to the API. Defaults to HTTP Simple Headers. (list value)
#expose_headers = X-Auth-Token,X-Openstack-Request-Id,X-Project-Id,X-Identity-Status,X-User-Id,X-Storage-Token,X-Domain-Id,X-User-Domain-Id,X-Project-Domain-Id,X-Roles

# Maximum cache age of CORS preflight requests. (integer value)
#max_age = 3600

# Indicate which methods can be used during the actual request. (list value)
#allow_methods = GET,PUT,POST,DELETE,PATCH

# Indicate which header field names may be used during the actual request. (list value)
#allow_headers = X-Auth-Token,X-Openstack-Request-Id,X-Project-Id,X-Identity-Status,X-User-Id,X-Storage-Token,X-Domain-Id,X-User-Domain-Id,X-Project-Domain-Id,X-Roles


[secretstore]
enabled_secretstore_plugins = store_crypto


[crypto]
enabled_crypto_plugins = simple_crypto

[simple_crypto_plugin]
# the kek should be a 32-byte value which is base64 encoded
kek = <%= @crypto_kek %>

<%= scope.call_function('template', ["openstack/#{@version}/common/keystone_authtoken.erb"]) %>


[keystone_notifications]

#
# From barbican.common.config
#

# True enables keystone notification listener  functionality. (boolean value)
enable = True

# The default exchange under which topics are scoped. May be overridden by an exchange name specified in the transport_url option. (string
# value)
#control_exchange = keystone

# Keystone notification queue topic name. This name needs to match one of values mentioned in Keystone deployment's 'notification_topics'
# configuration e.g.    notification_topics=notifications,     barbican_notificationsMultiple servers may listen on a topic and messages
# will be dispatched to one of the servers in a round-robin fashion. That's why Barbican service should have its own dedicated notification
# queue so that it receives all of Keystone notifications. (string value)
#topic = notifications

# True enables requeue feature in case of notification processing error. Enable this only when underlying transport supports this feature.
# (boolean value)
#allow_requeue = false

# Version of tasks invoked via notifications (string value)
#version = 1.0

# Define the number of max threads to be used for notification server processing functionality. (integer value)
#thread_pool_size = 10
