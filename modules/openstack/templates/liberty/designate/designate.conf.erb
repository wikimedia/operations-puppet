[DEFAULT]
# Where an option is commented out, but filled in this shows the default
# value of that option

########################
## General Configuration
########################
# Show more verbose log output (sets INFO log level output)
verbose = False

# Show debugging output in logs (sets DEBUG log level output)
debug = False

# Top-level directory for maintaining designate's state
state_path = /var/lib/designate

# Log Configuration
#log_config = None

# Log directory
log_dir = /var/log/designate

# Driver used for issuing notifications
notification_driver = messagingv2

# Notification Topics
notification_topics = notifications

# Use "sudo designate-rootwrap /etc/designate/rootwrap.conf" to use the real
# root filter facility.
# Change to "sudo" to skip the filtering and just run the comand directly
root_helper = sudo designate-rootwrap /etc/designate/rootwrap.conf

# Which networking API to use, Defaults to neutron
#network_api = neutron

# we have a lot of instances, so raise quotas:
quota_zones = 25
quota_zone_recordsets = 10000
quota_zone_records = 10000
quota_recordset_records = 20
quota_api_export_size = 1000

# These are used in Liberty but are (I think) deprecated in future versions.
quota_domain_records = 10000
quota_domain_recordsets = 10000

########################
## Service Configuration
########################
#-----------------------
# Central Service
#-----------------------
[service:central]
# Maximum domain name length
max_domain_name_len = 255

# Maximum record name length
max_record_name_len = 255

# Minimum TTL
#min_ttl = None

## Managed resources settings

# Email to use for managed resources like domains created by the FloatingIP API
#managed_resource_email = root@example.io.

# Tenant ID to own all managed resources - like auto-created records etc.
#managed_resource_tenant_id = 123456

#-----------------------
# API Service
#-----------------------
[service:api]
# Address to bind the API server
api_host = 0.0.0.0

# Port the bind the API server to
api_port = 9001

# Authentication strategy to use - can be either "noauth" or "keystone"
auth_strategy = keystone

# Enable Version 1 API
enable_api_v1 = True

# Enable Version 2 API
enable_api_v2 = True

enable_host_header = True

api_base_uri=http://<%= @designate_host %>:9001/

# Show the pecan HTML based debug interface (v2 only)
# This is only useful for development, and WILL break python-designateclient
# if an error occurs
#pecan_debug = False

# Enabled API Version 1 extensions
# Can be one or more of : diagnostics, quotas, reports, sync, touch
enabled_extensions_v1 = diagnsotics, quotas, reports, sync

# Enabled API Version 2 extensions
# Can be one or more of : reports, quotas
enabled_extensions_v2 = quotas, reports

# Default per-page limit for the V2 API, a value of None means show all results
# by default.  We need to override because the default is a miserly '20'
default_limit_v2 = 1000

# Max page size in the V2 API
#max_limit_v2 = 1000

# Enable Admin API (experimental)
#enable_api_admin = False

# Enabled Admin API extensions
# Can be one or more of : reports, quotas, counts, tenants, target_sync
# zone export is in zones extension
#enabled_extensions_admin =

# Default per-page limit for the Admin API, a value of None means show all results
# by default.  We need to override because the default is a miserly '20'
default_limit_admin = 1000

# Max page size in the Admin API
#max_limit_admin = 1000


#-----------------------
# Keystone Middleware
#-----------------------
[keystone_authtoken]
auth_host = <%= @keystone_host_ip %>
auth_port = <%= @keystoneconfig["auth_port"] %>
auth_protocol = <%= @keystoneconfig['auth_protocol'] %>
admin_token = <%= @keystoneconfig['admin_token'] %>
auth_uri = http://<%= @nova_controller_ip %>:5000

#-----------------------
# Sink Service
#-----------------------
[service:sink]
# List of notification handlers to enable, configuration of these needs to
# correspond to a [handler:my_driver] section below or else in the config
# Can be one or more of : nova_fixed, neutron_floatingip
enabled_notification_handlers = nova_fixed_multi, nova_ldap

#-----------------------
# mDNS Service
#-----------------------
[service:mdns]
#workers = None
#host = 0.0.0.0
#port = 5354
#tcp_backlog = 100

#-----------------------
# Agent Service
#-----------------------
[service:agent]
#workers = None
#host = 0.0.0.0
#port = 5358
#tcp_backlog = 100
#allow_notify = 127.0.0.1
#masters = 127.0.0.1:5354
#backend_driver = fake


#-----------------------
# Pool Manager Service
#-----------------------
[service:pool_manager]
#workers = None
#pool_id = 794ccc2c-d751-44fe-b57f-8894c9f5c842
#threshold_percentage = 100
#poll_timeout = 30
#poll_retry_interval = 2
#poll_max_retries = 3
#poll_delay = 1
#periodic_recovery_interval = 120
#periodic_sync_interval = 300
#periodic_sync_seconds = None
#cache_driver = sqlalchemy

[pool:794ccc2c-d751-44fe-b57f-8894c9f5c842]
<% if @secondary_pdns_ip != @primary_pdns_ip %>
nameservers = 0f66b842-96c2-4189-93fc-1dc95a08b012, 17474d59-a989-48fb-9f8b-19fbdaeff243
targets = f26e0b32-736f-4f0a-831b-039a415c481e, f845cc43-2052-4d4b-a159-db6fce37b110
<% else %>
nameservers = 0f66b842-96c2-4189-93fc-1dc95a08b012
targets = f26e0b32-736f-4f0a-831b-039a415c481e
<% end %>

# A 'pool_nameserver' is a pdns instance that receives axfr updates.
# This is the primary dns server, currently 'labservices1001'
[pool_nameserver:0f66b842-96c2-4189-93fc-1dc95a08b012]
port = 53
host = <%= @primary_pdns_ip %>


<% if @secondary_pdns_ip != @primary_pdns_ip %>
# A 'pool_nameserver' is a pdns instance that receives axfr updates.
# This is the secondary dns server, 'labservices1002'
[pool_nameserver:17474d59-a989-48fb-9f8b-19fbdaeff243]
port = 53
host = <%= @secondary_pdns_ip %>
<% end %>


# the 'pool_target' is the pdns database, which we write to for zone creation and deletion
[pool_target:f26e0b32-736f-4f0a-831b-039a415c481e]
options = connection: mysql://<%= @designateconfig["pdns_db_user"] %>:<%= @designateconfig["pdns_db_pass"] %>@<%=@primary_pdns_ip%>/<%= @designateconfig["pdns_db_name"] %>, host: <%= @primary_pdns_ip %>, port: 53
# This is an alternate db account with more rights -- this setting should
#  be used when running the db-sync command and the like during upgrades.
#options = connection: mysql://<%= @designateconfig["db_admin_user"] %>:<%= @designateconfig["db_admin_pass"] %>@<%=@primary_pdns_ip%>/<%= @designateconfig["pdns_db_name"] %>, host: <%= @primary_pdns_ip %>, port: 53
# This is a comma separated list of the mdns servers.
#  Note that for this to take effect, the list of masters must also be set in the pdns database:
#  UPDATE pdns.domains SET master="<comman-separated list of masters>"
masters = <%= scope.function_ipresolve([@designate_host, 4]) %>:5354
type = powerdns
# These next two settings are /probably/ unused, it's unclear:
host = <%= @primary_pdns_ip %>
port = 53

<% if @secondary_pdns_ip != @primary_pdns_ip %>
# the 'pool_target' is the pdns database, which we write to for zone creation and deletion
[pool_target:f845cc43-2052-4d4b-a159-db6fce37b110]
options = connection: mysql://<%= @designateconfig["pdns_db_user"] %>:<%= @designateconfig["pdns_db_pass"] %>@<%=@secondary_pdns_ip%>/<%= @designateconfig["pdns_db_name"] %>, host: <%= @primary_pdns_ip %>, port: 53
# This is an alternate db account with more rights -- this setting should
#  be used when running the db-sync command and the like during upgrades.
#options = connection: mysql://<%= @designateconfig["db_admin_user"] %>:<%= @designateconfig["db_admin_pass"] %>@<%=@secondary_pdns_ip%>/<%= @designateconfig["pdns_db_name"] %>, host: <%= @primary_pdns_ip %>, port: 53
# This is a comma separated list of the mdns servers.
#  Note that for this to take effect, the list of masters must also be set in the pdns database:
#  UPDATE pdns.domains SET master="<comman-separated list of masters>"
masters = <%= scope.function_ipresolve([@designate_host, 4]) %>:5354
type = powerdns
# These next two settings are /probably/ unused, it's unclear:
host = <%= @secondary_pdns_ip %>
port = 53
<% end %>

##############
## Network API
##############
#[network_api:neutron]
# Comma separated list of values, formatted "<name>|<neutron_uri>"
#endpoints = RegionOne|http://localhost:9696
#endpoint_type = publicURL
#timeout = 30
#admin_username = designate
#admin_password = designate
#admin_tenant_name = designate
#auth_url = http://localhost:35357/v2.0
#insecure = False
#auth_strategy = keystone
#ca_certificates_file =

########################
## Storage Configuration
########################
#-----------------------
# SQLAlchemy Storage
#-----------------------
[storage:sqlalchemy]
# Database connection string - to configure options for a given implementation
# like sqlalchemy or other see below
connection = mysql://<%= @designateconfig["db_user"] %>:<%= @designateconfig["db_pass"] %>@<%= @designateconfig["db_host"] %>/<%= @designateconfig["db_name"] %>
#connection_debug = 100
#connection_trace = True
idle_timeout = 3600
max_retries = 10
retry_interval = 10

########################
## Handler Configuration
########################
#-----------------------
# Nova Fixed Multi Handler
#-----------------------
[handler:nova_fixed_multi]
# Domain ID of domain to create records in. For a pre-existing domain, in this case eqiad.wmflabs
domain_id = '<%= @designateconfig["domain_id_internal_forward"] %>'
notification_topics = monitor
notification_topics = notifications
control_exchange = nova
format = '%(hostname)s.%(project_name)s.%(domain)s'
format = '%(hostname)s.%(domain)s'
reverse_domain_id = '<%= @designateconfig["domain_id_internal_reverse"] %>'
reverse_format = '%(hostname)s.%(project_name)s.%(domain)s'
keystone_auth_name = "novaadmin"
keystone_auth_pass = "<%= @keystoneconfig['ldap_user_pass'] %>"
keystone_auth_project = <%= @keystoneconfig['admin_project_id'] %>
keystone_auth_url = "http://<%= @designateconfig['controller_hostname'] %>:35357/v3"

#-----------------------
# Nova Fixed Ldap Handler
#-----------------------
[handler:nova_ldap]
# Domain ID of domain to create records in. For a pre-existing domain, in this case eqiad.wmflabs
domain_id = '<%= @designateconfig["domain_id_internal_forward"] %>'
notification_topics = monitor
notification_topics = notifications
control_exchange = nova
format = %(hostname)s.%(project_name)s.%(domain)s, %(hostname)s.%(domain)s
ldapusername = uid=novaadmin,ou=people,dc=wikimedia,dc=org
ldappassword = <%= @keystoneconfig['ldap_user_pass'] %>
keystone_auth_name = "novaadmin"
keystone_auth_pass = "<%= @keystoneconfig['ldap_user_pass'] %>"
keystone_auth_project = <%= @keystoneconfig['admin_project_id'] %>
keystone_auth_url = "http://<%= @designateconfig['controller_hostname'] %>:35357/v3"

certmanager_user = certmanager
puppet_key_format = '%(hostname)s.%(project_name)s.%(domain)s'
puppet_master_host = "<%= @designateconfig['controller_hostname'] %>"
salt_key_format = '%(hostname)s.%(project_name)s.%(domain)s'
salt_master_host = "<%= @designateconfig['controller_hostname'] %>"

#------------------------
# Neutron Floating Handler
#------------------------
[handler:neutron_floatingip]
# Domain ID of domain to create records in. Should be pre-created
#domain_id =
#notification_topics = notifications
#control_exchange = 'neutron'
#format = '%(octet0)s-%(octet1)s-%(octet2)s-%(octet3)s.%(domain)s'

###################################
## Pool Manager Cache Configuration
###################################
#-----------------------
# SQLAlchemy Pool Manager Cache
#-----------------------
[pool_manager_cache:sqlalchemy]
connection = mysql://<%= @designateconfig["db_user"] %>:<%= @designateconfig["db_pass"] %>@<%= @designateconfig["db_host"] %>/<%= @designateconfig["pool_manager_db_name"] %>
#connection_debug = 100
#connection_trace = False
#sqlite_synchronous = True
#idle_timeout = 3600
#max_retries = 10
#retry_interval = 10

[oslo_messaging_rabbit]
# RabbitMQ Config
rabbit_userid = <%= @designateconfig["rabbit_user"] %>
rabbit_password = <%= @designateconfig["rabbit_pass"] %>
rabbit_use_ssl = False
rabbit_hosts = <%= @designateconfig["rabbit_host"] %>
rabbit_port = 5672
