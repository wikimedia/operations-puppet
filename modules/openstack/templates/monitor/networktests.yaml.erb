# this file is managed by puppet:
# modules/openstack/templates/monitor/networktests.yaml.erb
---
- envvars:
  - SSH: <%= @ssh %>
<% @envvars.each do |key, value| -%>
    <%= key %>: <%= value %>
<% end -%>
---
- name: basic ping to cloudgw addresses (raw addresses) from outside the cloud network
  tests:
    - cmd: timeout -k5s 10s ping -c1 $CLOUDGW_A_IP >/dev/null
      stdout: ""
      retcode: 0
      stderr: ""
    - cmd: timeout -k5s 10s ping -c1 $CLOUDGW_B_IP >/dev/null
      stdout: ""
      retcode: 0
      stderr: ""
    - cmd: timeout -k5s 10s ping -c1 $CLOUDGW_VIRT_IP >/dev/null
      stdout: ""
      retcode: 0
      stderr: ""
    - cmd: timeout -k5s 10s ping -c1 $CLOUDGW_WAN_IP >/dev/null
      stdout: ""
      retcode: 0
      stderr: ""

- name: basic ping to cloudgw addresses (DNS names) from outside the cloud network
  tests:
    - cmd: timeout -k5s 10s ping -c1 $CLOUDGW_A_FQDN >/dev/null
      stdout: ""
      retcode: 0
      stderr: ""
    - cmd: timeout -k5s 10s ping -c1 $CLOUDGW_B_FQDN >/dev/null
      stdout: ""
      retcode: 0
      stderr: ""
    - cmd: timeout -k5s 10s ping -c1 $CLOUDGW_VIRT_FQDN >/dev/null
      stdout: ""
      retcode: 0
      stderr: ""
    - cmd: timeout -k5s 10s ping -c1 $CLOUDGW_WAN_FQDN >/dev/null
      stdout: ""
      retcode: 0
      stderr: ""

- name: basic ping to neutron WAN from outside the cloud network
  tests:
    - cmd: timeout -k5s 10s ping -c1 $NEUTRON_WAN_IP >/dev/null
      stdout: ""
      retcode: 0
      stderr: ""
    - cmd: timeout -k5s 10s ping -c1 $NEUTRON_WAN_FQDN >/dev/null
      stdout: ""
      retcode: 0
      stderr: ""

- name: basic ping to neutron VIRT gateway from within the cloud virtual network, no floating IP
  tests:
    - cmd: $SSH $NO_FLOATING_VM "timeout -k5s 10s ping -c1 $NEUTRON_VIRT_IP >/dev/null"
      stdout: ""
      retcode: 0
      stderr: ""
    - cmd: $SSH $NO_FLOATING_VM "timeout -k5s 10s ping -c1 $NEUTRON_VIRT_FQDN >/dev/null"
      stdout: ""
      retcode: 0
      stderr: ""

- name: basic ping to neutron VIRT gateway from within the cloud virtual network, with floating IP
  tests:
    - cmd: $SSH $FLOATING_VM_FQDN "timeout -k5s 10s ping -c1 $NEUTRON_VIRT_IP >/dev/null"
      stdout: ""
      retcode: 0
      stderr: ""
    - cmd: $SSH $FLOATING_VM_FQDN "timeout -k5s 10s ping -c1 $NEUTRON_VIRT_FQDN >/dev/null"
      stdout: ""
      retcode: 0
      stderr: ""


- name: VM (no floating IP) contacting the internet gets NAT'd using routing_source_ip
  tests:
    - cmd: $SSH $NO_FLOATING_VM "curl -s ifconfig.me | grep -q $ROUTING_SOURCE_IP"
      stdout: ""
      retcode: 0
      stderr: ""

- name: VM (no floating IP) contacting an address covered by dmz_cidr doesn't get NAT'd
  tests:
    - cmd: $SSH $NO_FLOATING_VM "curl -Is https://es.wikipedia.org | grep x-client-ip | grep -q $VM_IP_PREFIX"
      stdout: ""
      retcode: 0
      stderr: ""

- name: VM (using floating IP) isn't affected by either routing_source_ip or dmz_cidr
  tests:
    - cmd: $SSH $FLOATING_VM_FQDN "curl -s ifconfig.me | grep -q $FLOATING_VM_IP"
      stdout: ""
      retcode: 0
      stderr: ""
    - cmd: $SSH $FLOATING_VM_FQDN "curl -Is https://es.wikipedia.org | grep x-client-ip | grep -q $FLOATING_VM_IP"
      stdout: ""
      retcode: 0
      stderr: ""

- name: VM (no floating IP) can contact auth DNS server
  tests:
    - cmd: $SSH $NO_FLOATING_VM "dig +short $DNS_AUTH_DOMAIN @${DNS_AUTH_IP} | grep -q ${DNS_AUTH_DOMAIN_A_RECORD}"
      stdout: ""
      retcode: 0
      stderr: ""

- name: VM (no floating IP) can contact recursor DNS server
  tests:
    - cmd: $SSH $NO_FLOATING_VM "dig +short basket.com @${DNS_RECURSOR_IP} | wc -l"
      stdout: "1"
      retcode: 0
      stderr: ""

- name: VM (using floating IP) can contact auth DNS server
  tests:
    - cmd: $SSH $FLOATING_VM_FQDN "dig +short $DNS_AUTH_DOMAIN @${DNS_AUTH_IP} | grep -q ${DNS_AUTH_DOMAIN_A_RECORD}"
      stdout: ""
      retcode: 0
      stderr: ""

- name: VM (using floating IP) can contact recursor DNS server
  tests:
    - cmd: $SSH $FLOATING_VM_FQDN "dig +short basket.com @${DNS_RECURSOR_IP} | wc -l"
      # this a somewhat random IPv4 on the internet, so only check that we get "something"
      stdout: "1"
      retcode: 0
      stderr: ""

- name: VM (using floating IP) can contact LDAP server
  tests:
    - cmd: $SSH $FLOATING_VM_FQDN 'ldapsearch -x whatever | grep -q ^"# numResponses"'
      stdout: ""
      retcode: 0
      stderr: ""

- name: VM (not using floating IP) can contact LDAP server
  tests:
    - cmd: $SSH $NO_FLOATING_VM 'ldapsearch -x whatever | grep -q ^"# numResponses"'
      stdout: ""
      retcode: 0
      stderr: ""

- name: VM (using floating IP) can contact openstack API
  tests:
    - cmd: $SSH $FLOATING_VM_FQDN 'curl -s $KEYSTONE_URL | grep -q identity'
      stdout: ""
      retcode: 0
      stderr: ""

- name: VM (no floating IP) can contact openstack API
  tests:
    - cmd: $SSH $NO_FLOATING_VM 'curl -s $KEYSTONE_URL | grep -q identity'
      stdout: ""
      retcode: 0
      stderr: ""

- name: puppetmasters can sync git tree
  tests:
    - cmd: $SSH $GENERAL_PUPPETMASTER 'sudo git-sync-upstream --base-dir /srv/git --git-user gitpuppet 2>&1 | grep -q Up-to-date'
      stdout: ""
      retcode: 0
      stderr: ""
    - cmd: $SSH $LOCAL_PUPPETMASTER 'sudo git-sync-upstream --base-dir /srv/git --git-user gitpuppet 2>&1 | grep -q Up-to-date'
      stdout: ""
      retcode: 0
      stderr: ""

- name: VM (using floating IP) can read dumps NFS
  tests:
    - cmd: $SSH $DUMPS_FLOATING_VM_FQDN 'file $DUMPSFILE | grep -q HTML'
      stdout: ""
      retcode: 0
      stderr: ""

- name: VM (no floating IP) can read dumps NFS
  tests:
    - cmd: $SSH $DUMPS_NO_FLOATING_VM 'file $DUMPSFILE | grep -q HTML'
      stdout: ""
      retcode: 0
      stderr: ""

<% if @region == 'eqiad1' %>
#
# eqiad1-only tests
#
- name: VM (using floating IP) can connect to wikireplicas from Toolforge
  tests:
    - cmd: $SSH $TOOLFORGE_BASTION_LOGIN 'sudo -iu tools.network-tests sql enwiki "select * from page limit 2;" | grep page_id | wc -l'
      stdout: "1"
      retcode: 0
      stderr: ""
    - cmd: $SSH $TOOLFORGE_BASTION_DEV 'sudo -iu tools.network-tests sql enwiki "select * from page limit 2;" | grep page_id | wc -l'
      stdout: "1"
      retcode: 0
      stderr: ""

- name: Toolforge webservice can be accessed from the internet
  tests:
    - cmd: curl -s -f https://network-tests.toolforge.org/files/1MB.bin --output - | file -
      stdout: "/dev/stdin: data"
      retcode: 0
      stderr: ""

- name: Toolforge bastions see herald file on project NFS
  tests:
    - cmd: timeout -k5s 60s $SSH $TOOLFORGE_BASTION_LOGIN "file /mnt/nfs/labstore-secondary-tools-project/herald"
      stdout: "/mnt/nfs/labstore-secondary-tools-project/herald: ASCII text"
      retcode: 0
      stderr: ""
    - cmd: timeout -k5s 60s $SSH $TOOLFORGE_BASTION_DEV "file /mnt/nfs/labstore-secondary-tools-project/herald"
      stdout: "/mnt/nfs/labstore-secondary-tools-project/herald: ASCII text"
      retcode: 0
      stderr: ""
<% else %>
# not including eqiad1-only tests, mostly because we only run Toolforge on eqiad1
<% end %>
