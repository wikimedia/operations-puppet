#!/bin/bash
#####################################################################
### THIS FILE IS MANAGED BY PUPPET
### puppet:///modules/openstack/icehouse/virtscripts/dc-migrate
#####################################################################
#set -x
ssh-add -l > /dev/null
if [ "$?" != "0" ]
then
	echo "You must have a forwarded agent to use this script"
	exit 1
fi
INSTANCENAME=$1
PROJECT=$2
if [ -z "$INSTANCENAME" -o -z "$PROJECT" ]; then
	echo "Usage:  $0 <instance to migrate> <instance project>"
	exit 1
fi
FROMREGION='pmtpa'
TOREGION='eqiad'
FROMAUTH="http://labcontrol1001.wikimedia.org:35357/v2.0"
TOAUTH="http://labcontrol2001.wikimedia.org:35357/v2.0"
FROMPUPPETMASTER="labcontrol1001.wikimedia.org"
TOPUPPETMASTER="labcontrol2001.wikimedia.org"
TOINSTANCE=`OS_TENANT_NAME=${PROJECT} OS_AUTH_URL=${TOAUTH} nova --os-region ${TOREGION} show ${INSTANCENAME} | grep ' id ' | awk '{ print $4 }'`
if [ -n "$TOINSTANCE" ]; then
	echo "Name conflict!  ${INSTANCENAME} already exists in ${TOREGION} with ID \"${TOINSTANCE}\""
	exit 1
fi
echo "(That error was a good thing.)"
echo ""
FROMINSTANCENAME=`OS_TENANT_NAME=${PROJECT} OS_AUTH_URL=${FROMAUTH} nova --os-region ${FROMREGION} show ${INSTANCENAME} | grep 'OS-EXT-SRV-ATTR:instance_name' | awk '{ print $4 }'`
if [ -z "$FROMINSTANCENAME" ]; then
	echo "ERROR: ${INSTANCENAME} cannot be found in project ${PROJECT}"
	exit 1
fi
FROMINSTANCESTATUS=`OS_TENANT_NAME=${PROJECT} OS_AUTH_URL=${FROMAUTH} nova --os-region ${FROMREGION} show ${INSTANCENAME} | grep ' status ' | awk '{ print $4 }'`
if [ "$FROMINSTANCESTATUS" != 'ACTIVE' ]; then
	echo "ERROR: ${INSTANCENAME} must be ACTIVE before we can migrate it."
	exit 1
fi
echo ""
FROMIMAGE=`OS_TENANT_NAME=${PROJECT} OS_AUTH_URL=${FROMAUTH} nova --os-region ${FROMREGION} show ${INSTANCENAME} | grep ' image ' | awk '{gsub ( "[()]","" ) ; print $(NF-1) }'`
FROMFLAVOR=`OS_TENANT_NAME=${PROJECT} OS_AUTH_URL=${FROMAUTH} nova --os-region ${FROMREGION} show ${INSTANCENAME} | grep ' flavor ' | awk '{gsub ( "[()]","" ) ; print $5 }'`
FROMSECURITYRAW=`OS_TENANT_NAME=${PROJECT} OS_AUTH_URL=${FROMAUTH} nova --os-region ${FROMREGION} show ${INSTANCENAME} | grep ' security_groups ' | awk  -F "|" '{ print $3 }'`
FROMSECURITY=`python -c "print ','.join([o['name'] for o in ${FROMSECURITYRAW}])"`
FROMHOST=`OS_TENANT_NAME=${PROJECT} OS_AUTH_URL=${FROMAUTH} nova --os-region ${FROMREGION} show ${INSTANCENAME} | grep 'OS-EXT-SRV-ATTR:host' | awk '{ print $4 }'`
FROMINSTANCE=$FROMINSTANCENAME
echo "Testing salt on ${FROMINSTANCE}.${FROMREGION}"
echo ""
salt ${FROMINSTANCE}.${FROMREGION}.wmflabs test.ping
if [ "$?" != "0" ]
then
	echo "${INSTAMCENAME} is not responding to salt."
	exit 1
fi
echo "Creating initial image in $TOREGION"
# eqiad has different default flavors than pmtpa.  I've copied over duplicates of pmtpa flavors, and named them things like 'pmtpa-ID' where ID is the pmtpa ID.
#  Their IDs are 1000 + pmtpa flavor ID.
TOFLAVOR=`expr ${FROMFLAVOR} + 1000`
CREATED=`cd /srv/org/wikimedia/controller/wikis/w && php ./extensions/OpenStackManager/maintenance/createInstance.php --image ${FROMIMAGE} --flavor ${TOFLAVOR} --instance ${INSTANCENAME} --project ${PROJECT} --region ${TOREGION} --securitygroups ${FROMSECURITY} --copypuppet ${FROMINSTANCE} --copypuppetregion ${FROMREGION}`
if [ "$CREATED" != "created instance." ]; then
	echo "ERROR: Failed to create new instance in ${TOREGION}"
	exit 1
fi
echo "The new instance is building.  Waiting for it to be assigned a host..."
TOHOST=''
while [ -z $TOHOST ]; do
	sleep 10
	TOHOST=`OS_TENANT_NAME=${PROJECT} OS_AUTH_URL=${TOAUTH} nova --os-region ${TOREGION} show ${INSTANCENAME} | grep 'OS-EXT-SRV-ATTR:host' | awk '{ print $4 }'`
done
TOINSTANCENAME=`OS_TENANT_NAME=${PROJECT} OS_AUTH_URL=${TOAUTH} nova --os-region ${TOREGION} show ${INSTANCENAME} | grep 'OS-EXT-SRV-ATTR:instance_name' | awk '{ print $4 }'`
TOINSTANCE=`OS_TENANT_NAME=${PROJECT} OS_AUTH_URL=${TOAUTH} nova --os-region ${TOREGION} show ${INSTANCENAME} | grep ' id ' | awk '{ print $4 }'`
sleep 2
echo ""
echo "Migrating $FROMINSTANCE from $FROMHOST to $TOINSTANCE on $TOHOST"
echo ""
echo "Destroying new instance on $TOHOST"
echo ""
ssh $TOHOST.$TOREGION.wmnet "virsh destroy ${TOINSTANCE}"
echo "Clearing resolv.conf in instance on $FROMHOST"
echo ""
salt ${FROMINSTANCE}.${FROMREGION}.wmflabs cmd.run "rm -f /etc/resolv.conf"
salt ${FROMINSTANCE}.${FROMREGION}.wmflabs cmd.run "rm -f /etc/resolvconf/resolv.conf.d/original"
echo ""
echo "Enabling puppet master cert refresh"
salt ${FROMINSTANCE}.${FROMREGION}.wmflabs cmd.run "touch /root/allowcertdeletion"
echo ""
sleep 1
echo "Destroying instance on $FROMHOST"
echo ""
OS_TENANT_NAME=${PROJECT} OS_AUTH_URL=${FROMAUTH} nova --os-region ${FROMREGION} stop ${INSTANCENAME}
sleep 5
ssh $FROMHOST.$FROMREGION.wmnet "virsh destroy ${FROMINSTANCE}"
echo ""
sleep 5
echo "Verifying that both instances are now stopped."
FROMINSTANCESTATUS=`OS_TENANT_NAME=${PROJECT} OS_AUTH_URL=${FROMAUTH} nova --os-region ${FROMREGION} show ${INSTANCENAME} | grep ' status ' | awk '{ print $4 }'`
if [ "$FROMINSTANCESTATUS" != 'SHUTOFF' ]; then
	echo "ERROR: the ${FROMREGION} ${INSTANCENAME} failed to shut down.  We can't copy files."
	exit 1
fi
TOINSTANCESTATUS=`OS_TENANT_NAME=${PROJECT} OS_AUTH_URL=${TOAUTH} nova --os-region ${TOREGION} show ${INSTANCENAME} | grep ' status ' | awk '{ print $4 }'`
if [ "$TOINSTANCESTATUS" != 'SHUTOFF' ]; then
	echo "ERROR: the ${TOREGION} ${INSTANCENAME} failed to shut down.  We can't copy files."
	exit 1
fi
echo ""
echo "Rsyncing instance from $FROMHOST to $TOHOST"
echo ""
# This one is right, but requires known_hosts to be set up properly:
ssh -A $FROMHOST.$FROMREGION.wmnet "rsync -S -av /var/lib/nova/instances/${FROMINSTANCE}/* ${TOHOST}.${TOREGION}.wmnet:/var/lib/nova/instances/${TOINSTANCE}"
if [ "$?" != "0" ]
then
	echo "Rsync to new instance failed."
	exit 1
fi
# This is dumb but will work:
#rsync -S -av ${FROMHOST}.${FROMREGION}.wmnet:/var/lib/nova/instances/${FROMINSTANCE} /tmp/
#rsync -S -av /tmp/${FROMINSTANCE}/* ${TOHOST}.${TOREGION}.wmnet:/var/lib/nova/instances/${TOINSTANCE}
#rm -r /tmp/${FROMINSTANCE}
echo ""
echo ""
echo ""
echo "Clearing stale puppet cert (if any)"
ssh ${TOPUPPETMASTER} "puppet cert clean ${TOINSTANCENAME}.${TOREGION}.wmflabs"
echo ""
echo "Rebooting the instance"
echo ""
OS_TENANT_NAME=${PROJECT} OS_AUTH_URL=${TOAUTH} nova --os-region ${TOREGION} reboot ${INSTANCENAME}
exit 0
