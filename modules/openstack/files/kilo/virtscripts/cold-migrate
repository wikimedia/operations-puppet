#!/usr/bin/python
#####################################################################
# THIS FILE IS MANAGED BY PUPPET
# puppet:///modules/openstack/kilo/virtscripts/cold-migrate
#####################################################################
"""
 cold-migrate stops an instance, moves it to a new host,
 and starts it.  It also has to twiddle with the nova
 db to update the virt host.

 Why does this work when all integrated nova migration
 methods don't?  It's a mystery.
"""

import argparse
import os
import time
import subprocess

from keystoneclient.auth.identity import generic
from keystoneclient import session as keystone_session
from keystoneclient.v3 import client as keystone_client
from novaclient import client


class NovaInstance(object):

    def __init__(self, novaclient, instance_id):
        self.novaclient = novaclient
        self.instance_id = instance_id
        self.refresh_instance()

    def refresh_instance(self):
        self.instance = self.novaclient.servers.get(self.instance_id)

    def wait_for_status(self, desiredstatus):
        oldstatus = ""

        while self.instance.status != desiredstatus:
            if self.instance.status != oldstatus:
                oldstatus = self.instance.status
                print "Current status is %s; waiting for it to change to %s." % (
                    self.instance.status, desiredstatus)

            time.sleep(1)
            self.refresh_instance()

    def migrate(self, destination, mysql_password):
        source = self.instance._info['OS-EXT-SRV-ATTR:host']
        print "Instance %s is now on host %s with state %s" % (
            self.instance_id,
            source,
            self.instance.status)
        if (source == destination):
            print "source and destination host are the same.  Nothing to do."
            exit(0)

        self.instance.stop()
        self.wait_for_status('SHUTOFF')

        imagedir = "/var/lib/nova/instances/%s" % self.instance_id

        args = [
            "/usr/bin/rsync",
            "-S",
            "-av",
            "%s.eqiad.wmnet::nova_instance_rsync_controller/%s" %
            (source,
             self.instance_id),
            "/srv/migratetmp"]
        print " ".join(args)
        r = subprocess.call(args)
        if r:
            print ("rsync from source to local failed.")
            return(1)

        args = [
            "rsync",
            "-S",
            "-av",
            "/srv/migratetmp/%s" %
            self.instance_id,
            "%s.eqiad.wmnet::nova_instance_rsync_controller/" %
            destination]
        print " ".join(args)
        r = subprocess.call(args)
        if r:
            print ("rsync from local to remote failed.")
            return(1)

        print "Instance copied.  Now updating nova db..."

        host_moved = True
        args = ["mysql", "--user=nova", "--password=%s" % mysql_password,
                "--host", "m5-master.eqiad.wmnet", "nova",
                "-e",
                "update instances set host=\"%s\",node=\"%s.eqiad.wmnet\" "
                "where uuid=\"%s\";" %
                (destination, destination, self.instance_id)]
        r = subprocess.call(args)
        if r:
            print ("Failed to update the instance's db record."
                   "Host not moved.  You will need to clean up files on %s" %
                   destination)
            host_moved = False

        self.instance.start()
        self.wait_for_status('ACTIVE')

        if host_moved:
            print "Instance is active."
            confirm = ""
            while (confirm != "cleanup"):
                confirm = raw_input(
                    "Verify that the instance is healthy, then type 'cleanup' to delete old instance files:  ")
            print "Cleaning up old instance files on %s" % source
            args = ["ssh", "-i", "/root/.ssh/compute-hosts-key",
                    "nova@%s.eqiad.wmnet" % source,
                    "rm -rf", imagedir]
            r = subprocess.call(args)
            if r:
                print ("cleanup of %s on %s failed." % (imagedir, source))
                return(1)

        print
        print "Instance %s is now on host %s with status %s" % (
            self.instance_id,
            self.instance._info['OS-EXT-SRV-ATTR:host'],
            self.instance.status)
        print "Note that you will need to manually clean up /srv/migratetmp."


if __name__ == "__main__":
    argparser = argparse.ArgumentParser('cold-migrate',
                                        description='''Move an instance to a different compute node''',
                                        epilog='''Note: The target node cannot be specified.  To avoid
            a particular node, remove it from wmf_scheduler_hosts_pool
            in nova.conf.

            Note also that this tool is quite specific to the nova 'icehouse'
            release.  It may not work with later versions.''')
    argparser.add_argument(
        '--nova-user',
        help='username for nova auth',
        default=os.environ.get('OS_USERNAME', None)
    )
    argparser.add_argument(
        '--nova-pass',
        help='password for nova auth',
        default=os.environ.get('OS_PASSWORD', None)
    )
    argparser.add_argument(
        '--nova-url',
        help='url for nova auth',
        default=os.environ.get('OS_AUTH_URL', None)
    )
    argparser.add_argument(
        '--mysql-password',
        help='mysql password for nova db',
        default=os.environ.get('NOVA_MYSQL_PASS', None)
    )
    argparser.add_argument(
        'instanceid',
        help='instance id to migrate',
    )
    argparser.add_argument(
        'destination',
        help='destination host, e.g. labvirt1005',
    )
    args = argparser.parse_args()

    sshargs = ["ssh", "-i", "/root/.ssh/compute-hosts-key",
               "nova@%s.eqiad.wmnet" % args.destination, "true"]
    r = subprocess.call(sshargs)
    if r:
        print "Remote execution failed; this whole enterprise is doomed."
        exit(1)

    auth = generic.Password(
        auth_url=args.nova_url,
        username=args.nova_user,
        password=args.nova_pass,
        user_domain_name='Default',
        project_domain_name='Default',
        project_name='admin')
    session = keystone_session.Session(auth=auth)

    novaclient = client.Client('2',session=session)

    instance = NovaInstance(novaclient, args.instanceid)
    instance.migrate(args.destination, args.mysql_password)
