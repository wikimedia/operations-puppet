# SPDX-License-Identifier: Apache-2.0

--- chunkeddriver.py	2022-04-06 16:36:34.121637962 -0400
+++ chunkeddriver.py.modified	2022-04-06 16:36:21.453643394 -0400
@@ -62,6 +62,13 @@
 CONF.register_opts(backup_opts)
 
 
+# Json encoder to avoid duplicating the whole json string in memory
+class JSONUTF8Encoder(json.JSONEncoder):
+    def iterencode(self, *args, **kwargs):
+        for chunk in super().iterencode(*args, **kwargs):
+            yield chunk.encode("utf-8")
+
+
 # Object writer and reader returned by inheriting classes must not have any
 # logging calls, as well as the compression libraries, as eventlet has a bug
 # (https://github.com/eventlet/eventlet/issues/432) that would result in
@@ -264,11 +271,12 @@
         metadata['volume_meta'] = volume_meta
         if extra_metadata:
             metadata['extra_metadata'] = extra_metadata
-        metadata_json = json.dumps(metadata, sort_keys=True, indent=2)
-        metadata_json = metadata_json.encode('utf-8')
         with self._get_object_writer(container, filename) as writer:
-            writer.write(metadata_json)
-        LOG.debug('_write_metadata finished. Metadata: %s.', metadata_json)
+            # this allows json-encoding in an iterative way instead of storing
+            # the whole string in memory
+            json.dump(obj=metadata, fp=writer, sort_keys=True, indent=2,
+                      ensure_ascii=False, cls=JSONUTF8Encoder)
+        LOG.debug('_write_metadata finished.')
 
     def _write_sha256file(self, backup, volume_id, container, sha256_list):
         filename = self._sha256_filename(backup)
