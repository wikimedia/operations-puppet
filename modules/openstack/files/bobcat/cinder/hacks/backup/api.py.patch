# SPDX-License-Identifier: Apache-2.0

--- a/cinder/backup/api.py
+++ b/cinder/backup/api.py
@@ -272,6 +272,7 @@
         # Find the latest backup and use it as the parent backup to do an
         # incremental backup.
         latest_backup = None
+        latest_host = None
         if incremental:
             backups = objects.BackupList.get_all_by_volume(
                 context, volume_id, volume['project_id'],
@@ -297,8 +298,9 @@
                 latest_backup = max(
                     backups.objects,
                     key=lambda x: x['data_timestamp']
-                    if (not snapshot or (snapshot and x['data_timestamp']
-                                         < snapshot['created_at']))
+                    if (x['status'] == fields.BackupStatus.AVAILABLE and (
+                        not snapshot or (snapshot and x['data_timestamp']
+                                         < snapshot['created_at'])))
                     else datetime(1, 1, 1, 1, 1, 1, tzinfo=timezone('UTC')))
             else:
                 QUOTAS.rollback(context, reservations)
@@ -311,10 +313,14 @@
         if latest_backup:
             parent = latest_backup
             parent_id = latest_backup.id
+            if 'posix' in latest_backup.service:
+                # The posix driver needs to schedule incremental backups
+                #  on the same host as the last backup, otherwise there's
+                #  nothing to base the incremental backup on.
+                latest_host = latest_backup.host
             if latest_backup['status'] != fields.BackupStatus.AVAILABLE:
                 QUOTAS.rollback(context, reservations)
-                msg = _('The parent backup must be available for '
-                        'incremental backup.')
+                msg = _('No backups available to do an incremental backup.')
                 raise exception.InvalidBackup(reason=msg)
 
         data_timestamp = None
@@ -342,6 +348,7 @@
             'snapshot_id': snapshot_id,
             'data_timestamp': data_timestamp,
             'parent': parent,
+            'host': latest_host,
             'metadata': metadata or {}
         }
         try:
