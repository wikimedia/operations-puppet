#!/bin/sh
#
# 2014-10 jgage@wikimedia.org
#
# This script is called by Puppet to manage Log4j config stored inside the yarn
# server nodemanager jar, and the symlink which points to it.
#
# Problem:
# * We want MRAppManager to log via a Log4j appender for GELF, in order to send
#   errors from the YarnChild processes it spawns to Logstash.
# * However MRAppManager is spawned by NodeManager rather than an init script.
# * Therefore MRAppManager uses a Log4j properties file stored inside the
#   NodeManager jar instead of the one in /etc/hadoop/conf/.
# * Hence in order to modify logging for MRAppManager and ultimately capture
#   errors from YarnChild processes, the Log4j config inside the jar must be
#   modified.
# * This problem could be avoided with an upstream change to read
#   /etc/hadoop/conf/log4j.properties after container-log4j.properties
#
# Solution:
# 1. Extract container-log4j.properties from hadoop-yarn-server-nodemanager.jar
# 2. Patch it, using Puppet template values for hostname and port
# 3. Create a jar containing modified Log4j config
# 4. Update versionless symlink to point to modified jar.
# 5. Also handle resetting to standard config.
#
# Arguements:
# 'set': Extract the file, patch it, make a modified jar, update the symlink.
# 'reset': Retain the modified jar, but point the symlink back to the original
#
# Idempotency: Modified jar is only generated during state change
# * Already set: noop
# * Set: generate or regenerate jar, update symlink
# * Reset: update symlink

# fail immediately on errors
set -e

BASENAME="/usr/bin/basename"
CHMOD="/bin/chmod"
CP="/bin/cp"
GREP="/bin/grep"
JAR="/usr/bin/jar"
LN="/bin/ln"
PATCH="/usr/bin/patch"
READLINK="/bin/readlink"
RM="/bin/rm"
SED="/bin/sed"
WD="/usr/lib/hadoop-yarn/"

# secure temp dir http://content.hccfl.edu/pollock/ShScript/TempFile.htm
TEMP=$(mktemp -d -t hadoop-helper-$$.XXXXXXXXXX)
clean_up() {
	$RM -rf $TEMP
        trap 0
	exit
}
trap clean_up 0 1 2 3 15

SYMLINK="/usr/lib/hadoop-yarn/hadoop-yarn-server-nodemanager.jar"
CURR=`$READLINK -f $SYMLINK`
ORIG=`echo $CURR | $SED 's/-gelf//'`
BASE=`$BASENAME $ORIG .jar`
GELF=$BASE-gelf.jar
LOG4J="container-log4j.properties"

COMMAND="$1"
case $COMMAND in
set)
    # if $GELF already exists && $SYMLINK points to it
    if echo $CURR | $GREP gelf && [ -f $CURR ]; then
        exit 0
    fi

    # jar will only unpack to cwd
    cd $TEMP
    # extract container-log4j.properties
    $JAR xf $ORIG $LOG4J
    # patch it
    $PATCH $LOG4J << 'EOF'
@@ -12,7 +12,7 @@
 # limitations under the License. See accompanying LICENSE file.
 #
 # Define some default values that can be overridden by system properties
-hadoop.root.logger=DEBUG,CLA
+hadoop.root.logger=DEBUG,CLA,gelf

 # Define the root logger to the system property "hadoop.root.logger".
 log4j.rootLogger=${hadoop.root.logger}, EventCounter
@@ -42,6 +42,18 @@
 log4j.appender.CRLA.layout=org.apache.log4j.PatternLayout
 log4j.appender.CRLA.layout.ConversionPattern=%d{ISO8601} %p [%t] %c: %m%n

+# GELF appender
+log4j.appender.gelf=biz.paluch.logging.gelf.log4j.GelfLogAppender
+log4j.appender.gelf.Threshold=INFO
+log4j.appender.gelf.Host=<%= @gelf_logging_host %>
+log4j.appender.gelf.Port=<%= @gelf_logging_port %>
+log4j.appender.gelf.Facility=Hadoop
+log4j.appender.gelf.ExtractStackTrace=true
+log4j.appender.gelf.FilterStackTrace=false
+log4j.appender.gelf.MdcProfiling=true
+log4j.appender.gelf.TimestampPattern=yyyy-MM-dd HH:mm:ss,SSSS
+log4j.appender.gelf.MaximumMessageSize=8192
+
 #
 # Event Counter Appender
 # Sends counts of logging messages at different severity levels to Hadoop Metrics.
EOF
    # copy the jar
    $CP $ORIG $WD/$GELF
    # update our copy with patched file
    $JAR uf $WD/$GELF $LOG4J
    # jar changes permissions! fix.
    $CHMOD 644 $WD/$GELF
    # change the symlink to point to our modified jar
    $LN -sf $WD/$GELF $SYMLINK
    exit 0
    ;;
reset)
    $LN -sf $ORIG $SYMLINK
    exit 0
    ;;
*)
    echo "usage:"
    echo "'$0 set': enable gelf"
    echo "'$0 reset': disable gelf"
    exit 1
    ;;
esac

