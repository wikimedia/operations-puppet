<%#- SPDX-License-Identifier: Apache-2.0 -%>
<%- |
    Array[Stdlib::Fqdn] $prometheus_alertmanager_hosts,
    Stdlib::Fqdn        $alertmanager_active_host,
    Array[Stdlib::Fqdn] $thanos_fe_hosts,
    Array[Stdlib::Fqdn] $config_manager_hosts,
    Array[Stdlib::Fqdn] $grafana_hosts,
| -%>
# Note: This file is managed by puppet.

frontend http-public
    bind 0.0.0.0:80
    mode http
    option httplog
    option forwardfor

    acl is_prometheus_host hdr(host) -i prometheus.wmflabs.org
    acl is_prometheus_host hdr(host) -i prometheus.wmcloud.org
    acl is_prometheus_host hdr(host) -i prometheus.svc.metricsinfra.eqiad1.wikimedia.cloud

    acl is_prometheus_alertmanager_path path -i -m beg /.alertmanager/

    acl is_karma_host hdr(host) -i prometheus-alerts.wmcloud.org

    acl is_config_manager_host hdr(host) -i config-manager.svc.metricsinfra.eqiad1.wikimedia.cloud

    # Block alertmanager's dangerous endpoints
    acl is_unsafe_alertmanager_path path -i -m beg /.alertmanager/debug
    acl is_unsafe_alertmanager_path path -i -m beg /.alertmanager/-/quit
    acl is_unsafe_alertmanager_path path -i -m beg /.alertmanager/-/reload
    acl is_safe_alertmanager_method method GET HEAD OPTIONS

    acl is_grafana_host hdr(host) -i grafana.wmcloud.org
    acl is_grafana_host hdr(host) -i grafana-rw.wmcloud.org

    acl is_prometheus_metrics_path path -i -m beg /metrics

    http-request deny if is_prometheus_host is_prometheus_alertmanager_path is_unsafe_alertmanager_path
    http-request deny if is_prometheus_host is_prometheus_alertmanager_path !is_safe_alertmanager_method

    http-request deny if is_grafana_host is_prometheus_metrics_path

    use_backend prometheus_alertmanager if is_prometheus_host is_prometheus_alertmanager_path
    use_backend thanos_fe if is_prometheus_host !is_prometheus_alertmanager_path
    use_backend karma if is_karma_host
    use_backend grafana if is_grafana_host
    use_backend config_manager if is_config_manager_host

backend prometheus_alertmanager
    mode http
    option tcp-check
    balance roundrobin
    timeout server 1h
    default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100
    # Remove /.alertmanager/ from the path sent to the backend servers
    reqrep ^([^\ :]*)\ /.alertmanager/(.*) \1\ /\2
<%- $prometheus_alertmanager_hosts.each |$server| { -%>
    server <%= $server %> <%= $server %>:9093 check
<%- } -%>

backend karma
    mode http
    option tcp-check
    balance roundrobin
    timeout server 1h
    default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100
    # TODO: sort out session issues between hosts, so this can use all of the hosts all the time
<%- $prometheus_alertmanager_hosts.each |$server| { -%>
    <%- if $server == $alertmanager_active_host { -%>
    server <%= $server %> <%= $server %>:80 check
    <%- } else { -%>
    server <%= $server %> <%= $server %>:80 check backup
    <%- } -%>
<%- } -%>

backend config_manager
    mode http
    option tcp-check
    balance roundrobin
    timeout server 1h
    default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100
<%- $config_manager_hosts.each |$server| { -%>
    server <%= $server %> <%= $server %>:80 check
<%- } -%>

backend thanos_fe
    mode http
    option tcp-check
    balance roundrobin
    timeout server 1h
    default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100
    # Remove /cloud/ from the path sent to the backend servers, not needed
    # since move to Thanos
    reqrep ^([^\ :]*)\ /cloud/(.*) \1\ /\2
<%- $thanos_fe_hosts.each |$server| { -%>
    server <%= $server %> <%= $server %>:10902 check
<%- } -%>

backend grafana
    mode http
    option tcp-check
    balance roundrobin
    timeout server 1h
    default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100
<%- $grafana_hosts.each |$server| { -%>
    server <%= $server %> <%= $server %>:80 check
<%- } -%>
