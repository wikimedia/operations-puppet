# variables, convert puppet vars into nft vars
define routing_source_ip   = <%= @routing_source %>
define cloud_private_supernet = <%= @cloud_private_supernet %>
define nic_virt = "<%= @nic_virt %>"
define nic_wan = "<%= @nic_wan %>"

# single table for everything
table inet cloudgw {
    set virtual_subnets_cidrs {
        type ipv4_addr
        flags interval
        # use auto-merge to collapse overlapping elements, see T346432
        auto-merge
        counter
        <%- if !@virt_subnets.empty? -%>
        elements = {
        <% @virt_subnets.each do |element| -%>
            <%= element %> ,
        <% end -%>
        }
        <%- end -%>
    }

    set dmz_cidr_set {
        type ipv4_addr
        flags interval
        # use auto-merge to collapse overlapping elements, see T346432
        auto-merge
        counter
        <%- if !@dmz_cidr.empty? -%>
        elements = {
        <% @dmz_cidr.each do |element| -%>
            <%= element %> ,
        <% end -%>
        }
        <%- end -%>
    }

    # This includes both floating IPs and other infra that's using public IPs.
    set cloud_public_v4_set {
        type ipv4_addr
        flags interval
        # use auto-merge to collapse overlapping elements, see T346432
        auto-merge
        counter
        <%- if !@public_cidrs.empty? -%>
        elements = {
        <% @public_cidrs.each do |element| -%>
            <%= element %> ,
        <% end -%>
        }
        <%- end -%>
    }

    # if required, this can be integrated with requestctl for abuse networks like in profile::firewall
    set cloud_filter {
        type ipv4_addr
        flags interval
        # use auto-merge to collapse overlapping elements, see T346432
        auto-merge
        counter
        <%- if !@cloud_filter.empty? -%>
        elements = {
        <% @cloud_filter.each do |element| -%>
            <%= element %> ,
        <% end -%>
        }
        <%- end -%>
    }

    # empty NAT chain on purpose
    chain prerouting {
        type nat hook prerouting priority dstnat; policy accept;
    }

    chain postrouting {
        type nat hook postrouting priority srcnat; policy accept;

        # 'accept' in this chain/hook means: don't do NAT
        # we are only interested in NAT for traffic leaving from the virtual network
        # check the packet is flowing virt --> wan
        oifname != $nic_wan counter accept
        # check the packet uses virt addressing
        ip saddr != @virtual_subnets_cidrs counter accept

        # dmz_cidr is the list of hosts explicitely excluded from the egress NAT.
        ip daddr @dmz_cidr_set counter accept comment "dmz_cidr"

        # T356850: cloud-internal addresses can handle the VM addresses just fine.
        ip daddr @cloud_public_v4_set counter accept comment "cloud_public_v4"
        ip daddr $cloud_private_supernet counter accept comment "cloud_private_v4"

        counter snat ip to $routing_source_ip comment "routing_source_ip"
    }

    chain forward {
        type filter hook forward priority filter; policy drop;
        # general cloud perimetral firewall
        # drop here traffic before the general VRF accept below
        ip saddr @cloud_filter counter drop
        ip daddr @cloud_filter counter drop

        # for IPv4, forward all packets only in the VRF
        meta nfproto ipv4 iifname "vrf-cloudgw" oifname { $nic_virt, $nic_wan } counter accept

        # for IPv6, allow forwarding of all ICMP
        ip6 nexthdr ipv6-icmp counter accept
        # for IPv6, allow all egress traffic in the VRF
        meta nfproto ipv6 iifname "vrf-cloudgw" oifname $nic_wan counter accept
        # for IPv6, only allow ingress taffic if established or related, in the VRF
        meta nfproto ipv6 iifname "vrf-cloudgw" oifname $nic_virt ct state established,related counter accept

        counter comment "counter dropped packets"
    }
}
