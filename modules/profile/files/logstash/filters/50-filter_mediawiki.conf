# SPDX-License-Identifier: Apache-2.0
# vim:set sw=2 ts=2 sts=2 et
# Process MediaWiki log output sent as Monolog's Logstash format
filter {

  if [type] == "mediawiki" {
    # Tag for storage in elasticsearch
    mutate {
      add_tag => [ "es" ]
      id => "filter/mutate/mw/es"
    }

    if [channel] == "api" {
      # Excluded because the message volume is too high
      drop {
        id => "filter/drop/mw/api_channel"
      }
    }

    if [channel] == "exception" {
      mutate {
        # Add a field to compute a checksum value based on message + file + line
        add_field => [
          "message_checksum", "%{normalized_message}|%{[exception][file]}"
        ]
        id => "filter/mutate/mw/exception"
      }
      # Convert message_checksum field to md5 hash
      anonymize {
        fields => [ "message_checksum" ]
        algorithm => "MD5"
        key => "boringsalt"
        id => "filter/anonymize/mw/checksum"
      }
    }

    if [channel] == "api-feature-usage" {
      mutate {
        replace => [ "message", "%{feature}" ]
        id => "filter/mutate/mw/api_feature"
      }

# TODO: investigating
#      useragent {
#        source => "agent"
#        prefix => "ua_"
#        id => "filter/useragent/mw/parse"
#      }
    } # end [channel] == "api-feature-usage"

    if [channel] == "xff" {
      # Copy XFF addresses from message
      grok {
        match => [
          "message",
          "^%{URI:url}\t(?:, )?(?<xff>(?:%{IP}(?:, )?)+)\t"
        ]
        named_captures_only => true
        id => "filter/grok/mw/xff"
      }
      # Turn comma separated list of XFF addresses into a real list
      mutate {
        split => [ "xff", ", " ]
        id => "filter/mutate/mw/xff"
      }
    } # end [channel] == "xff"

    # Don't clog the main mediawiki channel (see T232042).
    # Scandium is a Parsoid test server and this change treats errors
    # as testing errors, not production errors.
    if [host] == "scandium" {
      mutate {
        replace => [ "type", "parsoid-tests" ]
        id => "filter/mutate/mw/parsoid"
      }
    }

  } # end [type] == "mediawiki"

}
