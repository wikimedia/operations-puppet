# SPDX-License-Identifier: Apache-2.0
# vim:set sw=2 ts=2 sts=2 et
# Parse syslog input
filter {
  if [type] == "syslog" {

    # General syslog message cleanup
    mutate {
      replace => [ "host", "%{logsource}" ]
      add_tag => [ "syslog", "es" ]
      id => "filter/mutate/syslog/es"
    }

    if [program] == "node" {
        mutate {
          replace => [ "level", "%{severity}" ]
          rename => {
            "msg" => "message"
            "name" => "type"
          }
          # Remove syslog and bunyan added fields
          remove_field => [
              "facility", # syslog
              "hostname", # bunyan
              "logsource", # syslog
              "priority", # syslog
              "severity", # syslog
              "time", # bunyan
              "timestamp", # syslog
              "v" # bunyan
          ]
          id => "filter/mutate/syslog/node"
        }
    } # end if [program] == "node"

    mutate {
      # "\n" newline notation in substitution results in "\\n" in output.
      # Using a string with a literal newline works as desired.
      gsub => [ "message", "#012", '
' ]
      id => "filter/mutate/syslog/newline"
    }

    # Strip "message repeated" preamble
    if [message] =~ /^message repeated \d+ times:/ {
      grok {
        match => [
          "message",
          "^message repeated %{NUMBER:repeated} times: \[\s*%{GREEDYDATA:message}\]$"
        ]
        overwrite => [ "message" ]
        named_captures_only => true
        id => "filter/grok/syslog/repeated"
      }
    }

    if [program] == "apache2" {
      mutate {
        replace => [ "type",  "apache2" ]
        id => "filter/mutate/syslog/apache2"
      }

      # Parse typical apache error format:
      # [channel:level] [pid N:tid N] MSG? [client HOST:PORT] MSG, referer: URL
      grok {
        match => [
          "message",
          "^\[(%{WORD:channel}?:)?%{LOGLEVEL:level}\]\s+(\[pid %{POSINT}(:tid %{POSINT:thread})?\]\s+)?(?<message_prefix>[^\[]+)?(\[client %{IP:clientip}(:%{POSINT:clientport})?\]\s+)?%{DATA:message}(,\s+referer:\s+%{NOTSPACE:referrer})?$"
        ]
        overwrite => [ "message", "level" ]
        named_captures_only => true
        id => "filter/grok/syslog/apache2"
      }

      if [message_prefix] {
        mutate {
          replace => [ "message", "%{message_prefix}%{message}" ]
          remove_field => [ "message_prefix" ]
          id => "filter/mutate/syslog/message_prefix"
        }
      }

    } # end [program] == "apache2"

    # Parse WMF apache log format in modules/apache/files/defaults.conf
    # TODO:
    # * uri needs to be parsed once more so we can properly extract
    #   properly the wiki as well as the request, the current implementation
    #   is just cheap

    if [program] =~ /-mw-access$/ {

      # Drop monitoring logs
      if [message] =~ /.*check_http{1}.* \(monitoring-plugins{1} .*\).*$/ {
        drop {}
      }
      if [message] =~ /.*http\:\/\/127\.0\.0\.1{1}\/server-status.*$/ {
        drop{}
      }
      if [message] =~ /.*wmf-icinga{1}.*$/ {
        drop{}
      }
      if [message] =~ /.*ServiceChecker{1}.*$/ {
        drop{}
      }
      else {
        if "appserver" in [program] {
          mutate {
            add_field => {
              "cluster" => "appserver"
            }
          }
        } else if "api"  in [program] {
          mutate {
            add_field => {
              "cluster" => "api"
            }
          }
        } else if "jobrunner"  in [program] {
          mutate {
           add_field => {
             "cluster" => "jobrunner"
            }
          }
        } else if "parsoid"  in [program] {
          mutate {
           add_field => {
             "cluster" => "parsoid"
           }
          }
        } else {
          mutate {
            add_field => {
              "cluster" => "generic"
            }
          }
        }
        mutate {
          replace => [ "type",  "mediawiki-apache2" ]
          id => "filter/mutate/syslog/mediawiki-apache2"
        }

        grok {
          match => [
            "message",
            "^%{TIMESTAMP_ISO8601:apache_timestamp}\t%{NUMBER:request_time_us}\t%{IP:ip_addr}\t%{DATA:socket}\t%{NUMBER:request_size}\t%{DATA:http_method}\t%{DATA:uri}\t-\t%{DATA:content_type}\t%{DATA:referer}\t%{DATA:x_forwarded_for}\t%{GREEDYDATA:other_data}$"
          ]
          named_captures_only => true
          id => "filter/grok/syslog/mediawiki-apache2"
        }
        mutate {
          convert => {"x_forwarded_for" => "string"}
          convert => {"request_time_us" => "float"}
          copy => {"uri" => "thisuri"}
          copy => {"apache_timestamp" => "timestamp"}
          split => { "x_forwarded_for" => "," }
          split => { "other_data" => "	" } # This is a TAB!
          split => { "thisuri" => "/" }
          split => { "socket" => "/" }

          add_field => {
            "clientip" => "%{[x_forwarded_for][0]}"
            "user-agent" => "%{[other_data][0]}"
            "xclientip" => "%{[other_data][-1]}"
            "request_id" => "%{[other_data][-2]}"
            "http_status" => "%{[socket][-1]}"
          }
          remove_field => [
            "socket",
            "dash",
            "normalized_message",
            "facility",
            "_uri",
            "other_data",
            "apache_timestamp"
           ]
        }
        # We want @timestamp to match the apache one
        date {
          match => [ "timestamp", "ISO8601" ]
        }
        # Convert request time in seconds
        ruby {
          code => "if !event.get('request_time_us').nil?
                       event.set('request_time',event.get('request_time_us')/1000000)
                   end"
            }

        # * T246348: We have an issue where X-Client-IP lies, so we will use XFF and then X-Client-IP if
        #   XFF is empty (not actually empty, but '-'), until we fix X-Client-IP for good.

        ruby {
          code => "if event.get('clientip').length < 4
                      event.set('clientip',event.get('xclientip'))
                   end
                   if event.get('clientip').length < 4
                      event.set('clientip',event.get('ip_addr'))
                   end"
        }
        mutate {
          split => { "thisuri" => "/" }
          add_field => {
            "uri_host" => "%{[thisuri][2]}"
            "resource" => "/%{[thisuri][-1]}" # TODO: this needs fixing, it won't work for some URLs
          }
          remove_field => [
           "thisuri",
           "request_time_us",
           "ip_addr",
           "other_data",
           "xclientip"
          ]
        }
      } #end of else
    } # end [program] =~ /-mw-access$/

    if [program] == "mediawiki" {
      mutate {
        replace => [ "type",  "mediawiki" ]
        id => "filter/mutate/syslog/mw"
      }
      if [message] =~ /^{.*}$/ {
        mutate {
          # Remove syslog added fields
          remove_field => [
              "facility",
              "logsource",
              "priority",
              "program",
              "severity",
              "timestamp"
          ]
          id => "filter/mutate/syslog/mw_remove_fields"
        }
        # Parse message as json to unpack logstash record
        json {
          source => "message"
          id => "filter/json/syslog/mw_parse"
        }
      } else {
        # Mark up the message as JSON that was cut off by the syslog transport
        mutate {
          add_field => {
            "channel" => "jsonTruncated"
            "level" => "WARNING"
          }
          add_tag => [ "syslog_truncated" ]
          id => "filter/mutate/syslog/mw_truncated"
        }
      }
    } # end [program] == "mediawiki"

    if [program] == "wdqs" {
      mutate {
        replace => [ "type",  "wdqs" ]
        id => "filter/mutate/syslog/wdqs"
      }

      # nginx access logs
      if [facility_label] == "local7" {
        # https://github.com/wikimedia/operations-puppet/blob/3218df6/modules/wdqs/templates/nginx.erb#L1-L6
        grok {
          match => [
            "message",
            "^\[%{HTTPDATE:http_date}\] .%{WORD:http_method} %{NOTSPACE:message} HTTP/%{NUMBER:httpversion}. %{NUMBER:status} (?:%{NUMBER:response_size}|-) %{QS:referrer} %{QS:user_agent} %{NUMBER:request_time} %{NUMBER:upstream_time} (?:%{IP:clientip}|-) %{IP:remote_addr}$"
          ]
          overwrite => [ "message" ]
          named_captures_only => true
          add_field => { "channel" => "nginx" }
          id => "filter/grok/syslog/wdqs"
        }

        if !("_grokparsefailure" in [tags]) {
          mutate {
            add_field => {
              "message_decoded" => "%{message}"
            }
            id => "filter/mutate/syslog/grok_fail"
          }

          urldecode {
            field => "message_decoded"
            id => "filter/urldecode/syslog/message"
          }
        }

        mutate {
          # Remove syslog added fields
          remove_field => [
              "facility",
              "logsource",
              "priority",
              "program",
              "severity",
              "timestamp"
          ]
          id => "filter/mutate/syslog/remove_fields"
        }
      } # end [facility_label] == "local7"
    } # end [program] == "wdqs"
  }

  # Workaround for error field conflicts: T288549
  if [kubernetes][namespace_name] == "knative-serving" {
    mutate {
      rename => {
        "error" => "[error][message]"
      }
      remove_field => [ "knative_dev/key", "knative.dev/key" ]
      id => "filter/mutate/syslog/rename_error_T288549"
    }
  }

  # Workaround for airflow defining caller as object winning the race against knative-serving
  if [kubernetes][labels][app] == "airflow" and [caller] {
    mutate {
      replace => {
        "caller" => "%{caller}"
      }
      id => "filter/mutate/syslog/stringify_airflow_caller_field"
    }
  }
}
