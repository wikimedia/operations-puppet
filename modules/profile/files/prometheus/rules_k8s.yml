# SPDX-License-Identifier: Apache-2.0
groups:
- name: modules/profile/files/prometheus/rules_k8s.conf
  rules:
  # service_runner_request_duration_seconds is being deprecated by new metric express_router_request_duration_seconds
  # These rules can be removed once all services use an updated service-template-node and expose
  # metrics directly through prometheus (instead of via prometheus-statsd-exporter bridge).
  - record: service_uri:service_runner_request_duration_seconds:50pct5m
    expr: histogram_quantile(0.5, sum by(uri, le, service) (rate(service_runner_request_duration_seconds_bucket[5m])))
  - record: service_uri:service_runner_request_duration_seconds:90pct5m
    expr: histogram_quantile(0.9, sum by(uri, le, service) (rate(service_runner_request_duration_seconds_bucket[5m])))
  - record: service_uri:service_runner_request_duration_seconds:99pct5m
    expr: histogram_quantile(0.99, sum by(uri, le, service) (rate(service_runner_request_duration_seconds_bucket[5m])))
  - record: service_method:service_runner_request_duration_seconds:50pct5m
    expr: histogram_quantile(0.5, sum by(method, le, service) (rate(service_runner_request_duration_seconds_bucket[5m])))
  - record: service_method:service_runner_request_duration_seconds:90pct5m
    expr: histogram_quantile(0.9, sum by(method, le, service) (rate(service_runner_request_duration_seconds_bucket[5m])))
  - record: service_method:service_runner_request_duration_seconds:99pct5m
    expr: histogram_quantile(0.99, sum by(method, le, service) (rate(service_runner_request_duration_seconds_bucket[5m])))
  - record: service_status:service_runner_request_duration_seconds:50pct5m
    expr: histogram_quantile(0.5, sum by(status, le, service) (rate(service_runner_request_duration_seconds_bucket[5m])))
  - record: service_status:service_runner_request_duration_seconds:90pct5m
    expr: histogram_quantile(0.9, sum by(status, le, service) (rate(service_runner_request_duration_seconds_bucket[5m])))
  - record: service_status:service_runner_request_duration_seconds:99pct5m
    expr: histogram_quantile(0.99, sum by(status, le, service) (rate(service_runner_request_duration_seconds_bucket[5m])))

  # express_router_request_duration_seconds is emitted by services that use service-template-node.
  - record: service_uri:express_router_request_duration_seconds:50pct5m
    expr: histogram_quantile(0.5, sum by(path, le, service) (rate(express_router_request_duration_seconds_bucket[5m])))
  - record: service_uri:express_router_request_duration_seconds:90pct5m
    expr: histogram_quantile(0.9, sum by(path, le, service) (rate(express_router_request_duration_seconds_bucket[5m])))
  - record: service_uri:express_router_request_duration_seconds:99pct5m
    expr: histogram_quantile(0.99, sum by(path, le, service) (rate(express_router_request_duration_seconds_bucket[5m])))
  - record: service_method:express_router_request_duration_seconds:50pct5m
    expr: histogram_quantile(0.5, sum by(method, le, service) (rate(express_router_request_duration_seconds_bucket[5m])))
  - record: service_method:express_router_request_duration_seconds:90pct5m
    expr: histogram_quantile(0.9, sum by(method, le, service) (rate(express_router_request_duration_seconds_bucket[5m])))
  - record: service_method:express_router_request_duration_seconds:99pct5m
    expr: histogram_quantile(0.99, sum by(method, le, service) (rate(express_router_request_duration_seconds_bucket[5m])))
  - record: service_status:express_router_request_duration_seconds:50pct5m
    expr: histogram_quantile(0.5, sum by(status, le, service) (rate(express_router_request_duration_seconds_bucket[5m])))
  - record: service_status:express_router_request_duration_seconds:90pct5m
    expr: histogram_quantile(0.9, sum by(status, le, service) (rate(express_router_request_duration_seconds_bucket[5m])))
  - record: service_status:express_router_request_duration_seconds:99pct5m
    expr: histogram_quantile(0.99, sum by(status, le, service) (rate(express_router_request_duration_seconds_bucket[5m])))

- name: "modules/profile/files/prometheus/rules_k8s.conf: istio"
  # These rules are straight from the istio observability best practice:
  # https://istio.io/latest/docs/ops/best-practices/observability/
  - record: "workload:istio_requests_total"
    expr: |
      sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_requests_total)
  - record: "workload:istio_request_duration_milliseconds_count"
    expr: |
      sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_request_duration_milliseconds_count)
  - record: "workload:istio_request_duration_milliseconds_sum"
    expr: |
      sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_request_duration_milliseconds_sum)
  - record: "workload:istio_request_duration_milliseconds_bucket"
    expr: |
      sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_request_duration_milliseconds_bucket)
  - record: "workload:istio_request_bytes_count"
    expr: |
      sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_request_bytes_count)
  - record: "workload:istio_request_bytes_sum"
    expr: |
      sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_request_bytes_sum)
  - record: "workload:istio_request_bytes_bucket"
    expr: |
      sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_request_bytes_bucket)
  - record: "workload:istio_response_bytes_count"
    expr: |
      sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_response_bytes_count)
  - record: "workload:istio_response_bytes_sum"
    expr: |
      sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_response_bytes_sum)
  - record: "workload:istio_response_bytes_bucket"
    expr: |
      sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_response_bytes_bucket)
  - record: "workload:istio_tcp_sent_bytes_total"
    expr: |
      sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_tcp_sent_bytes_total)
  - record: "workload:istio_tcp_received_bytes_total"
    expr: |
      sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_tcp_received_bytes_total)
  - record: "workload:istio_tcp_connections_opened_total"
    expr: |
      sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_tcp_connections_opened_total)
  - record: "workload:istio_tcp_connections_closed_total"
    expr: |
      sum without(instance, kubernetes_namespace, kubernetes_pod_name) (istio_tcp_connections_closed_total)

- name: self
  rules:
    - record: job:up:avail
      expr: sum by (job) (up) / count by (job) (up)
