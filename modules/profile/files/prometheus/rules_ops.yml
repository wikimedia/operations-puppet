# SPDX-License-Identifier: Apache-2.0
groups:
- name: cluster_network
  rules:
  - record: cluster_device:network_transmit_bytes:rate5m
    expr: sum by(cluster, device) (rate(node_network_transmit_bytes_total{job="node"}[5m]))
  - record: cluster_device:network_receive_bytes:rate5m
    expr: sum by(cluster, device) (rate(node_network_receive_bytes_total{job="node"}[5m]))
  - record: cluster_device:network_transmit_packets:rate5m
    expr: sum by(cluster, device) (rate(node_network_transmit_packets_total{job="node"}[5m]))
  - record: cluster_device:network_receive_packets:rate5m
    expr: sum by(cluster, device) (rate(node_network_receive_packets_total{job="node"}[5m]))
  - record: cluster_device:network_transmit_drop:rate5m
    expr: sum by(cluster, device) (rate(node_network_transmit_drop_total{job="node"}[5m]))
  - record: cluster_device:network_receive_drop:rate5m
    expr: sum by(cluster, device) (rate(node_network_receive_drop_total{job="node"}[5m]))
  - record: cluster_device:network_transmit_errs:rate5m
    expr: sum by(cluster, device) (rate(node_network_transmit_errs_total{job="node"}[5m]))
  - record: cluster_device:network_receive_errs:rate5m
    expr: sum by(cluster, device) (rate(node_network_receive_errs_total{job="node"}[5m]))
  - record: cluster:netstat_IpExt_InCsumErrors:rate5m
    expr: sum by(cluster) (rate(node_netstat_IpExt_InCsumErrors{job="node"}[5m]))
  - record: cluster:netstat_Ip_FragFails:rate5m
    expr: sum by(cluster) (rate(node_netstat_Ip_FragFails{job="node"}[5m]))
  - record: cluster:netstat_Ip_InAddrErrors:rate5m
    expr: sum by(cluster) (rate(node_netstat_Ip_InAddrErrors{job="node"}[5m]))
  - record: cluster:netstat_Ip_InDiscards:rate5m
    expr: sum by(cluster) (rate(node_netstat_Ip_InDiscards{job="node"}[5m]))
  - record: cluster:netstat_Ip_InHdrErrors:rate5m
    expr: sum by(cluster) (rate(node_netstat_Ip_InHdrErrors{job="node"}[5m]))
  - record: cluster:netstat_Ip_OutDiscards:rate5m
    expr: sum by(cluster) (rate(node_netstat_Ip_OutDiscards{job="node"}[5m]))
  - record: cluster:netstat_Ip_OutNoRoutes:rate5m
    expr: sum by(cluster) (rate(node_netstat_Ip_OutNoRoutes{job="node"}[5m]))
  - record: cluster:netstat_Ip_ReasmFails:rate5m
    expr: sum by(cluster) (rate(node_netstat_Ip_ReasmFails{job="node"}[5m]))
  - record: cluster:netstat_Ip_ReasmTimeout:rate5m
    expr: sum by(cluster) (rate(node_netstat_Ip_ReasmTimeout{job="node"}[5m]))
  - record: cluster:netstat_Icmp_InMsgs:rate5m
    expr: sum by(cluster) (rate(node_netstat_Icmp_InMsgs{job="node"}[5m]))
  - record: cluster:netstat_Icmp_InEchos:rate5m
    expr: sum by(cluster) (rate(node_netstat_Icmp_InEchos{job="node"}[5m]))
  - record: cluster:netstat_Icmp_InCsumErrors:rate5m
    expr: sum by(cluster) (rate(node_netstat_Icmp_InCsumErrors{job="node"}[5m]))
  - record: cluster:netstat_Icmp_InDestUnreachs:rate5m
    expr: sum by(cluster) (rate(node_netstat_Icmp_InDestUnreachs{job="node"}[5m]))
  - record: cluster:netstat_Icmp_InErrors:rate5m
    expr: sum by(cluster) (rate(node_netstat_Icmp_InErrors{job="node"}[5m]))
  - record: cluster:netstat_Icmp_InTimeExcds:rate5m
    expr: sum by(cluster) (rate(node_netstat_Icmp_InTimeExcds{job="node"}[5m]))
  - record: cluster:netstat_Icmp_OutDestUnreachs:rate5m
    expr: sum by(cluster) (rate(node_netstat_Icmp_OutDestUnreachs{job="node"}[5m]))
  - record: cluster:netstat_Icmp_OutErrors:rate5m
    expr: sum by(cluster) (rate(node_netstat_Icmp_OutErrors{job="node"}[5m]))
  - record: cluster:netstat_Icmp6_InPktTooBigs:rate5m
    expr: sum by(cluster) (rate(node_netstat_Icmp6_InPktTooBigs{job="node"}[5m]))
  - record: cluster:netstat_Tcp_ActiveOpens:rate5m
    expr: sum by(cluster) (rate(node_netstat_Tcp_ActiveOpens{job="node"}[5m]))
  - record: cluster:netstat_Tcp_AttemptFails:rate5m
    expr: sum by(cluster) (rate(node_netstat_Tcp_AttemptFails{job="node"}[5m]))
  - record: cluster:netstat_Tcp_CurrEstab:rate5m
    expr: sum by(cluster) (rate(node_netstat_Tcp_CurrEstab{job="node"}[5m]))
  - record: cluster:netstat_Tcp_EstabResets:rate5m
    expr: sum by(cluster) (rate(node_netstat_Tcp_EstabResets{job="node"}[5m]))
  - record: cluster:netstat_Tcp_InCsumErrors:rate5m
    expr: sum by(cluster) (rate(node_netstat_Tcp_InCsumErrors{job="node"}[5m]))
  - record: cluster:netstat_Tcp_InErrs:rate5m
    expr: sum by(cluster) (rate(node_netstat_Tcp_InErrs{job="node"}[5m]))
  - record: cluster:netstat_Tcp_InSegs:rate5m
    expr: sum by(cluster) (rate(node_netstat_Tcp_InSegs{job="node"}[5m]))
  - record: cluster:netstat_Tcp_OutRsts:rate5m
    expr: sum by(cluster) (rate(node_netstat_Tcp_OutRsts{job="node"}[5m]))
  - record: cluster:netstat_Tcp_OutSegs:rate5m
    expr: sum by(cluster) (rate(node_netstat_Tcp_OutSegs{job="node"}[5m]))
  - record: cluster:netstat_Tcp_PassiveOpens:rate5m
    expr: sum by(cluster) (rate(node_netstat_Tcp_PassiveOpens{job="node"}[5m]))
  - record: cluster:netstat_Tcp_RetransSegs:rate5m
    expr: sum by(cluster) (rate(node_netstat_Tcp_RetransSegs{job="node"}[5m]))
  - record: cluster:netstat_TcpExt_ListenDrops:rate5m
    expr: sum by(cluster) (rate(node_netstat_TcpExt_ListenDrops{job="node"}[5m]))
  - record: cluster:netstat_TcpExt_ListenOverflows:rate5m
    expr: sum by(cluster) (rate(node_netstat_TcpExt_ListenOverflows{job="node"}[5m]))
  - record: cluster:netstat_TcpExt_PruneCalled:rate5m
    expr: sum by(cluster) (rate(node_netstat_TcpExt_PruneCalled{job="node"}[5m]))
  - record: cluster:netstat_TcpExt_RcvPruned:rate5m
    expr: sum by(cluster) (rate(node_netstat_TcpExt_RcvPruned{job="node"}[5m]))
  - record: cluster:netstat_TcpExt_TCPAbortFailed:rate5m
    expr: sum by(cluster) (rate(node_netstat_TcpExt_TCPAbortFailed{job="node"}[5m]))
  - record: cluster:netstat_TcpExt_TCPAbortOnData:rate5m
    expr: sum by(cluster) (rate(node_netstat_TcpExt_TCPAbortOnData{job="node"}[5m]))
  - record: cluster:netstat_TcpExt_TCPAbortOnMemory:rate5m
    expr: sum by(cluster) (rate(node_netstat_TcpExt_TCPAbortOnMemory{job="node"}[5m]))
  - record: cluster:netstat_TcpExt_TCPLossFailures:rate5m
    expr: sum by(cluster) (rate(node_netstat_TcpExt_TCPLossFailures{job="node"}[5m]))
  - record: cluster:netstat_TcpExt_TCPLostRetransmit:rate5m
    expr: sum by(cluster) (rate(node_netstat_TcpExt_TCPLostRetransmit{job="node"}[5m]))
  - record: cluster:netstat_TcpExt_TCPMemoryPressures:rate5m
    expr: sum by(cluster) (rate(node_netstat_TcpExt_TCPMemoryPressures{job="node"}[5m]))
  - record: cluster:netstat_TcpExt_TCPRetransFail:rate5m
    expr: sum by(cluster) (rate(node_netstat_TcpExt_TCPRetransFail{job="node"}[5m]))
  - record: cluster:netstat_Udp_InCsumErrors:rate5m
    expr: sum by(cluster) (rate(node_netstat_Udp_InCsumErrors{job="node"}[5m]))
  - record: cluster:netstat_Udp_InDatagrams:rate5m
    expr: sum by(cluster) (rate(node_netstat_Udp_InDatagrams{job="node"}[5m]))
  - record: cluster:netstat_Udp_InErrors:rate5m
    expr: sum by(cluster) (rate(node_netstat_Udp_InErrors{job="node"}[5m]))
  - record: cluster:netstat_Udp_NoPorts:rate5m
    expr: sum by(cluster) (rate(node_netstat_Udp_NoPorts{job="node"}[5m]))
  - record: cluster:netstat_Udp_OutDatagrams:rate5m
    expr: sum by(cluster) (rate(node_netstat_Udp_OutDatagrams{job="node"}[5m]))
  - record: cluster:netstat_Udp_RcvbufErrors:rate5m
    expr: sum by(cluster) (rate(node_netstat_Udp_RcvbufErrors{job="node"}[5m]))
  - record: cluster:netstat_Udp_SndbufErrors:rate5m
    expr: sum by(cluster) (rate(node_netstat_Udp_SndbufErrors{job="node"}[5m]))
  - record: cluster:netstat_Tcp_Input_Errors:percent5m
    expr: sum by(cluster) (cluster:netstat_Tcp_InErrs:rate5m / cluster:netstat_Tcp_InSegs:rate5m)
  - record: cluster:netstat_Udp_Input_Errors:percent5m
    expr: sum by(cluster) (cluster:netstat_Udp_InErrors:rate5m / cluster:netstat_Udp_InDatagrams:rate5m)
  - record: cluster_device:network_receive_errors:percent5m
    expr: sum by(cluster, device) (cluster_device:network_receive_errs:rate5m / cluster_device:network_receive_packets:rate5m)
  - record: cluster_device:network_transmit_errors:percent5m
    expr: sum by(cluster, device) (cluster_device:network_transmit_errs:rate5m / cluster_device:network_transmit_packets:rate5m)
  - record: cluster:sockstat_FRAG_inuse:rate5m
    expr: sum by(cluster) (rate(node_sockstat_FRAG_inuse{job="node"}[5m]))
  - record: cluster:sockstat_RAW_inuse:rate5m
    expr: sum by(cluster) (rate(node_sockstat_RAW_inuse{job="node"}[5m]))
  - record: cluster:sockstat_TCP_alloc:rate5m
    expr: sum by(cluster) (rate(node_sockstat_TCP_alloc{job="node"}[5m]))
  - record: cluster:sockstat_TCP_inuse:rate5m
    expr: sum by(cluster) (rate(node_sockstat_TCP_inuse{job="node"}[5m]))
  - record: cluster:sockstat_TCP_orphan:rate5m
    expr: sum by(cluster) (rate(node_sockstat_TCP_orphan{job="node"}[5m]))
  - record: cluster:sockstat_TCP_tw:rate5m
    expr: sum by(cluster) (rate(node_sockstat_TCP_tw{job="node"}[5m]))
  - record: cluster:sockstat_UDP_inuse:rate5m
    expr: sum by(cluster) (rate(node_sockstat_UDP_inuse{job="node"}[5m]))
  - record: cluster:sockstat_sockets_used:rate5m
    expr: sum by(cluster) (rate(node_sockstat_sockets_used{job="node"}[5m]))
  - record: cluster:node_netstat_TcpExt_TCPFastOpenActive:rate5m
    expr: sum by(cluster) (rate(node_netstat_TcpExt_TCPFastOpenActive[5m]))
  - record: cluster:node_netstat_TcpExt_TCPFastOpenActiveFail:rate5m
    expr: sum by(cluster) (rate(node_netstat_TcpExt_TCPFastOpenActiveFail[5m]))
  - record: cluster:node_netstat_TcpExt_TCPFastOpenCookieReqd:rate5m
    expr: sum by(cluster) (rate(node_netstat_TcpExt_TCPFastOpenCookieReqd[5m]))
  - record: cluster:node_netstat_TcpExt_TCPFastOpenListenOverflow:rate5m
    expr: sum by(cluster) (rate(node_netstat_TcpExt_TCPFastOpenListenOverflow[5m]))
  - record: cluster:node_netstat_TcpExt_TCPFastOpenPassive:rate5m
    expr: sum by(cluster) (rate(node_netstat_TcpExt_TCPFastOpenPassive[5m]))
  - record: cluster:node_netstat_TcpExt_TCPFastOpenPassiveFail:rate5m
    expr: sum by(cluster) (rate(node_netstat_TcpExt_TCPFastOpenPassiveFail[5m]))

- name: cluster_cpu
  rules:
  - record: cluster_mode:cpu:rate5m
    expr: avg by(cluster, mode) (rate(node_cpu_seconds_total{job="node"}[5m]))
  - record: instance_mode:cpu:rate5m
    expr: avg by(instance, mode) (rate(node_cpu_seconds_total{job="node"}[5m]))
  - record: instance_cluster:node_cpu:count
    expr: count by(instance, cluster) (node_cpu_seconds_total{job="node",mode="idle"})
  - record: cluster:cpu:sum
    expr: sum by(cluster) (instance_cluster:node_cpu:count)
  - record: cluster:cpu_count:sum
    expr: cluster:cpu:sum

- name: cluster_disk
  rules:
  - record: cluster:node_disk_reads_completed_total:rate5m
    expr: sum by (cluster) (rate(node_disk_reads_completed_total{job="node"}[5m]))
  - record: cluster:node_disk_writes_completed_total:rate5m
    expr: sum by (cluster) (rate(node_disk_writes_completed_total{job="node"}[5m]))
  - record: cluster:node_disk_io_now:none
    expr: sum by (cluster) (node_disk_io_now{job="node"})

- name: cluster_filesystem
  rules:
  - record: cluster_mountpoint:node_filesystem_size:sum
    expr: sum by(cluster, mountpoint) (node_filesystem_size_bytes{fstype!~"(tmpfs|rpc_pipefs)"})
  - record: cluster_mountpoint:node_filesystem_avail:sum
    expr: sum by(cluster, mountpoint) (node_filesystem_avail_bytes{fstype!~"(tmpfs|rpc_pipefs)"})
  - record: cluster_mountpoint:node_filesystem_free:sum
    expr: sum by(cluster, mountpoint) (node_filesystem_free_bytes{fstype!~"(tmpfs|rpc_pipefs)"})

- name: cluster_memory
  rules:
  - record: cluster:memory_MemTotal:sum
    expr: sum by(cluster) (node_memory_MemTotal_bytes{job="node"})
  - record: cluster:memory_MemFree:sum
    expr: sum by(cluster) (node_memory_MemFree_bytes{job="node"})
  - record: cluster:memory_Buffers:sum
    expr: sum by(cluster) (node_memory_Buffers_bytes{job="node"})
  - record: cluster:memory_Cached:sum
    expr: sum by(cluster) (node_memory_Cached_bytes{job="node"})
  - record: cluster:memory_Writeback:sum
    expr: sum by(cluster) (node_memory_Writeback_bytes{job="node"})
  - record: cluster:memory_Dirty:sum
    expr: sum by(cluster) (node_memory_Dirty_bytes{job="node"})
  - record: cluster:memory_HardwareCorrupted:sum
    expr: sum by(cluster) (node_memory_HardwareCorrupted_bytes{job="node"})
  - record: cluster:memory_CommitLimit:sum
    expr: sum by(cluster) (node_memory_CommitLimit_bytes{job="node"})
  - record: cluster:memory_Committed_AS:sum
    expr: sum by(cluster) (node_memory_Committed_AS_bytes{job="node"})
  - record: cluster:memory_SwapTotal:sum
    expr: sum by(cluster) (node_memory_SwapTotal_bytes{job="node"})
  - record: cluster:memory_SwapFree:sum
    expr: sum by(cluster) (node_memory_SwapFree_bytes{job="node"})
  - record: cluster:memory_SwapUsed:sum
    expr: cluster:memory_SwapTotal:sum - cluster:memory_SwapFree:sum
  - record: cluster:memory_Used:sum
    expr: cluster:memory_MemTotal:sum - cluster:memory_Cached:sum - cluster:memory_Buffers:sum
      - cluster:memory_MemFree:sum

- name: cluster_misc
  rules:
  - record: cluster:load1:sum
    expr: sum by(cluster) (node_load1{job="node"})
  - record: cluster:up:sum
    expr: sum by(cluster) (up{job="node"})
  - record: cluster:up:count
    expr: count by(cluster) (up{job="node"})
  - record: cluster:procs_running:sum
    expr: sum by(cluster) (node_procs_running{job="node"})
  - record: cluster:procs_blocked:sum
    expr: sum by(cluster) (node_procs_blocked{job="node"})
  - record: cluster:forks:rate5m
    expr: sum by(cluster) (rate(node_forks_total{job="node"}[5m]))
  - record: cluster:intr:rate5m
    expr: sum by(cluster) (rate(node_intr_total{job="node"}[5m]))
  - record: cluster:context_switches:rate5m
    expr: sum by(cluster) (rate(node_context_switches_total{job="node"}[5m]))

- name: traffic
  rules:
  - record: status_cc_xc:varnish_resourceloader_resp:irate5m
    expr: sum by(status, cache_control, x_cache) (irate(varnish_resourceloader_resp[5m]))
  - record: none:varnish_resourceloader_inm:irate5m
    expr: sum(irate(varnish_resourceloader_inm[5m]))
  - record: backend:varnish_backend_bereq_bodybytes:rate5m
    expr: sum without(server) (rate(varnish_backend_bereq_bodybytes[5m]))
  - record: backend:varnish_backend_bereq_hdrbytes:rate5m
    expr: sum without(server) (rate(varnish_backend_bereq_hdrbytes[5m]))
  - record: backend:varnish_backend_beresp_bodybytes:rate5m
    expr: sum without(server) (rate(varnish_backend_beresp_bodybytes[5m]))
  - record: backend:varnish_backend_beresp_hdrbytes:rate5m
    expr: sum without(server) (rate(varnish_backend_beresp_hdrbytes[5m]))
  - record: backend:varnish_backend_conn:rate5m
    expr: sum without(server) (rate(varnish_backend_conn[5m]))
  - record: backend:varnish_backend_happy:rate5m
    expr: sum without(server) (rate(varnish_backend_happy[5m]))
  - record: backend:varnish_backend_pipe_hdrbytes:rate5m
    expr: sum without(server) (rate(varnish_backend_pipe[5m]))
  - record: backend:varnish_backend_pipe_in:rate5m
    expr: sum without(server) (rate(varnish_backend_pipe_in[5m]))
  - record: backend:varnish_backend_pipe_out:rate5m
    expr: sum without(server) (rate(varnish_backend_pipe_out[5m]))
  - record: backend:varnish_backend_req:rate5m
    expr: sum without(server) (rate(varnish_backend_req[5m]))
  - record: instance_layer_job:varnish_main_uptime:resets5m
    expr: sum by(instance, layer, job) (resets(varnish_main_uptime[5m]))
  - record: cluster_status:varnish_thumbnails:irate5m
    expr: sum by(cluster, status) (irate(varnish_thumbnails[5m]))
  - record: job_x_cache:varnish_x_cache:rate5m
    expr: sum without(instance) (rate(varnish_x_cache[5m]))
  - record: job_x_cache:varnish_x_cache:sum
    expr: sum without(instance) (varnish_x_cache)
  - record: job_method_status:varnish_requests:sum
    expr: sum by(job, method, status) (varnish_requests)
  - record: job_method_status:varnish_requests:rate5m
    expr: sum by(job, method, status) (rate(varnish_requests[5m]))
  - record: job_method_status:varnish_requests:rate2m
    expr: sum by(job, method, status) (rate(varnish_requests[2m]))
  - record: job_method_status_backend:varnish_backend_requests_seconds_count:rate5m
    expr: sum by(job, method, status, backend) (rate(varnish_backend_requests_seconds_count[5m]))
  - record: job_method_status_backend:varnish_backend_requests_seconds_count:rate2m
    expr: sum by(job, method, status, backend) (rate(varnish_backend_requests_seconds_count[2m]))
  - record: instance_layer_job:varnish_backend_conn:sum
    expr: sum by(instance, layer, job) (varnish_backend_conn)
  - record: varnish_main_threads_used_percent
    # label_replace is to join metrics with differing instance port numbers
    expr: >
      (
        label_replace(sum by (instance) (varnish_main_threads), "instance", "$1:0", "instance", "(.*):.*") /
        label_replace(sum by (instance) (varnish_param_threads_max), "instance", "$1:0", "instance", "(.*):.*")
      ) * 100
  - record: cluster_status:nginx_http_requests_total:sum
    expr: sum by(cluster, status) (nginx_http_requests_total)
  - record: cluster_status:nginx_http_requests_total:rate5m
    expr: sum by(cluster, status) (rate(nginx_http_requests_total[5m]))
  - record: cluster_status:nginx_http_requests_total:rate2m
    expr: sum by(cluster, status) (rate(nginx_http_requests_total[2m]))
  - record: cluster_layer_code:trafficserver_responses_total:sum
    expr: sum by(cluster, layer, code) (trafficserver_responses_total)
  - record: cluster_layer_code:trafficserver_responses_total:rate5m
    expr: sum by(cluster, layer, code) (rate(trafficserver_responses_total[5m]))
  - record: cluster_layer_code:trafficserver_responses_total:rate2m
    expr: sum by(cluster, layer, code) (rate(trafficserver_responses_total[2m]))
  - record: cluster_code:haproxy_frontend_http_responses_total:rate5m
    expr: sum by(cluster, code) (rate(haproxy_frontend_http_responses_total[5m]))
  - record: cluster_code:haproxy_frontend_http_responses_total:rate2m
    expr: sum by(cluster, code) (rate(haproxy_frontend_http_responses_total[2m]))
  - record: job:haproxy_frontend_http_responses_total:rate2m
    expr: sum by(job, code) (rate(haproxy_frontend_http_responses_total[2m]))
  - record: job_method_status_backend_layer:trafficserver_backend_requests_seconds_count:rate5m
    expr: sum by(job, method, status, backend, layer) (rate(trafficserver_backend_requests_seconds_count[5m]))
  - record: job_method_status_backend_layer:trafficserver_backend_requests_seconds_count:rate2m
    expr: sum by(job, method, status, backend, layer) (rate(trafficserver_backend_requests_seconds_count[2m]))
  - record: cluster_operation_result_layer:trafficserver_cache_operations_total:rate5m
    expr: sum by(cluster, operation, result, layer) (rate(trafficserver_cache_operations_total[5m]))
  - record: cluster_source_layer:trafficserver_transactions_total:rate5m
    expr: sum by(cluster, source, layer) (rate(trafficserver_transactions_total[5m]))
  - record: cluster_state_layer:trafficserver_transaction_hits_total:rate5m
    expr: sum by(cluster, state, layer) (rate(trafficserver_transaction_hits_total[5m]))
  - record: cluster_state_layer:trafficserver_transaction_misses_total:rate5m
    expr: sum by(cluster, state, layer) (rate(trafficserver_transaction_misses_total[5m]))
  - record: cluster_state_layer:trafficserver_transaction_errors_total:rate5m
    expr: sum by(cluster, state, layer) (rate(trafficserver_transaction_errors_total[5m]))
  - record: trafficserver_connections_used_percent
    expr: >
      label_replace(sum by (instance) (trafficserver_active_connections_count), "instance", "$1:0", "instance", "(.*):.*")
      /
      on (instance) group_left label_replace(trafficserver_proxy_config_net_max_connections_in, "instance", "$1:0", "instance", "(.*):.*") * 100
  - record: trafficserver_requests_used_percent
    expr: >
      label_replace(sum by (instance) (trafficserver_active_transaction_count), "instance", "$1:0", "instance", "(.*):.*")
      /
      on (instance) group_left label_replace(trafficserver_proxy_config_net_max_requests_in, "instance", "$1:0", "instance", "(.*):.*") * 100


  # Availability
  - record: job:varnish_requests:avail2m
    expr: sum by(job) (job_method_status:varnish_requests:rate2m{status=~"5.."})
      / sum by (job) (job_method_status:varnish_requests:rate2m{status=~"[12345].."})
  - record: job_backend:varnish_backend_requests:avail2m
    expr: sum by(job, backend) (job_method_status_backend:varnish_backend_requests_seconds_count:rate2m{status=~"5.."})
      / sum by(job, backend) (job_method_status_backend:varnish_backend_requests_seconds_count:rate2m{status=~"[12345].."})
  - record: job:trafficserver_requests:avail2m
    expr: sum by(cluster, layer) (cluster_layer_code:trafficserver_responses_total:rate2m{code=~"5.."})
      / sum by(cluster, layer) (cluster_layer_code:trafficserver_responses_total:rate2m{code=~"[12345].."})
  - record: job_backend:trafficserver_backend_requests:avail2m
    expr: sum by(job, backend) (job_method_status_backend_layer:trafficserver_backend_requests_seconds_count:rate2m{status=~"5.."})
      / sum by(job, backend) (job_method_status_backend_layer:trafficserver_backend_requests_seconds_count:rate2m{status=~"[12345].."})

  # HAproxy TTFB and rates for clients
  - record: cluster_http_status_family_cache_status_le:haproxy_client_ttfb_bucket:rate2m
    # filter by job until Benthos doesn't replace entirely mtail (base metric has same name)
    expr: sum by (cluster, http_status_family, cache_status, le) (rate(haproxy_client_ttfb_bucket{job=~"cache_.*"}[2m]))
  - record: cluster_http_status_family_cache_status:haproxy_client_ttfb:50p2m
    expr: histogram_quantile(0.50, cluster_http_status_family_cache_status_le:haproxy_client_ttfb_bucket:rate2m)
  - record: cluster_http_status_family_cache_status:haproxy_client_ttfb:75p2m
    expr: histogram_quantile(0.75, cluster_http_status_family_cache_status_le:haproxy_client_ttfb_bucket:rate2m)
  - record: cluster_http_status_family_cache_status:haproxy_client_ttfb:95p2m
    expr: histogram_quantile(0.95, cluster_http_status_family_cache_status_le:haproxy_client_ttfb_bucket:rate2m)
  - record: cluster_http_status_family_cache_status:haproxy_client_ttfb:99p2m
    expr: histogram_quantile(0.99, cluster_http_status_family_cache_status_le:haproxy_client_ttfb_bucket:rate2m)
  - record: cluster_http_status_family_cache_status:haproxy_client_ttfb:rate2m
    expr: sum by (cluster, http_status_family, cache_status) (rate(haproxy_client_ttfb_count{job=~"cache_.*"}[2m]))
  # Same query but with Benthos source
  - record: cluster_http_status_family_cache_status_le:benthos_haproxy_client_ttfb_bucket:rate2m
    expr: sum by (cluster, http_status_family, cache_status, le) (rate(haproxy_client_ttfb_bucket{job=~"benthos"}[2m]))
  - record: cluster_http_status_family_cache_status:benthos_haproxy_client_ttfb:50p2m
    expr: histogram_quantile(0.50, cluster_http_status_family_cache_status_le:benthos_haproxy_client_ttfb_bucket:rate2m)
  - record: cluster_http_status_family_cache_status:benthos_haproxy_client_ttfb:75p2m
    expr: histogram_quantile(0.75, cluster_http_status_family_cache_status_le:benthos_haproxy_client_ttfb_bucket:rate2m)
  - record: cluster_http_status_family_cache_status:benthos_haproxy_client_ttfb:95p2m
    expr: histogram_quantile(0.95, cluster_http_status_family_cache_status_le:benthos_haproxy_client_ttfb_bucket:rate2m)
  - record: cluster_http_status_family_cache_status:benthos_haproxy_client_ttfb:99p2m
    expr: histogram_quantile(0.99, cluster_http_status_family_cache_status_le:benthos_haproxy_client_ttfb_bucket:rate2m)
  - record: cluster_http_status_family_cache_status:benthos_haproxy_client_ttfb:rate2m
    expr: sum by (cluster, http_status_family, cache_status) (rate(haproxy_client_ttfb_count{job=~"benthos"}[2m]))

  - record: cluster_method:mediawiki_http_requests_duration_count:rate2m
    expr: sum by (cluster, method) (rate(mediawiki_http_requests_duration_count[2m]))
  # ATS backend TTFB per backend and cache result code
  - record: cluster_backend_cache_result_code:trafficserver_backend_cache_result_code_client_ttfb_bucket:rate2m
    expr: sum by (cluster, backend, cache_result_code, le) (rate(trafficserver_backend_cache_result_code_client_ttfb_bucket[2m]))
  - record: cluster_backend_cache_result_code:trafficserver_backend_cache_result_code_client_ttfb_bucket:50p2m
    expr: histogram_quantile(0.50, cluster_backend_cache_result_code:trafficserver_backend_cache_result_code_client_ttfb_bucket:rate2m)
  - record: cluster_backend_cache_result_code:trafficserver_backend_cache_result_code_client_ttfb_bucket:75p2m
    expr: histogram_quantile(0.75, cluster_backend_cache_result_code:trafficserver_backend_cache_result_code_client_ttfb_bucket:rate2m)
  - record: cluster_backend_cache_result_code:trafficserver_backend_cache_result_code_client_ttfb_bucket:95p2m
    expr: histogram_quantile(0.95, cluster_backend_cache_result_code:trafficserver_backend_cache_result_code_client_ttfb_bucket:rate2m)
  - record: cluster_backend_cache_result_code:trafficserver_backend_cache_result_code_client_ttfb_bucket:99p2m
    expr: histogram_quantile(0.99, cluster_backend_cache_result_code:trafficserver_backend_cache_result_code_client_ttfb_bucket:rate2m)

  # Aggregated availability

  # Varnish
  - record: job:varnish_requests:avail2m
    expr: sum by(job) (job_method_status:varnish_requests:rate2m{status=~"5.."})
      / sum by(job) (job_method_status:varnish_requests:rate2m{status=~"[12345].."})
  - record: job:varnish_requests:avail5m
    expr: sum by(job) (job_method_status:varnish_requests:rate5m{status=~"5.."})
      / sum by(job) (job_method_status:varnish_requests:rate5m{status=~"[12345].."})
  - record: job_backend:varnish_backend_requests:avail5m
    expr: sum by(backend, job) (job_method_status_backend:varnish_backend_requests_seconds_count:rate5m{status=~"5.."})
      / sum by(backend, job) (job_method_status_backend:varnish_backend_requests_seconds_count:rate5m{status=~"[12345].."})

  # Trafficserver / ATS
  - record: cluster_layer:trafficserver_requests:avail2m
    expr: sum by(cluster, layer) (cluster_layer_code:trafficserver_responses_total:rate2m{code=~"5.."})
      / sum by(cluster, layer) (cluster_layer_code:trafficserver_responses_total:rate2m{code=~"[12345].."})
  - record: cluster_layer:trafficserver_requests:avail5m
    expr: sum by(cluster, layer) (cluster_layer_code:trafficserver_responses_total:rate5m{code=~"5.."})
      / sum by(cluster, layer) (cluster_layer_code:trafficserver_responses_total:rate5m{code=~"[12345].."})
  - record: job_backend:trafficserver_backend_requests:avail5m
    expr: sum by(backend, job) (job_method_status_backend_layer:trafficserver_backend_requests_seconds_count:rate5m{status=~"5.."})
      / sum by(backend, job) (job_method_status_backend_layer:trafficserver_backend_requests_seconds_count:rate5m{status=~"[12345].."})

  # haproxy
  - record: cluster:haproxy_requests:avail2m
    expr: sum by(cluster) (cluster_code:haproxy_frontend_http_responses_total:rate2m{code="5xx"})
      / sum by(cluster) (cluster_code:haproxy_frontend_http_responses_total:rate2m{code=~"[12345]xx"})
  - record: job:haproxy_requests:avail2m
    expr: sum by(cluster) (job:haproxy_frontend_http_responses_total:rate2m{code="5xx"})
      / sum by(cluster) (job:haproxy_frontend_http_responses_total:rate2m{code=~"[12345]xx"})

  # Aggregated request rates

  # Varnish
  - record: job:varnish_requests:avg1d
    expr: sum by(job) (avg_over_time(job_method_status:varnish_requests:rate5m[1d]))
  - record: job:varnish_requests:avg7d
    expr: sum by(job) (avg_over_time(job_method_status:varnish_requests:rate5m[1w]))

- name: mysql
  rules:
  - record: job_role_shard:mysql_global_status_queries:rate5m
    expr: sum by(job, role, shard) (rate(mysql_global_status_queries[5m]))
  - record: job_role_shard:mysql_global_status_handlers_write_total:rate5m
    expr: sum by(job, role, shard) (rate(mysql_global_status_handlers_total{handler=~"(write|update|delete).*"}[5m]))
  - record: job_role_shard:mysql_global_status_handlers_read_total:rate5m
    expr: sum by(job, role, shard) (rate(mysql_global_status_handlers_total{handler=~"read.*"}[5m]))
  - record: job_role_shard:mysql_global_status_bytes_received:rate5m
    expr: sum by(job, role, shard) (rate(mysql_global_status_bytes_received[5m]))
  - record: job_role_shard:mysql_global_status_bytes_sent:rate5m
    expr: sum by(job, role, shard) (rate(mysql_global_status_bytes_sent[5m]))
  - record: job_shard:mysql_slave_status_seconds_behind_master:max
    expr: max by(job, shard) (mysql_slave_status_seconds_behind_master)

- name: memcache
  rules:
  - record: command:memcached_commands_total:rate5m
    expr: sum by(command) (rate(memcached_commands_total[5m]))
  - record: command:memcached_items_evicted_total:rate5m
    expr: sum by(command) (rate(memcached_items_evicted_total[5m]))
  - record: command:memcached_items_reclaimed_total:rate5m
    expr: sum by(command) (rate(memcached_items_reclaimed_total[5m]))
  - record: none:memcached_read_bytes_total:rate5m
    expr: sum(rate(memcached_read_bytes_total[5m]))
  - record: none:memcached_written_bytes_total:rate5m
    expr: sum(rate(memcached_written_bytes_total[5m]))
  - record: instance_slab:memcached_slab_current_items:sum
    expr: sum by(instance, slab) (memcached_slab_current_items)
  - record: instance_slab:memcached_slab_current_chunks:sum
    expr: sum by(instance, slab) (memcached_slab_current_chunks)

- name: apache
  rules:
  - record: cluster_state:apache_workers:sum
    expr: sum by(state, cluster) (apache_workers)
  - record: cluster_state:apache_scoreboard:sum
    expr: sum by(state, cluster) (apache_scoreboard)
  - record: cluster:apache_accesses_total
    expr: sum by(cluster) (apache_accesses_total)
  - record: cluster:apache_sent_kilobytes_total
    expr: sum by(cluster) (apache_sent_kilobytes_total)

- name: redis
  rules:
  - record: cmd_job:redis_command_call_duration_seconds_count:rate5m
    expr: sum by(cmd, job) (rate(redis_command_call_duration_seconds_count[5m]))
  - record: cmd_job:redis_command_call_duration_seconds_sum:rate5m
    expr: sum by(cmd, job) (rate(redis_command_call_duration_seconds_sum[5m]))

- name: rsyslog
  rules:
  - record: cluster:rsyslog_queue_full:rate5m
    expr: sum by(cluster) (rate(rsyslog_queue_full[5m]))
  - record: cluster_input:rsyslog_input_submitted:rate5m
    expr: sum by(input, cluster) (rate(rsyslog_input_submitted[5m]))
  - record: cluster_action:rsyslog_action_processed:rate5m
    expr: sum by(action, cluster) (rate(rsyslog_action_processed[5m]))
  - record: cluster_action:rsyslog_action_failed:rate5m
    expr: sum by(action, cluster) (rate(rsyslog_action_failed[5m]))
  - record: cluster_action:rsyslog_action_suspended:rate5m
    expr: sum by(action, cluster) (rate(rsyslog_action_suspended[5m]))
  - record: cluster_queue:rsyslog_queue_discarded_full:rate5m
    expr: sum by(queue, cluster) (rate(rsyslog_queue_discarded_full[5m]))
  - record: cluster_queue:rsyslog_queue_discarded_not_full:rate5m
    expr: sum by(queue, cluster) (rate(rsyslog_queue_discarded_not_full[5m]))

- name: puppet
  rules:
  # Puppet agent has failed altogether
  - record: cluster:puppet_agent_failed:sum
    expr: sum by (cluster) (puppet_agent_failed)
  - record: cluster:puppet_agent_failed:count
    expr: count by (cluster) (puppet_agent_failed)
  # Certain failures result in zero resources reported, aggregate for alerting
  - record: cluster:puppet_agent_resources_total:count0
    expr: count by (cluster) (puppet_agent_resources_total == 0)
  - record: cluster:puppet_agent_resources_total:count
    expr: count by (cluster) (puppet_agent_resources_total)


- name: pdu
  rules:
  # Sentry 3 https://github.com/librenms/librenms/blob/master/mibs/sentry/Sentry3-MIB
  - record: instance_row:pdu_infeedPower:sum
    expr: sum by(instance, row) (pdu_infeedPower)
  - record: instance_row:pdu_infeedVoltage:max
    expr: max by(instance, row) (pdu_infeedVoltage)
  - record: instance_row:pdu_infeedVoltage:min
    expr: min by(instance, row) (pdu_infeedVoltage)
  - record: instance_row:pdu_infeedCapacityUsed:avg
    expr: avg by(instance, row) (pdu_infeedLoadValue / pdu_infeedCapacity)
  - record: instance_row:pdu_infeedLoadValue:max
    expr: max by(instance, row) (pdu_infeedLoadValue)
  - record: instance_row:pdu_infeedLoadValue:min
    expr: min by(instance, row) (pdu_infeedLoadValue)

  # Sentry 4 https://github.com/librenms/librenms/blob/master/mibs/sentry/Sentry4-MIB
  - record: instance_row:pdu_st4InputCordActivePower:sum
    expr: sum by(instance, row) (pdu_st4InputCordActivePower)

- name: mediawiki
  rules:
  - record: cluster_code_method_handler:mediawiki_http_requests_duration:avg2m
    expr: sum by (cluster, code, method, handler) (rate(mediawiki_http_requests_duration_sum[2m]))
              /
          sum by (cluster, code, method, handler) (rate(mediawiki_http_requests_duration_count[2m]))

  - record: cluster_method_code_handler:mediawiki_http_requests_duration:75p2m
    expr: histogram_quantile(0.75,
             sum by (cluster, le, method, code, handler) (rate(mediawiki_http_requests_duration_bucket[2m])))

  - record: cluster_method_code_handler:mediawiki_http_requests_duration:95p2m
    expr: histogram_quantile(0.95,
             sum by (cluster, le, method, code, handler) (rate(mediawiki_http_requests_duration_bucket[2m])))

  - record: cluster_method:mediawiki_http_requests_duration_count:rate2m
    expr: sum by (cluster, method) (rate(mediawiki_http_requests_duration_count[2m]))

- name: systemd
  rules:
  - record: cluster:node_systemd_unit_state_failed:sum
    expr: sum by (cluster) (node_systemd_unit_state{state="failed"})
  - record: cluster:node_systemd_unit_state_failed:count
    expr: count by (cluster) (node_systemd_unit_state{state="failed"})
  - record: instance:node_systemd_unit_state_failed:count
    expr: count by (instance) (node_systemd_unit_state{state="failed"})
  - record: instance:node_systemd_unit_state_failed:count1
    expr: count by (instance) (node_systemd_unit_state{state="failed"} == 1)
  - record: instance_name:node_systemd_unit_state_failed:count
    expr: count by (instance, name) (node_systemd_unit_state{state="failed"})
  - record: instance_name:node_systemd_unit_state_failed:count1
    expr: count by (instance, name) (node_systemd_unit_state{state="failed"} == 1)
  - record: instance_name:node_systemd_unit_state_failed:sum
    expr: sum by (instance, name) (node_systemd_unit_state{state="failed"})

- name: cadvisor
  rules:
  - record: cluster_id:container_cpu_usage_seconds_total:rate5m
    expr: sum by (id,cluster) (rate(container_cpu_usage_seconds_total{id=~".*\\.service"}[5m]))
  - record: cluster_id:container_cpu_system_seconds_total:rate5m
    expr: sum by (id,cluster) (rate(container_cpu_system_seconds_total{id=~".*\\.service"}[5m]))
  - record: cluster_id:container_cpu_user_seconds_total:rate5m
    expr: sum by (id,cluster) (rate(container_cpu_user_seconds_total{id=~".*\\.service"}[5m]))
  - record: cluster_id:container_memory_rss:sum
    expr: sum by (id,cluster) (container_memory_rss{id=~".*\\.service"})
  - record: cluster_id:container_memory_swap:sum
    expr: sum by (id,cluster) (container_memory_swap{id=~".*\\.service"})
  - record: cluster_id:container_memory_cache:sum
    expr: sum by (id,cluster) (container_memory_cache{id=~".*\\.service"})
  - record: cluster_id:container_memory_bytes:sum
    # Sum cache/rss/swap to get a more accurate memory usage instead of
    # container_memory_usage_bytes. See section 5.5 of
    # https://www.kernel.org/doc/Documentation/cgroup-v1/memory.txt
    expr: |
      sum by (id,cluster) (
        container_memory_cache{id=~".*\\.service"}
          +
        container_memory_rss{id=~".*\\.service"}
          +
        container_memory_swap{id=~".*\\.service"}
      )

- name: ipvs
  rules:
  - record: instance:node_ipvs_backend_connections_active:max5m
    expr: sum by(instance) (max_over_time(node_ipvs_backend_connections_active[5m]))
  - record: local_port_local_address_instance:node_ipvs_backend_connections_active:max5m
    expr: sum by(local_port, local_address, instance) (max_over_time(node_ipvs_backend_connections_active[5m]))
  - record: local_port_local_address_instance:node_ipvs_backend_connections_inactive:max5m
    expr: sum by(local_port, local_address, instance) (max_over_time(node_ipvs_backend_connections_inactive[5m]))

- name: self
  rules:
    - record: job:up:avail
      expr: sum by (job) (up) / count by (job) (up)
