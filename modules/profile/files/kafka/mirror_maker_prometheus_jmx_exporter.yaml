---
lowercaseOutputLabelNames: true
# The following setting allows the creation of metrics like:
# kafka_server_ReplicaManager_UnderReplicatedPartitions
# that are a mix of lower-case and camel-case. This is a convention used only
# for kafka related metrics to allow a better readability, more context about
# the discussion to establish a convention in T177078.
lowercaseOutputName: false

# The default prometheus_jmx_exporter scraper does a pretty good job at
# grabbing JMX mbeans.  We only need to transform a few of them.

rules:

# The all-topic level metrics at the client_id have some mBean metric value names
# with the "<topic>-<client-id>.<metric>" in them.  E.g.
# kafka.consumer:type=consumer-fetch-manager-metrics,client-id=kafka-mirror-k1_to_k2-0 test1-0.records-lag-avg
# This pattern extracts out the topic, client_id and metric to provide e.g.
# kafka_consumer_consumer_fetch_manager_metrics_records_lag_avg{client_id="kafka-mirror-k1_to_k2-0",topic="test1",} 0.0
- pattern: kafka.consumer<type=(consumer-fetch-manager-metrics), client-id=([\w\-_\.]+)><>([\w\-_]+)\-\d+\.(records\-lag[\w\-_]+)
  name: kafka_consumer_$1_$4
  labels:
    client_id: $2
    topic: $3

# Capture only all-topic level fetch metrics, and add the label topic: __all__
# This allows us to use the same metric name with the same labels as the per-topic
# level fetch metrics capture by the .* pattern below.
- pattern: kafka.consumer<type=(consumer-fetch-manager-metrics), client-id=([\w\-_\.]+)><>([\w\-_]+)
  name: kafka_consumer_$1_$3
  labels:
    client_id: $2
    topic: __all__

# kafka_tools_MirrorMaker_MirrorMaker_numDroppedMessages
- pattern: kafka.tools<type=(MirrorMaker), name=(.+)><>Value
  name: kafka_tools_$1_$2

# For everything else, the scraper does a good job.
- pattern: .*
