# SPDX-License-Identifier: Apache-2.0
# Any value that needs to be injected in the template should be passed
# as environment variable (see https://www.benthos.dev/docs/configuration/interpolation/)
#
http:
  enabled: true
  address: "0.0.0.0:${PORT}"
  debug_endpoints: ${ENABLE_DEBUG}

input:
  label: "syslog"
  socket_server:
    network: udp
    address: "${SOCKET_ADDRESS}"
    codec: lines
    tls:
      cert_file: ""
      key_file: ""
      self_signed: false

buffer:
 memory:
   limit: ${BUFFER_MEMORY_LIMIT_BYTES}
   batch_policy:
     enabled: true
     count: 1024
     period: 100ms

pipeline:
  threads: ${PIPELINE_THREADS}
  processors:
    - label: "drop_unparsable_messages"
      mapping: |
        root = if content().contains("SSL handshake failure").catch(false) || content().contains("<BADREQ> <BADREQ> <BADREQ>").catch(false)
        {
          deleted()
        }
    - label: "syslog_format"
      parse_log:
        format: "syslog_rfc5424"
        codec: "json"
    - label: "parse_bug_workaround" # see github.com/benthosdev/benthos/issues/2192
      mapping: root = this.string().parse_json()
    - label: "drop_high_priority_messages"
      mapping: root = if this.severity.number() < 6 { deleted() }
    - label: "get_structureddata"
      mapping: root = this.structureddata.benthoslog
    - label: "transform_json_fields"
      mapping: |
        root = this
        # time_firstbyte is ms (HAProxy default), should be in seconds
        root.time_firstbyte = (this.time_backend_response.number() / 1000)
        # time_firstbyte_ns is the equivalent in ns used by metrics and deleted afterwards
        root.time_firstbyte_ns = (this.time_backend_response.number() * 1000000).int64()
        root.time_backend_response = deleted()

        # Parse accept_date into expected format
        # root.dt is the HAProxy request timestamp
        # while meta.dt is the Benthos processing timestamp
        root.dt = this.accept_date.ts_parse("02/Jan/2006:15:04:05.000").ts_format("2006-01-02T15:04:05Z", "UTC")
        root.accept_date = deleted()

        # To be sure response size is actually converted to a number
        root.response_size = this.response_size.number().or(0)

        root.uri_path = if this.uri_path.length() == 0 { "/" }
        root.http_status = this.http_status.number()
        root.sequence = this.sequence.number().catch(deleted())
        root.haproxy_pid = this.haproxy_pid.number()

        # Metadata
        meta dt = now().ts_format("2006-01-02T15:04:05Z", "UTC")
        # When no host is present better to delete metadata field
        meta domain = this.uri_host.catch(deleted())
        meta stream = "webrequest_frontend"
        root.meta = root_meta()

        root.message = deleted()
        # Note that hostname() (or other bloblang functions) doesn't return FQDN.
        # This must be passed as envvar
        root.hostname = env("BENTHOS_FQDN").or(hostname())
        # Set by envvar, webrequest_source can be text|upload
        root.webrequest_source = env("BENTHOS_SOURCE").or("unknown")
        # Drop these keys after all processing
        root."$schema" = "/webrequest/1.0.0"

    - label: "ttfb_metric_condition"
      switch:
        # Increment metrics only if ttfb > 0
        - check: this.time_firstbyte_ns.number(0) > 0
          processors:
            - label: "ttfb_metric_switch"
              switch:
                # If it's an hc request, increment also this timing
                - check: this.exists("uri_host") && this.uri_host.contains("healthcheck.wikimedia.org")
                  processors:
                    - label: "ttfb_metric_healthcheck"
                      metric:
                        name: "haproxy_client_healthcheck_ttfb"
                        type: timing
                        labels:
                          cache_status: ${! json("cache_status") }
                          http_status_family: ${! (json("http_status").number() / 100).floor() }
                        value: ${! json("time_firstbyte_ns") }

            # This is always incremented
            - label: "ttfb_metric"
              metric:
                name: "haproxy_client_ttfb"
                type: timing
                labels:
                  cache_status: ${! json("cache_status") }
                  http_status_family: ${! (json("http_status").number() / 100).floor() }
                value: ${! json("time_firstbyte_ns") }

    - label: "termination_states_total_metric"
      metric:
        name: "haproxy_termination_states_total"
        type: counter
        labels:
          # We need only the first 2 character from termination state
          termination_state: ${! json("termination_state").slice(0, 2) }

    - label: "delete_unused_fields"
      mapping: |
        root = this
        root.time_firstbyte_ns = deleted()
        root.termination_state = deleted()

logger:
  level: WARN
  format: logfmt
output:
  switch:
    cases:
      - check: errored()
        output:
          label: "webrequest_deadletter"
          kafka_franz:
            seed_brokers: [ "${KAFKA_BROKERS}" ]
            topic: "${WEBREQUEST_TOPIC}_error"
            compression: "snappy"
            tls:
              enabled: true
              root_cas_file: "${ROOT_CAS_FILE}"
              skip_cert_verify: false
          processors:
            - mapping: |
                root = this
                root.error = error()
      - output:
          label: "webrequest_out"
          kafka_franz:
            seed_brokers: [ "${KAFKA_BROKERS}" ]
            topic: "${WEBREQUEST_TOPIC}"
            compression: "snappy"
            tls:
              enabled: true
              root_cas_file: "${ROOT_CAS_FILE}"
              skip_cert_verify: false

metrics:
  prometheus:
    use_histogram_timing: true
    add_process_metrics: true
    add_go_metrics: true
    histogram_buckets:
       - .001
       - .005
       - .01
       - .02
       - .045
       - .07
       - .1
       - .15
       - .25
       - .35
       - .5
       - .75
       - 1.2
       - 3
       - 10
       - 30
       - 60
  # Add the benthos_ prefix only to metrics not starting with haproxy
  mapping: |
    root = if !this.has_prefix("haproxy") {
      "benthos_" + this
    } else {
      this
    }

tests:
  - name: syslog parsing
    target_processors: syslog_format
    environment: {}
    input_batch:
      - content: '<134>1 2024-05-23T15:23:41.859657+00:00 localhost haproxy 1498510 - [benthoslog haproxy_pid="1498510" ip="127.0.0.1" sequence="-" accept_date="23/May/2024:15:23:41.858" time_backend_response="-1" http_status="301" response_size="81" termination_state="LR" uri_host="-" referer="-" user_agent="-" accept_language="-" range="-" accept="-" tls="-" cache_status="-" content_type="-" x_analytics="-" x_cache="-" backend="-" http_method="GET" uri_path="/wiki/Main_Page" uri_query="?foo=bar"] 12345 127.0.0.1 170749021731 [09/Feb/2024:14:50:17.576] 2 200 72124 ---- {en.wikipedia.beta.wmflabs.org|test.test|curl/7.74.0|en|-|*/*|vers=TLSv1.3;keyx=UNKNOWN;auth=ECDSA;ciph=AES-256-GCM-SHA384;prot=;sess=new} {hit-remote|text/html; charset=UTF-8|ns=0;page_id=1;rev_id=587739;proxy=OperaMini;https=1;client_port=58186;nocookies=1|traffic-cache-bullseye miss, traffic-cache-bullseye hit/6|deployment-mediawiki12.deployment-prep.eqiad1.wikimedia.cloud} GET /wiki/Main_Page ?foo=bar'
    output_batches:
      -
        - content_equals: '{"appname":"haproxy","facility":16,"hostname":"localhost","message":"12345 127.0.0.1 170749021731 [09/Feb/2024:14:50:17.576] 2 200 72124 ---- {en.wikipedia.beta.wmflabs.org|test.test|curl/7.74.0|en|-|*/*|vers=TLSv1.3;keyx=UNKNOWN;auth=ECDSA;ciph=AES-256-GCM-SHA384;prot=;sess=new} {hit-remote|text/html; charset=UTF-8|ns=0;page_id=1;rev_id=587739;proxy=OperaMini;https=1;client_port=58186;nocookies=1|traffic-cache-bullseye miss, traffic-cache-bullseye hit/6|deployment-mediawiki12.deployment-prep.eqiad1.wikimedia.cloud} GET /wiki/Main_Page ?foo=bar","priority":134,"procid":"1498510","severity":6,"structureddata":{"benthoslog":{"accept":"-","accept_date":"23/May/2024:15:23:41.858","accept_language":"-","backend":"-","cache_status":"-","content_type":"-","haproxy_pid":"1498510","http_method":"GET","http_status":"301","ip":"127.0.0.1","range":"-","referer":"-","response_size":"81","sequence":"-","termination_state":"LR","time_backend_response":"-1","tls":"-","uri_host":"-","uri_path":"/wiki/Main_Page","uri_query":"?foo=bar","user_agent":"-","x_analytics":"-","x_cache":"-"}},"timestamp":"2024-05-23T15:23:41.859657Z","version":1}'
  - name: drop ssl errors
    target_processors: drop_unparsable_messages
    input_batch:
      - json_content: {"appname":"haproxy","facility":16,"hostname":"localhost","message":"SSL handshake failure","priority":134,"procid":"12345 127.0.0.1 170749193534 [09/Feb/2024:15:18:55.660","severity":6,"timestamp":"2024-02-09T15:18:55Z", "webrequest_source":"unknown"}
    output_batches: []
  - name: drop badreq errors
    target_processors: drop_unparsable_messages
    input_batch:
      - content: '<134>1 2024-05-24T05:54:02.044062+00:00 - haproxy 1499272 - [benthoslog haproxy_pid="1499272" ip="127.0.0.1" sequence="-" accept_date="24/May/2024:05:54:02.044" time_backend_response="-1" http_status="400" response_size="0" termination_state="CR" uri_host="-" referer="-" user_agent="-" accept_language="-" range="-" accept="-" tls="-" cache_status="-" content_type="-" x_analytics="-" x_cache="-" backend="-" http_method="<BADREQ>" uri_path="<BADREQ>" uri_query="<BADREQ>"] 1499272 41.45.162.137 - [24/May/2024:05:54:02.044] -1 400 0 CR-- <BADREQ> <BADREQ> <BADREQ>'
    output_batches: []
  - name: drop non-info messages
    target_processors: drop_high_priority_messages
    environment: {}
    input_batch:
      - json_content: {"appname":"haproxy","facility":16,"message":"Server default is DOWN, reason: Layer4 connection problem, info: \"Connection refused\", check duration: 0ms. 1 active and 0 backup servers left. 0 sessions active, 0 requeued, 0 remaining in queue.","priority":129,"procid":"1508141","severity":1,"timestamp":"2024-05-24T08:21:40.739856Z","version":1}
    output_batches: []
  - name: get structured data
    target_processors: get_structureddata
    environment: {}
    input_batch:
      - json_content: {"appname":"haproxy","facility":16,"hostname":"localhost","message":"12345 127.0.0.1 170749021731 [09/Feb/2024:14:50:17.576] 2 200 72124 ---- {en.wikipedia.beta.wmflabs.org|test.test|curl/7.74.0|en|-|*/*|vers=TLSv1.3;keyx=UNKNOWN;auth=ECDSA;ciph=AES-256-GCM-SHA384;prot=;sess=new} {hit-remote|text/html; charset=UTF-8|ns=0;page_id=1;rev_id=587739;proxy=OperaMini;https=1;client_port=58186;nocookies=1|traffic-cache-bullseye miss, traffic-cache-bullseye hit/6|deployment-mediawiki12.deployment-prep.eqiad1.wikimedia.cloud} GET /wiki/Main_Page ?foo=bar","priority":134,"procid":"1498510","severity":6,"structureddata":{"benthoslog":{"accept":"-","accept_date":"23/May/2024:15:23:41.858","accept_language":"-","backend":"-","cache_status":"-","content_type":"-","haproxy_pid":"1498510","http_status":"301","ip":"127.0.0.1","range":"-","referer":"-","response_size":"81","sequence":"-","termination_state":"LR","time_backend_response":"-1","tls":"-","uri_host":"-","user_agent":"-","x_analytics":"-","x_cache":"-"}},"timestamp":"2024-05-23T15:23:41.859657Z","version":1}
    output_batches:
      - - json_contains: {"accept":"-","accept_date":"23/May/2024:15:23:41.858","accept_language":"-","backend":"-","cache_status":"-","content_type":"-","haproxy_pid":"1498510","http_status":"301","ip":"127.0.0.1","range":"-","referer":"-","response_size":"81","sequence":"-","time_backend_response":"-1","tls":"-","uri_host":"-","user_agent":"-","x_analytics":"-","x_cache":"-"}
  - name: test transform json fields
    target_processors: transform_json_fields
    environment: {}
    input_batch:
      - json_content: {"accept":"*/*","accept_date":"23/May/2024:15:23:41.858","accept_language":"en","backend":"deployment-mediawiki12.deployment-prep.eqiad1.wikimedia.cloud","cache_status":"hit-remote","content_type":"text/html; charset=UTF-8","haproxy_pid":"12345","http_method":"GET","http_status":200,"ip":"127.0.0.1","range":"-","referer":"test.test","response_size":72124,"sequence":"-","termination_state":"LR","time_backend_response":"5","tls":"vers=TLSv1.3;keyx=UNKNOWN;auth=ECDSA;ciph=AES-256-GCM-SHA384;prot=;sess=new","uri_host":"en.wikipedia.beta.wmflabs.org","uri_path":"/wiki/Main_Page","uri_query":"?foo=bar","user_agent":"curl/7.74.0","x_analytics":"ns=0;page_id=1;rev_id=587739;proxy=OperaMini;https=1;client_port=58192;nocookies=1","x_cache":"traffic-cache-bullseye miss, traffic-cache-bullseye hit/9"}
    output_batches:
      - - json_contains: {"accept":"*/*","accept_language":"en","backend":"deployment-mediawiki12.deployment-prep.eqiad1.wikimedia.cloud","cache_status":"hit-remote","content_type":"text/html; charset=UTF-8","haproxy_pid":"12345","meta":{"domain":"en.wikipedia.beta.wmflabs.org","stream":"webrequest_frontend"},"dt":"2024-05-23T15:23:41Z","http_method":"GET","http_status":200,"ip":"127.0.0.1","range":"-","referer":"test.test","response_size":72124,"sequence":"-","$schema":"/webrequest/1.0.0","time_firstbyte":0.005,"tls":"vers=TLSv1.3;keyx=UNKNOWN;auth=ECDSA;ciph=AES-256-GCM-SHA384;prot=;sess=new","uri_host":"en.wikipedia.beta.wmflabs.org","uri_path":"/wiki/Main_Page","uri_query":"?foo=bar","user_agent":"curl/7.74.0","x_analytics":"ns=0;page_id=1;rev_id=587739;proxy=OperaMini;https=1;client_port=58192;nocookies=1","x_cache":"traffic-cache-bullseye miss, traffic-cache-bullseye hit/9","webrequest_source":"unknown"}
  - name: test missing path
    target_processors: transform_json_fields
    environment: {}
    input_batch:
      - json_content: {"accept":"*/*","accept_date":"23/May/2024:15:23:41.858","accept_language":"en","backend":"deployment-mediawiki12.deployment-prep.eqiad1.wikimedia.cloud","cache_status":"hit-remote","content_type":"text/html; charset=UTF-8","haproxy_pid":"12345","http_method":"GET","http_status":200,"ip":"127.0.0.1","range":"-","referer":"test.test","response_size":72124,"sequence":"-","termination_state":"LR","time_backend_response":"5","tls":"vers=TLSv1.3;keyx=UNKNOWN;auth=ECDSA;ciph=AES-256-GCM-SHA384;prot=;sess=new","uri_host":"en.wikipedia.beta.wmflabs.org","uri_path":"","uri_query":"?foo=bar","user_agent":"curl/7.74.0","x_analytics":"ns=0;page_id=1;rev_id=587739;proxy=OperaMini;https=1;client_port=58192;nocookies=1","x_cache":"traffic-cache-bullseye miss, traffic-cache-bullseye hit/9"}
    output_batches:
      - - json_contains: {"accept":"*/*","accept_language":"en","backend":"deployment-mediawiki12.deployment-prep.eqiad1.wikimedia.cloud","cache_status":"hit-remote","content_type":"text/html; charset=UTF-8","haproxy_pid":"12345","meta":{"domain":"en.wikipedia.beta.wmflabs.org","stream":"webrequest_frontend"},"dt":"2024-05-23T15:23:41Z","http_method":"GET","http_status":200,"ip":"127.0.0.1","range":"-","referer":"test.test","response_size":72124,"sequence":"-","$schema":"/webrequest/1.0.0","time_firstbyte":0.005,"tls":"vers=TLSv1.3;keyx=UNKNOWN;auth=ECDSA;ciph=AES-256-GCM-SHA384;prot=;sess=new","uri_host":"en.wikipedia.beta.wmflabs.org","uri_path":"/","uri_query":"?foo=bar","user_agent":"curl/7.74.0","x_analytics":"ns=0;page_id=1;rev_id=587739;proxy=OperaMini;https=1;client_port=58192;nocookies=1","x_cache":"traffic-cache-bullseye miss, traffic-cache-bullseye hit/9","webrequest_source":"unknown"}
  - name: test missing host
    target_processors: transform_json_fields
    environment: {}
    input_batch:
      - json_content: {"accept":"*/*","accept_date":"23/May/2024:15:23:41.858","accept_language":"en","backend":"deployment-mediawiki12.deployment-prep.eqiad1.wikimedia.cloud","cache_status":"hit-remote","content_type":"text/html; charset=UTF-8","haproxy_pid":"12345","http_method":"GET","http_status":200,"ip":"127.0.0.1","range":"-","referer":"test.test","response_size":72124,"sequence":"-","termination_state":"LR","time_backend_response":"5","tls":"vers=TLSv1.3;keyx=UNKNOWN;auth=ECDSA;ciph=AES-256-GCM-SHA384;prot=;sess=new","uri_host":"","uri_path":"/wiki/Main_Page","uri_query":"?foo=bar","user_agent":"curl/7.74.0","x_analytics":"ns=0;page_id=1;rev_id=587739;proxy=OperaMini;https=1;client_port=58192;nocookies=1","x_cache":"traffic-cache-bullseye miss, traffic-cache-bullseye hit/9"}
    output_batches:
      - - json_contains: {"accept":"*/*","accept_language":"en","backend":"deployment-mediawiki12.deployment-prep.eqiad1.wikimedia.cloud","cache_status":"hit-remote","content_type":"text/html; charset=UTF-8","haproxy_pid":"12345","meta":{"domain":"","stream":"webrequest_frontend"},"dt":"2024-05-23T15:23:41Z","http_method":"GET","http_status":200,"ip":"127.0.0.1","range":"-","referer":"test.test","response_size":72124,"sequence":"-","$schema":"/webrequest/1.0.0","time_firstbyte":0.005,"tls":"vers=TLSv1.3;keyx=UNKNOWN;auth=ECDSA;ciph=AES-256-GCM-SHA384;prot=;sess=new","uri_host":"","uri_path":"/wiki/Main_Page","uri_query":"?foo=bar","user_agent":"curl/7.74.0","x_analytics":"ns=0;page_id=1;rev_id=587739;proxy=OperaMini;https=1;client_port=58192;nocookies=1","x_cache":"traffic-cache-bullseye miss, traffic-cache-bullseye hit/9","webrequest_source":"unknown"}
