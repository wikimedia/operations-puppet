<%-
# All labels / targets list
static_configs = []

# Find all hosts in the current site, grouped by cluster
@site_clusters.each { |cluster, hosts_by_site|

  hosts_in_site_cluster = hosts_by_site[@site]
  hosts_with_jmx_exporters = hosts_in_site_cluster.select { |host| @resources.include?(host) }
  
  hosts_with_jmx_exporters.each { |host|
    # Group every jmx_exporter_instance by labels.  This allows us to declare
    # fewer static_config sections, grouping all jmx_exporter_targets by common labels.
    #
    # Labels are applied at several levels here:
    # - @labels from the declared prometheus::jmx_exporter_config (on the prometheus server).
    # - Add a 'cluster' label for this 'cluster' name.  This usually comes from role hiera config.
    # - Finally any jmx exporter instance specific labels declared on the
    #   prometheus::jmx_exporter_instance class.


    # Get a hash of common { labels => [targets] }, e.g.
    #   {
    #     {l1: A, l2: B} => [h1:8000, h2:8001],
    #     {'l1': C'}      => [h3:8000],
    #     ...
    #   }

    # 1. Group the jmx_exporter_instances by common labels.
    # 2. Collect the grouped instances into a hostname:port jmx exporter target
    #    (return tuples of key, val so we can convert back to hash).
    # 3. Convert the list of tuples back toÂ a hash.
    static_configs_by_labels = @resources.values
      .group_by { |instance| instance['parameters'].fetch('labels', {}) }
      .map { |labels, instances| 
        [lables, instances.map { |instance| "#{instance['parameters']['hostname']}:#{instance['parameters']['port']}" }]
      }
      .to_h

    # 4. Append common label targets to the static_configs
    targets_by_common_labels.each { |labels, targets|
      static_configs.push({
        'targets' => targets,
        # Merge jmx exporter job labels, the cluster label,
        # and jmx exporter instance labels for this target
        'labels'  => @labels.merge('cluster' => cluster).merge(labels),
      })
    }
  }
}
-%>
# This file is managed by puppet
<%= scope.function_ordered_yaml([static_configs]) %>
