#!/usr/bin/python
# Drain an oslo.message rabbitmq queue
#
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 (the 'License'); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an 'AS IS'
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is RabbitMQ Management Plugin.
#
# The Initial Developer of the Original Code is GoPivotal, Inc.
# Copyright (c) 2010-2015 Pivotal Software, Inc.  All rights reserved.
#
# Modified by Bryan Davis <bd808@wikimedia.org>
# Copyright (c) 2017 Wikimedia Foundation and contributors
from __future__ import print_function

import argparse
import base64
import httplib
import json
import socket
import sys
import urlparse


def die(s):
    print('*** {}'.format(s), file=sys.stderr)
    exit(1)


def http(verb, path, body=None):
    path = '/api%s' % path
    conn = httplib.HTTPConnection('localhost', 15672)
    headers = {
        'Authorization': 'Basic ' + base64.b64encode('guest:guest'),
    }
    if body:
        headers['Content-Type'] = 'application/json'
    try:
        conn.request(verb, path, body, headers)
    except socket.error as e:
        die('Could not connect: {0}'.format(e))
    resp = conn.getresponse()
    if resp.status == 400:
        die(json.loads(resp.read())['reason'])
    if resp.status == 401:
        die('Access refused: {0}'.format(path))
    if resp.status == 404:
        die('Not found: {0}'.format(path))
    if resp.status == 301:
        url = urlparse.urlparse(resp.getheader('location'))
        [host, port] = url.netloc.split(':')
        return post(url.path + '?' + url.query, body)
    if resp.status < 200 or resp.status > 400:
        raise Exception('Received %d %s for path %s\n%s'
                        % (resp.status, resp.reason, path, resp.read()))
    return json.loads(resp.read().decode('utf-8'))

def main():
    parser = argparse.ArgumentParser(
        description='Drain an oslo.message rabbitmq queue')
    parser.add_argument(
        '--dry-run', dest='requeue', action='store_true',
        help='return messages to the queue after printing')
    parser.add_argument(
        '--silent', dest='print', action='store_false',
        help='silent mode')
    parser.add_argument(
        'queue', metavar='QUEUE', nargs=1,
        help='queue to read messages from')
    args = parser.parse_args()

    info = http('GET', '/queues/%2F/{}'.format(args.queue[0]))

    res = http(
        'POST',
        '/queues/%2F/{}/get'.format(args.queue[0]),
        json.dumps({
            'count': info['messages_ready'],
            'requeue': args.requeue,
            'encoding': 'auto'
        })
    )

    if args.print:
        for r in res:
            payload = json.loads(r['payload'])
            msg = json.loads(payload['oslo.message'])
            print(json.dumps(msg))

if __name__ == '__main__':
    main()
