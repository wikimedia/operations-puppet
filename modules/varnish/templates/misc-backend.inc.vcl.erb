include "misc-common.inc.vcl";

sub cluster_be_recv_pre_purge { }

sub cluster_be_recv_applayer_backend {
<%
    if_stmts = []
    @vcl_config['req_handling'].keys.sort.each do |reqhost|
        if reqhost =~ /^[-.A-Za-z0-9]+$/
            hostop = '=='
        else
            hostop = '~'
        end
        hostcmp = %Q[req.http.Host #{hostop} "#{reqhost}"]
        dirname = @vcl_config['req_handling'][reqhost]['director']
        action = "set req.backend_hint = #{dirname}.backend();\n"
        if_stmts.push("if (#{hostcmp}) {\n        #{action}    }")
    end
    all_ifs = if_stmts.join(' els')
%>
    <%= all_ifs -%> else {
        return (synth(404, "Domain not served here"));
    }
}

sub cluster_be_recv {
    call misc_recv_pass;
}

sub cluster_be_hash { }
sub cluster_be_hit { }
sub cluster_be_miss { }
sub cluster_be_pass { }
sub cluster_be_backend_fetch { }
sub cluster_be_backend_response_early { }

sub cluster_be_backend_response {
    // Do not cache explicit lengths >= ~1GB in backends in general
    if (beresp.http.Content-Length ~ "^[0-9]{10}") {
	set beresp.http.X-CDIS = "pass";
        set beresp.uncacheable = true;
        return (deliver);
    }

<% if @cache_route == 'direct' or @varnish_testing -%>
    // Direct backend caches:
    // Disable streaming if no Content-Length present.  This is the default in
    // varnish3, but in varnish4 this should convert them to responses
    // containing a Content-Length in the common case, so that upper caches
    // can make size-based decisions.
    if (!beresp.http.Content-Length) {
        set beresp.do_stream = false;
    }
<% end -%>
}

sub cluster_be_deliver { }
