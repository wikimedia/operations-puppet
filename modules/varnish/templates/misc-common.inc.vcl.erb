sub misc_recv_pass {
<%
    def uc_action(uc)
        if uc == "pass"
            return "return (pass);"
        elsif uc == "pipe"
            return "return (pipe);"
        elsif uc == "websockets"
            return %Q[if (req.http.upgrade ~ "(?i)websocket") { return (pipe); } else { return (pass); }]
        elsif uc == "normal"
            return ""
        else
            #throw error XXX
        end
    end

    caching = []
    caching_default = false
    @vcl_config['req_handling'].keys.sort.each do |reqhost|
        if reqhost == 'default'
            host_cmp = %Q[e] # "else" when join(' els') applied later
        elsif reqhost =~ /^[-.A-Za-z0-9]+$/
            host_cmp = %Q[if (req.http.host == "#{reqhost}")]
        else
            host_cmp = %Q[if (req.http.host ~ "#{reqhost}")]
        end

        need_host = false
        host_action = false
        options = @vcl_config['req_handling'][reqhost]
        if options.has_key?('caching')
            host_action = uc_action(options['caching'])
            need_host = true
        end

        if options.has_key?('subpaths')
            path_ifs = []
            options['subpaths'].keys.sort.each do |subpath|
                path_options = options['subpaths'][subpath]
                path_cmp = %Q[if (req.url ~ "#{subpath}")]
                if path_options.has_key?('caching')
                    need_host = true
                    path_action = uc_action(path_options['caching'])
                    path_ifs.push(%Q[#{path_cmp} {\n             #{path_action}\n        }])
                else
                    path_ifs.push(%Q[#{path_cmp} { }])
                end
            end
            if host_action
                path_ifs.push(%Q[e { #{host_action} }])
            end
            if need_host
                host_action = path_ifs.join(' els')
            end
        end

        if need_host
            if reqhost == 'default'
                caching_default = %Q[#{host_cmp} { #{host_action} }]
            else
                caching.push(%Q[#{host_cmp} { #{host_action} }])
            end
        end
    end

    if caching_default
        caching.push(caching_default)
    end
    caching_vcl = caching.join("\n    ");
%>
    <%= caching_vcl %>

    if (req.method != "GET" && req.method != "HEAD") {
        // We only deal with GET and HEAD
        return (pass);
    }

    // don't cache authorized requests
    if (req.http.Authorization) {
        return (pass);
    }

    // don't cache cookie requests, but ignore google analytics cookies and our
    // own global WMF-Last-Access, GeoIP, and CP cookies.
    set req.http.NC-Cookie = regsuball(req.http.Cookie, "(?i)(^|;\s*)(_ga[-_a-z]*|_utm[-_a-z]*|WMF-Last-Access|GeoIP|CP)=[^;]*", "");
    set req.http.NC-Cookie = regsub(req.http.NC-Cookie, "^;?\s*", "");
    if (req.http.NC-Cookie != "") {
        unset req.http.NC-Cookie;
        return (pass);
    }
    unset req.http.NC-Cookie;
}
