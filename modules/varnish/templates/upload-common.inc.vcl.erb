// common to upload front+backend VCL

include "normalize_path.inc.vcl";

/******************************************************************************
 * upload.wikimedia.org:
 * MW seems to use PHP's rawurlencode() directly when translating from
 * MediaWiki File titles to storage URLs, without additional exceptions.
 * Therefore, all 16 characters from the Customizable Set are all changed to
 * zero-values here (force-encode) to obtain complete normalization:
 *****************************************************************************/

sub normalize_upload_path { C{
    static const size_t upload_decoder_ring[256] = {
      // 0x00-0x1F (all unprintable)
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
      //  ! " # $ % & ' ( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 : ; < = > ?
        0,0,0,2,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,2,
      //@ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \ ] ^ _
        0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,
      //` a b c d e f g h i j k l m n o p q r s t u v w x y z { | } ~ <DEL>
        0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,0,
      // 0x80-0xFF (all unprintable)
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
    };

    normalize_url(ctx, upload_decoder_ring);
}C }

sub upload_normalize_path {
	if (req.http.host ~ "^upload\.wikimedia\.org$") {
		call normalize_upload_path;
	}
}

sub upload_common_recv {
	unset req.http.X-Range;

	if (req.http.host != "<%= @vcl_config.fetch('upload_domain') %>"
	    && req.http.host != "<%= @vcl_config.fetch('maps_domain') %>") {
		return (synth(404, "Requested domainname does not exist on this server"));
	}

	if (req.http.Range) {
		set req.hash_ignore_busy = true;
	}
}

sub upload_common_hit {
	if (req.http.If-Cached && req.http.If-Cached != obj.http.Etag) {
		return (synth(412, "Etag mismatch"));
	}
}

sub upload_common_miss {
    // Convert range requests into pass
    if (req.http.Range) {
        call upload_common_set_xrange;
        return (pass);
    }
}

sub upload_common_deliver {
	if (resp.http.X-Content-Range) {
		set resp.http.Content-Range = resp.http.X-Content-Range;
		unset resp.http.X-Content-Range;
	}
}

sub upload_common_backend_response {
	// Debugging T144257. Don't cache 200 responses with CL:0.
	if (beresp.http.Content-Length == "0" && beresp.status == 200) {
		<%- if @varnish_version == 5 -%>
		// HFM
		set beresp.ttl = 10m;
		<%- else -%>
		set beresp.ttl = 0s;
		<%- end -%>
		set beresp.grace = 0s;
		set beresp.keep = 0s;
		set beresp.uncacheable = true;
	}
}

// Varnish strips the Range header before copying req into bereq. Save it into
// a header and restore it in upload_common_set_range
sub upload_common_set_xrange {
	if (req.http.Range) {
		set req.http.X-Range = req.http.Range;
	}
}

sub upload_common_set_range {
	if (bereq.http.X-Range) {
		set bereq.http.Range = bereq.http.X-Range;
		unset bereq.http.X-Range;
	}
}
