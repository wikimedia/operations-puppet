// Varnish VCL include file for upload backends
include "upload-common.inc.vcl";

sub pick_stevedore {
	// Select a storage size class/bin
        // See T145661 for storage binning rationale
	if (beresp.http.Content-Length !~ "^[0-9]+$") { // even possible on upload?
		set beresp.storage_hint = "bin1";
	}
	elsif (std.integer(beresp.http.Content-Length, 0) < 1024 * 16) { // 16KB
		set beresp.storage_hint = "bin0";
	}
	elsif (std.integer(beresp.http.Content-Length, 0) < 1024 * 16 * 16) { // 256KB
		set beresp.storage_hint = "bin1";
	}
	elsif (std.integer(beresp.http.Content-Length, 0) < 1024 * 16 * 16 * 16) { // 4MB
		set beresp.storage_hint = "bin2";
	}
	elsif (std.integer(beresp.http.Content-Length, 0) < 1024 * 16 * 16 * 16 * 16) { // 64MB
		set beresp.storage_hint = "bin3";
	}
	else { // >= 64MB
		set beresp.storage_hint = "bin4";
		if (std.integer(beresp.http.Content-Length, 0) >= 1024 * 16 * 16 * 16 * 16 * 16) { // 1GB
			set beresp.uncacheable = true;
		}
	}
}

sub cluster_be_recv_pre_purge { }

sub cluster_be_recv_applayer_backend {
	if (req.url ~ "^/+[^/]+/[^/]+/thumb/") {
		set req.backend_hint = swift_thumbs.backend();
	} else {
		set req.backend_hint = swift.backend();
	}
}

sub cluster_be_recv {
	call upload_common_recv;
}

sub cluster_be_hash { }

sub cluster_be_hit {
	call upload_common_hit;
}

sub cluster_be_miss {
	call upload_common_miss;

	if (req.http.If-Cached) {
		return (synth(412, "Entity not in cache"));
	}
}

sub cluster_be_pass { }

sub cluster_be_backend_fetch {
	call upload_common_set_range;
}

sub cluster_be_backend_response_early { }

sub cluster_be_backend_response {
	call pick_stevedore;
	
	if (beresp.http.Content-Range) {
		// Varnish itself doesn't ask for ranges, so this must have been
		// a passed range request
		set beresp.http.X-Content-Range = beresp.http.Content-Range;
	}

	// Derive the corresponding original URL and store it with the object
	if (!beresp.http.X-MediaWiki-Original && bereq.url ~ "^/+[^/]+/[^/]+/thumb/[^/]+/[^/]+/[^/]+/[0-9]+px-") {
		set beresp.http.X-MediaWiki-Original = regsub(bereq.url, "^(/+[^/]+/[^/]+/)thumb/([^/]+/[^/]+/[^/]+).*$", "\1\2");
	}

	call upload_common_backend_response;
	return (deliver);
}

sub cluster_be_deliver {
	call upload_common_deliver;
}
