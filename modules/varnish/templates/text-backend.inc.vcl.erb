// Varnish VCL include file for text backends

include "text-common.inc.vcl";

sub cluster_be_recv_pre_purge {
	if (req.method == "PURGE") {
		call text_normalize_path;
	}
}

sub cluster_be_recv_applayer_backend {
	if (req.http.Host == "cxserver.wikimedia.org" ) { # LEGACY: to be removed eventually
		set req.backend_hint = cxserver_backend.backend();
	} else if (req.http.Host == "citoid.wikimedia.org" ) { # LEGACY: to be removed eventually
		set req.backend_hint = citoid_backend.backend();
	} else { // default for all other hostnames
		if (req.url ~ "^/api/rest_v1/") {
			set req.backend_hint = restbase_backend.backend();
		} else if (req.url ~ "^/w/api\.php") {
			set req.backend_hint = api.backend();
			set req.http.X-Backend-is-Mediawiki = 1;
		} else if (req.url ~ "^/w/thumb(_handler)?\.php") {
			set req.backend_hint = rendering.backend();
			set req.http.X-Backend-is-Mediawiki = 1;
		} else {
			set req.backend_hint = appservers.backend();
			set req.http.X-Backend-is-Mediawiki = 1;
		}
	}

	if (req.http.X-Wikimedia-Debug && req.http.X-Backend-is-Mediawiki) {
		set req.backend_hint = appservers_debug.backend();
		unset req.http.X-Backend-is-Mediawiki;
	}

<% if @realm != "production" %>
	if (req.http.X-Wikimedia-Security-Audit == "1") {
		set req.backend_hint = security_audit.backend();
	}
<% end %>
}

sub cluster_be_recv {
	call text_common_recv;
}

sub cluster_be_hash {
	call text_common_hash;
}

<% if @cache_route == 'direct' -%>
sub misspass_mangle {
	// Mobile hostname mangling for MediaWiki
	if (bereq.http.X-Subdomain) {
		set bereq.http.host = bereq.http.x-dt-host;
	}

	// RB request mangling
	if (bereq.url ~ "^/api/rest_v1/") {
		set bereq.url = "/" + bereq.http.host + regsub(bereq.url, "^/api/rest_v1/", "/v1/");
	}

	// Redirect url shortener w.wiki urls to meta (T133485)
	if (bereq.http.host == "<%= @vcl_config.fetch('shortener_domain') %>" && bereq.url != "/") {
		set bereq.http.host = "meta.wikimedia.<%= @vcl_config.fetch('top_domain') %>";
		set bereq.url = "/wiki/Special:UrlRedirector" + bereq.url;
	}
}
<% else -%>
sub misspass_mangle { }
<% end -%>

sub cluster_be_hit { }

sub cluster_be_miss {
}

sub cluster_be_pass {
}

sub cluster_be_backend_fetch {
	call misspass_mangle;
	call text_common_misspass_restore_cookie;
}

sub cluster_be_backend_response_early {
	call text_common_backend_response_early;
}

sub cluster_be_backend_response {
	// Make sure Set-Cookie responses are not cacheable, and log violations
	// FIXME: exceptions are ugly; maybe get rid of the whole thing?
	if (beresp.ttl > 0s && beresp.http.Set-Cookie &&
		bereq.url !~ "^/wiki/Special:HideBanners") {
		std.log("Cacheable object with Set-Cookie found. bereq.url: " + bereq.url + " Cache-Control: " + beresp.http.Cache-Control + " Set-Cookie: " + beresp.http.Set-Cookie);
		set beresp.http.Cache-Control = "private, max-age=0, s-maxage=0";
		set beresp.ttl = 0s;
		set beresp.http.X-CDIS = "pass";
		set beresp.uncacheable = true;
		return (deliver);
	}

	// FIXME: Fix up missing Vary headers on Apache redirects
	if ((beresp.status == 301 || beresp.status == 302)
		&& beresp.http.Location ~ "^http"
		&& beresp.http.Vary !~ "X-Forwarded-Proto") {
		if (beresp.http.Vary) {
			set beresp.http.Vary = beresp.http.Vary + ",X-Forwarded-Proto";
		} else {
			set beresp.http.Vary = "X-Forwarded-Proto";
		}
	}

	call text_common_backend_response;

	return (deliver);
}

sub cluster_be_deliver { }
