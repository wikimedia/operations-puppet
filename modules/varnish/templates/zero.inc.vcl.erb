// Varnish VCL include file for Wikipedia Zero

sub tag_carrier_cleanup {
    unset req.http.X-Forwarded-By;
    unset req.http.X-CS;
    unset req.http.X-CS2;
}

sub tag_carrier {
    // clear the 3 headers we may set in tag_carrier, nobody else should be
    // setting them...
    call tag_carrier_cleanup;

    // X-C, X-C-M, and X-T-P are set up in the common wikimedia.vcl now from
    // netmapper data, and are the source for these Zero headers
    if (req.http.X-Carrier) {
        if (req.http.X-Carrier-Meta) {
            set req.http.X-CS2 = req.http.X-Carrier + "|" + req.http.X-Carrier-Meta;
        } else {
            set req.http.X-CS2 = req.http.X-Carrier;
        }

        // X-F-B is only set if X-C is set.  Old comments on this:
        // Current backend & cache vary on X-Forwarded-By, so in order not to fragment cache,
        // unset X-Forwarded-By [if no carrier match]. the backend now checks
        // this value. Soon we will stop varying on it.
        if (req.http.X-Trusted-Proxy) {
            set req.http.X-Forwarded-By = req.http.X-Trusted-Proxy;
        }

        // X-CS needs the real data only for "special" pages we vary on, and
        // can just be "ON" for normal wikitext fetches and such
        //
        // TBD: Beware of legit links happening to have :ZeroRatedMobileAccess
        if (req.url ~ "(action=zeroconfig|:ZeroRatedMobileAccess)($|&|\?)" || req.http.host ~ "^(zero|m)\.") {
            set req.http.X-CS = req.http.X-CS2;
        } else {
            set req.http.X-CS = "ON";
        }
    }
}

sub zero_deliver {
    // Regardless of X-CS transform to "ON" for Vary and/or server-side
    // purposes, if a carrier was detected at all, set X-CS as an outbound
    // response header for the application to consume.
    if (req.http.X-CS2) {
        set resp.http.X-CS = req.http.X-CS2;
    }
}
