# Varnish VCL include file for upload frontends

sub vcl_recv {
	call vcl_recv_purge;

	if (req.request != "GET" && req.request != "HEAD") {
		/* We only deal with GET, HEAD at this point */
		error 403 "HTTP method not allowed.";
	}

	if ( req.http.host == "upload.wikimedia.org") {
		# Replace double slashes
		set req.url = regsuball(req.url, "/{2,}", "/");
		return (lookup);
	} else {
		error 403 "Requested target domain not allowed.";
	}
}

sub vcl_hit {
	if (req.http.If-Cached && req.http.If-Cached != obj.http.Etag) {
		error 412 "Etag mismatch";
	}
}

sub vcl_miss {
	/* Convert range requests into pass */
	if (req.http.Range) {
		set bereq.http.Range = req.http.Range;
		return (pass);
	}

	/* Make sure If-Cached requests won't pollute the cache */
	if (req.http.If-Cached) {
		return (pass);
	}
}

sub vcl_fetch {
	# Cache media objects for 1 hour by default
	set beresp.ttl = 1h;

	if (beresp.http.Content-Range) {
		/* Varnish itself doesn't ask for ranges, so this must have been
		 * a passed range request
		 */
		set beresp.http.X-Content-Range = beresp.http.Content-Range;

		if (beresp.http.Content-Range ~ "\/[0-9]{8,}$") {
			set beresp.do_stream = true;
			/* don't attempt to cache these in the frontend */
			return (hit_for_pass);
		}
	}

	# Stream large objects, >= 1 or 32 MB
<% stream_threshold = vcl_config.fetch("cluster_tier", "1") == "1" ? 33554432 : 1048576 -%>
	if (std.integer(beresp.http.Content-Length, 33554432) >= <%= stream_threshold %>) {
		set beresp.do_stream = true;
		if (std.integer(beresp.http.Content-Length, 33554432) >= 33554432) {
			/* don't attempt to cache these in the frontend */
			return (hit_for_pass);
		}
	}
}

sub vcl_deliver {
	if (resp.http.X-Content-Range) {
		set resp.http.Content-Range = resp.http.X-Content-Range;
		remove resp.http.X-Content-Range;
	}

	set resp.http.Access-Control-Allow-Origin = "*";
}
