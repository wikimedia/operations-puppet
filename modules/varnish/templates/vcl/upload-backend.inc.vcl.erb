# Varnish VCL include file for upload backends

sub pick_main_stevedore {
	if (std.random(0, 2) < 1) {
		set beresp.storage = "main-sda3";
	} else {
		set beresp.storage = "main-sdb3";
	}
}

sub pick_large_object_stevedore {
	if (std.random(0, 2) < 1) {
		set beresp.storage = "bigobj-sda3";
	} else {
		set beresp.storage = "bigobj-sdb3";
	}
}

<% if vcl_config.fetch("cluster_tier", "1") == "1" -%>
sub radosgw_rewrite {
	if (req.restarts == 0) {
		if (req.url ~ "^/[^/]+/[^/]+/((transcoded|thumb|temp)/)?((temp|archive)/)?[0-9a-f]/[0-9a-f]{2}(/.+)?$") {
			if (req.url ~ "^/wikipedia/(commons|de|en|fi|fr|he|hu|id|it|ja|ro|ru|th|tr|uk|zh)/") {
				set bereq.url = regsub(
					req.url,
					"^/([^/]+)/([^/]+)/((transcoded|thumb|temp)/)?(((temp|archive)/)?([0-9a-f])/([0-9a-f]{2})(/.+)?)$",
					"/swift/v1/\1-\2-local-\3.\9/\5");
			} else {
				set bereq.url = regsub(
					req.url,
					"^/([^/]+)/([^/]+)/((transcoded|thumb|temp)/)?(((temp|archive)/)?([0-9a-f])/([0-9a-f]{2})(/.+)?)$",
					"/swift/v1/\1-\2-local-\3/\5");
			}
			set bereq.url = regsub(
				bereq.url,
				"^(/swift/v1/[^/]+-[^/]+-local)-\.",
				"\1-public.");
		}
		elsif (req.url ~ "^/[^/]+/[^/]+/timeline/.+$") {
			set bereq.url = regsub(
				req.url,
				"^/([^/]+)/([^/]+)/(timeline)/(.+)$",
				"/swift/v1/\1-\2-\3-render/\4");
		}
		elsif (req.url ~ "^(/[^/]+/[^/]+)?/math/[0-9a-f]/[0-9a-f]/.+$") {
			set bereq.url = regsub(
				req.url,
				"^(/[^/]+/[^/]+)?/(math)/(([0-9a-f])/([0-9a-f])/.+)$",
				"/swift/v1/global-data-\2-render.\4\5/\3");
		}
		elsif (req.url ~ "^/score/.+$") {
			set bereq.url = regsub(
				req.url,
				"^/(score)/(.+)$",
				"/swift/v1/global-data-\1-render/\2");
		}
		
		if (bereq.url ~ "^/swift/v1/") {
			set bereq.http.host = "ms-fe.eqiad.wmnet";
		}
	}
	else {
		if (req.backend == rendering && req.url ~ "^/[^-/]+/[^/]+/thumb/(.+)$") {
			set bereq.url = regsub(req.url, "^/[^-/]+/[^/]+/thumb/(.+)$", "/w/thumb_handler.php/\1");
			set bereq.http.host = regsub(req.url, "^/([^-/]+)/([^/]+)/thumb/.+$", "\2.\1.org");
			set bereq.http.X-Original-URI = req.url;

			# Exceptions
			set bereq.http.host = regsub(bereq.http.host, "^(meta|commons|internal|grants)\.wikipedia\.org$", "\1.wikimedia.org");
			set bereq.http.host = regsub(bereq.http.host, "^mediawiki\..+$", "www.mediawiki.org");
			set bereq.http.host = regsub(bereq.http.host, "^sources\.wikipedia\.org$", "wikisource.org");
		}
	}
}

sub check_thumb_404 {
	if (beresp.status == 404 && bereq.url ~ "^/swift/v1/[^-/]+-[^-/]+-local-thumb") {
		set req.backend = rendering;
		return (restart);
	}
}

<% end -%>
sub vcl_recv {
	call vcl_recv_purge;
	call restrict_access;

	if ( req.http.host != "upload.wikimedia.org") {
		error 403 "Requested target domain not allowed.";
	}

	/* Make sure high range requests don't block on large objects being retrieved */
	if (req.http.Range
		&& (std.integer(regsub(req.http.Range, "^bytes=([0-9]*)-", "\1"), 0) > 33554432
			|| req.http.Range ~ "^bytes=([0-9]{9,})-")) {
		set req.hash_ignore_busy = true;
	}

	return (lookup);
}

sub vcl_fetch {
	# Cache media objects for 30 days by default
	if (beresp.status <= 400) {
		set beresp.ttl = 30d;
	}

	# Stream large objects, >= 1 MB
	if (std.integer(beresp.http.Content-Length, 1048576) >= 1048576) {
		set beresp.do_stream = true;
	}

	/* Select a random big object storage backend for objects >= 100 MB */
	if (beresp.http.Content-Length ~ "^[0-9]{9}") {
		call pick_large_object_stevedore;
	} else {
		call pick_main_stevedore;
	}
	
	if (beresp.http.Content-Range) {
		/* Varnish itself doesn't ask for ranges, so this must have been
		 * a passed range request
		 */
		set beresp.http.X-Content-Range = beresp.http.Content-Range;
	}
}

sub vcl_hit {
	if (req.http.If-Cached && req.http.If-Cached != obj.http.Etag) {
		error 412 "Etag mismatch";
	}
}

sub vcl_miss {
	/* Convert range requests into pass when over a certain threshold */
	if (req.http.Range
		&& (std.integer(regsub(req.http.Range, "^bytes=([0-9]*)-", "\1"), 0) > 33554432
			|| req.http.Range ~ "^bytes=([0-9]{9,})-")) {
		set bereq.http.Range = req.http.Range;
		std.log("Passing high range request: " + req.http.Range);
		return (pass);
	}

	if (req.http.If-Cached) {
		error 412 "Entity not in cache";
	}
}

sub vcl_deliver {
	if (resp.http.X-Content-Range) {
		set resp.http.Content-Range = resp.http.X-Content-Range;
		remove resp.http.X-Content-Range;
	}
}
