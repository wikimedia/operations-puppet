# This file is managed by Puppet!
// layer-common code for all clusters

import std;

# this is needed by geoip.inc.vcl and zero.inc.vcl, and in general is the only
#   way to sanely do Set-Cookie in the face of multiple independent cookies
#   being set from different code.
import header;

<% if @varnish_version4 -%>
import directors;

# This is actually only needed if a vslp backend is defined. We could make
# this import conditional on existing vslp backend definitions.
import vslp;
<% end %>

<%
def error_synth(status_code, message)
        if @varnish_version4
                return "return (synth(#{status_code}, \"#{message}\"));\n"
        else
                return "error #{status_code} \"#{message}\";\n"
        end
end
-%>

include "errorpage.inc.vcl";

<%
# Calculates number of director-level retries necessary for chash to hit all
# "n" backends with probability percentage "p", given they're randomly-mixed
# into an array considerably larger in size than "n".  This is an
# overestimation in that it assumes an infinite array, but the values still
# come out reasonably small compared to doing anything based on our actual
# weight*num_backends.
# Blame _joe_ for the math! :)
def chash_def_retries(p, n)
	x = n - 1
	if (x <= 0)
		return n
	end
	return ((Math.log10(100 - p) - 2) / (Math.log10(x) - Math.log10(n))).ceil
end
-%>

# ACLs

acl local_host {
	"127.0.0.1";
	"<%= @ipaddress %>"; // note this matches nginx proxy_pass for TLS
}

// external trusted proxies aren't allowed to set XCIP (via XFF) to wikimedia_nets
acl wikimedia_nets {
<% scope.lookupvar('::network::constants::all_networks_lo').each do |entry|
	subnet, mask = entry.split("/", 2)
-%>
	"<%= subnet %>"/<%= mask %>;
<% end -%>
}

// This is currently used in 2 places:
// 1) frontends: only wikimedia_trust can fake X-F-P
// 2) backends: port 3128 can only connect from wikimedia_trust
acl wikimedia_trust {
<% scope.lookupvar('::network::constants::all_networks_lo').each do |entry|
	subnet, mask = entry.split("/", 2)
-%>
	"<%= subnet %>"/<%= mask %>;
<% end -%>
<% if @realm == "production" -%>
	! "10.68.0.0/16"; # temporary hack, do not treat labs like production
<% end -%>
}

# Backend probes

# frontends in front of other varnish instances should send
# probes that don't depend on the app backend
probe varnish {
	.request =
		"GET /check HTTP/1.1"
		"Host: varnishcheck"
		"User-agent: Varnish backend check"
		"Connection: close";
	.timeout = 500ms;
	.interval = 100ms;
	.window = 3;
	.threshold = 2;
}

probe logstash {
	.url = "/status";
	.interval = 5s;
	.timeout = 1s;
	.window = 5;
	.threshold = 3;
}

probe wdqs {
	.url = "/";
	.interval = 5s;
	.timeout = 1s;
	.window = 5;
	.threshold = 3;
}

<%
# Directors / Backends

# Expected directors data format:
# @varnish_directors = {
#     'director name' => {
#         'dynamic'  => 'yes', # or 'no', required
#         'type'     => 'chash', # required
#         'dc'       => 'eqiad', # required if dynamic==yes
#         'service'  => 'foo',   # required if dynamic==yes
#         'backends' => [ "backend1", "backend2" ], # required: array or single value
#         'be_opts'  => { # every option but 'probe' and 'between_bytes_timeout' is required!
#             'port' = 80,
#             'connect_timeout' = '2s',
#             'first_byte_timeout' = '4s',
#             'between_bytes_timeout' = '4s',
#             'max_connections' = 100, # per-backend!
#         },
#     },
# }
#
# Note that backend hosts defined by more than one director will take their
# options from the first director to define them!  We could fix this by putting
# the director name into the backend host's "backend" name as well, but so far
# we have no cases where this is necessary! (whereas we do have cases of
# duplicate backend hosts where the options are always identical, for
# chashed-vs-random cache backends)
#

# Puppet-generated the Backend host definitions, regardless of 'dynamic'

be_seen = {}
@varnish_directors.keys.sort.each do |director_name|
	director = @varnish_directors[director_name]
	be_opts	= director['be_opts']
	[*director['backends']].each do |backend|
		next if be_seen.key?(backend)
		be_seen[backend] = 1
		name = /^[0-9\.]+$/.match(backend) ? "ipv4_" + backend.gsub(".", "_") : "be_" + backend.split(".")[0].gsub("-", "_")
-%>

<% if not @varnish_testing -%>
backend <%= name %> {
	.host = "<%= backend %>";
	.port = "<%= be_opts['port'] %>";
	.connect_timeout = <%= be_opts['connect_timeout'] %>;
	.first_byte_timeout = <%= be_opts['first_byte_timeout'] %>;
<% if be_opts.key?('between_bytes_timeout') -%>
	.between_bytes_timeout = <%= be_opts['between_bytes_timeout'] %>;
<% end -%>
	.max_connections = <%= be_opts['max_connections'] %>;
<% if be_opts.key?('probe') -%>
	.probe = <%= be_opts['probe'] %>;
<% end -%>
}
<% end -%>

<% end # backend loop -%>
<% end # director loop -%>

<%
if @use_dynamic_directors and @dynamic_directors and not @varnish_version4 -%>
include "directors.<%= @inst %>.vcl";
<% end -%>

sub wm_common_directors_init {
<% if not @varnish_version4 -%>
}
<% elsif @use_dynamic_directors and @dynamic_directors -%>
include "directors.<%= @inst %>.vcl";
<% end -%>

<% @varnish_directors.keys.sort.each do |director_name|
director = @varnish_directors[director_name]
if (!@dynamic_directors or director['dynamic'] != 'yes')
	backends = [*director['backends']]
	if (!backends.empty?)
-%>
<% if @varnish_version4 -%>
<% if director['type'] == 'vslp' -%>
// Yes, the vslp director gets instantiated with vslp.vslp() instead of
// directors.vslp(). Nobody said this would have been pretty.
new <%= director_name %> = vslp.<%= director['type'] %>();
<% else -%>
new <%= director_name %> = directors.<%= director['type'] %>();
<% end %>
<% else -%>
director <%= director_name %> <%= director['type'] %> {
<% end -%>
<% if director['type'] == 'chash' -%>
	.retries = <%= chash_def_retries(99, backends.size) %>;
<% end -%>
<%
	backends.each do |backend|
		name = /^[0-9\.]+$/.match(backend) ? "ipv4_" + backend.gsub(".", "_") : "be_" + backend.split(".")[0].gsub("-", "_")

		# Override backend name for test VCL files. This way we can use
		# "vtc_backend" as the backend name in our VTC tests.
		if @varnish_testing
			name = "vtc_backend";
		end
-%>
<%	if @varnish_version4 -%>
	<% if director['type'] == 'vslp' -%>
	# VSLP has no per-backend weighting. We might want to add it as a
	# functionality to the vmod.
	# See https://phabricator.wikimedia.org/T126206
	<%= director_name %>.add_backend(<%= name %>);
	<% else -%>
	<%= director_name %>.add_backend(<%= name %>, 100);
	<% end -%>
<%	else -%>
	{
		.backend = <%= name %>;
		.weight = 100;
	}
<%	end #varnish_version4 -%>
<% 	end #backends loop -%>
<%	if director['type'] == 'vslp' -%>
	# We should think about this value, probably setting it in a
	# backend-count-sensitive manner.
	<%= director_name %>.init_hashcircle(150);
<%	end -%>
<% if not @varnish_version4 # end of director block -%>
}
<% end -%>
<% end #if !empty -%>
<% end #if !dynamic -%>
<% end #director loop -%>
<% if @varnish_version4 -%>
} # end wm_common_directors_init
<% end -%>

# Functions

sub wm_common_recv_purge {
	/* Support HTTP PURGE */
	if (<%= @req_method %> == "PURGE") {
		if (client.ip !~ local_host) {
			<%= error_synth(405, "Method not allowed") -%>
		} elsif (req.http.Host ~ "<%= @vcl_config.fetch('purge_host_regex') %>") {
			set req.hash_ignore_busy = true;
			return (<%= @purge_lookup %>);
		} else {
			<%= error_synth(204, "Domain not cached here") -%>
		}
	}
}

<% if not @varnish_version4 -%>
sub wm_common_recv_set_xff {
	// XFF-appending is non-idempotent for restart purposes, should be in req.restarts == 0 block
	// All layers need to update XFF with client.ip hop-by-hop so that it
	// looks right to layers beneath, including the app layer
	if (req.http.X-Forwarded-For) {
		set req.http.X-Forwarded-For = req.http.X-Forwarded-For + ", " + client.ip;
	} else {
		set req.http.X-Forwarded-For = client.ip;
	}
}
<% end -%>

sub wm_common_recv_early {
	unset req.http.X-CDIS; // clear internal cache-disposition header

	// To pass this check, the method must be in allowed_methods (even OPTIONS must be there to be supported),
	// Additionally, if OPTIONS is allowed, it must be accompanied by Origin:
	if (<%= @req_method %> !~ "<%= @vcl_config.fetch("allowed_methods", "^(GET|HEAD|POST|OPTIONS|PURGE)$") %>"
		|| (<%= @req_method %> == "OPTIONS" && !req.http.Origin)) {
		<%= error_synth(405, "Method not allowed") -%>
	}

	if ( req.http.host ~ "^varnishcheck" ) {
		<%= error_synth(200, "OK") -%>
	}
}

sub wm_common_recv_grace {
<% if @varnish_version4 -%>
	if (std.healthy(req.backend_hint)) {
			# TODO: This is now handled in vcl_hit.
			# set req.grace = 5m;
	} else {
			# TODO: This is now handled in vcl_hit.
			# set req.grace = 60m;
	}
<% else -%>
	if (req.backend.healthy) {
		set req.grace = 5m;
	} else {
		set req.grace = 60m;
	}
<% end -%>
}

sub wm_common_hit {
<% if not @varnish_version4 -%>
	if (req.request == "PURGE") {
		purge;
		error 204 "Purged";
	} else {
		set req.http.X-CDIS = "hit";
	}
<% else -%>
	set req.http.X-CDIS = "hit";
<% end -%>
}

sub wm_common_miss {
<% if not @varnish_version4 -%>
	if (req.request == "PURGE") {
		purge;
		error 204 "Cache miss";
	} else {
		set req.http.X-CDIS = "miss";
	}
<% else -%>
	set req.http.X-CDIS = "miss";
<% end -%>
}

sub wm_common_pass {
	set req.http.X-CDIS = "pass";
}

sub wm_common_backend_response {
<% if @vcl_config.fetch("ttl_fixed", false) -%>
	// Fixed TTL (rare/questionable, only used on upload backend right now)
	// Note the ttl_cap comes after this and takes precedence!
	if (beresp.status <= 400) {
		set beresp.ttl = <%= @vcl_config.fetch("ttl_fixed", "invalid") %>;
	}
<% end -%>

	// Hard TTL cap on all fetched objects (default 7d)
	if (beresp.ttl > <%= @vcl_config.fetch("ttl_cap", "7d") %>) {
		set beresp.ttl = <%= @vcl_config.fetch("ttl_cap", "7d") %>;
	}

	/* Don't cache private, no-cache, no-store objects */
	if (beresp.http.Cache-Control ~ "(private|no-cache|no-store)") {
		set beresp.ttl = 0s;
		/* This should be translated into hit_for_pass later */
	}
	elsif (beresp.status >= 400 && beresp.status <= 499 && beresp.ttl > <%= @vcl_config.fetch("cache4xx", "5m") %>) {
		set beresp.ttl = <%= @vcl_config.fetch("cache4xx", "5m") %>;
	}

	set beresp.grace = 60m;

	// Compress compressible things if the backend didn't already
	if (beresp.http.content-type ~ "json|text|html|script|xml|icon|ms-fontobject|ms-opentype|x-font") {
		set beresp.do_gzip = true;
	}
}

// call just before wm_common_xcache_deliver, but only in vcl_deliver, not vcl_synth
sub wm_common_deliver_hitcount {
	if (<%= @req_method %> != "PURGE") {
		if(req.http.X-CDIS == "hit") {
			// obj.hits isn't known in vcl_hit, and not useful for other states
			set req.http.X-CDIS = "hit/" + obj.hits;
		}
	}
}

sub wm_common_xcache_deliver {
	if (<%= @req_method %> != "PURGE") {
		if (!req.http.X-CDIS) {
			// internally-generated response (not a cache object hit, and not a miss|pass to a deeper layer either)
			set req.http.X-CDIS = "int";
		}

		// X-Cache-Int gets appended-to as we traverse cache layers
		if (resp.http.X-Cache-Int) {
			set resp.http.X-Cache-Int = resp.http.X-Cache-Int + ", <%= @hostname %> " + req.http.X-CDIS;
		} else if (resp.http.X-Cache) { // XXX legacy, remove after these are gone from caches
			set resp.http.X-Cache-Int = resp.http.X-Cache + ", <%= @hostname %> " + req.http.X-CDIS;
			unset resp.http.X-Cache;
		} else {
			set resp.http.X-Cache-Int = "<%= @hostname %> " + req.http.X-CDIS;
		}
	}
}

// This is not needed with Varnish 4, the Connection header is set to
// keep-alive by default
<% if not @varnish_version4 -%>
sub wm_common_v3_purge_error {
	if (obj.status == 204 && req.request == "PURGE") {
		set obj.http.Connection = "keep-alive";
	}
}
<% end -%>
