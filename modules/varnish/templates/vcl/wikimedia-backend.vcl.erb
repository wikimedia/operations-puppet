vcl 4.0;

// common backend code for all clusters
include "<%= @varnish_include_path %>wikimedia-common_<%= @vcl %>.inc.vcl";

/* Include the VCL file for this role */
include "<%= @varnish_include_path %><%= @vcl %>.inc.vcl";

sub vcl_init {
	call wm_common_directors_init;
}

sub set_backend__ {
<%
    def set_director(dirname, debug_dir)
        indirect_act = "set req.backend_hint = cache_#{@cache_route}.backend(); set req.http.X-Next-Is-Cache = 1;"
        dirs = @app_directors[dirname]['backends']
        if dirs.empty?
            dir_act = "XXX no backends defined, return an error!"
        elsif dirs.key?(@site)
            dir_act = "set req.backend_hint = #{dirname}.backend();"
        else
            dir_act = indirect_act
        end
        if debug_dir.nil?
            return dir_act
        else
            debug_dirs = @app_directors[debug_dir]['backends']
            if debug_dirs.empty?
                debug_act = "XXX no backends defined, return an error!"
            elsif debug_dirs.key?(@site)
                debug_act = "set req.backend_hint = #{debug_dir}.backend();"
            else
                debug_act = indirect_act
            end
            return "if (req.http.X-Wikimedia-Debug) { #{debug_act} } else { #{dir_act} }"
        end
    end

    def_action = 'return (synth(404, "Domain not served here"));'
    if_stmts = []
    @vcl_config['req_handling'].keys.sort.each do |reqhost|
        options = @vcl_config['req_handling'][reqhost]
        host_action = set_director(options['director'], options['debug_director'])
        if options.has_key?('subpaths')
            path_ifs = []
            options['subpaths'].keys.sort.each do |subpath|
                path_action = set_director(options['subpaths'][subpath]['director'], options['subpaths'][subpath]['debug_director'])
                path_ifs.push(%Q[if (req.url ~ "#{subpath}") {\n            #{path_action}\n        }])
            end
            path_ifs.push(%Q[e {\n            #{host_action}\n        }])
            host_action = path_ifs.join(' els')
        end

        if reqhost == 'default'
            def_action = host_action
        else
            if reqhost =~ /^[-.A-Za-z0-9]+$/
                hostop = '=='
            else
                hostop = '~'
            end
            hostcmp = %Q[req.http.Host #{hostop} "#{reqhost}"]
            if_stmts.push("if (#{hostcmp}) {\n        #{host_action}\n    }")
        end
    end
    if_stmts.push("e {\n        #{def_action}\n    }")
    set_backend = if_stmts.join(' els')
%>
    <%= set_backend %>
}

sub vcl_recv {
	if (client.ip !~ wikimedia_trust) {
		// Do not allow direct access to non-frontend layers
		return (synth(403, "Access denied"));
	}

	// Used to signal to other logic whether this request jumps next to another cache or the applayer
	unset req.http.X-Next-Is-Cache;

	call wm_common_recv_early;

	// Backend loop detection: if a mistake is made in the code or config
	// for inter-cache routing, a request could loop infinitely between
	// backend caches without some sort of protection like
	// this.  The header may be re-used later for sideways
	// Only-If-Cached support as well.
	if (req.restarts == 0) {
		if (req.http.X-DCPath) {
			if (req.http.X-DCPath ~ "<%= @site %>") {
				return (synth(508, "Loop Detected"));
			}
			set req.http.X-DCPath = req.http.X-DCPath + ", <%= @site %>";
		} else {
			set req.http.X-DCPath = "<%= @site %>";
		}
	}

	call set_backend__;

	call cluster_be_recv_pre_purge;
	call wm_common_recv_purge;
	call cluster_be_recv;
	call wm_common_recv_pass;

	return (hash); // no default VCL
}

sub vcl_hash {
	call cluster_be_hash;
	// default vcl_hash invokes here!
}

// http://book.varnish-software.com/4.0/chapters/Cache_Invalidation.html
sub vcl_purge {
	return (synth(204, "Purged"));
}

sub vcl_hit {
	call wm_common_hit;
	call wm_common_hit_grace;
	call cluster_be_hit;
	// no default VCL. Expired ttl/grace behavior implemented in
	// wm_common_hit_grace.
	return (deliver);
}

sub vcl_miss {
	call wm_common_miss;
	call cluster_be_miss;
	return (fetch); // no default VCL (which is just "return (fetch)" anyways)
}

sub vcl_pass {
	call wm_common_pass;

<% if @vcl_config.fetch("pass_random", false) -%>
	if (req.http.X-Next-Is-Cache) {
		// pass-traffic should not use consistent hashing, to avoid unecessary
		// traffic focus on one node and keep things performant, *if* we're
		// fairly sure that all layers/tiers make equivalent pass decisions...
		set req.backend_hint = cache_<%= @cache_route %>_random.backend();
	}
<% end -%>

	call cluster_be_pass;
	return (fetch); // no default VCL (which is just "return (fetch)" anyways)
}

sub vcl_pipe {
	// for websockets over pipe
	if (req.http.upgrade) {
		set bereq.http.upgrade = req.http.upgrade;
	}
}

sub vcl_backend_fetch {
    call cluster_be_backend_fetch;
}

sub vcl_backend_response {
	call cluster_be_backend_response_early; // e.g. to fix up Vary-slotting in bereq
	call wm_common_backend_response;
	call cluster_be_backend_response;
	// default vcl_(fetch|backend_response) invokes here, unless cluster VCL unconditionally returns!
}

sub vcl_deliver {
	call wm_common_deliver_hitcount;
	call wm_common_xcache_deliver;
	call cluster_be_deliver;
	return (deliver); // no default VCL (which is just "return (deliver)" anyways)
}

// Varnish4 vcl_synth+vcl_backend_error

sub vcl_synth {
	set resp.http.X-CDIS = "int";
	call wm_common_xcache_deliver;
	if (resp.status >= 400) {
		call synth_errorpage;
	}
	return (deliver);
}

sub vcl_backend_error {
	set beresp.http.X-CDIS = "int";
	call backend_error_errorpage;
	return (deliver);
}
