// common backend code for all clusters
include "wikimedia-common_<%= @vcl %>.inc.vcl";

/* Include the VCL file for this role */
include "<%= @vcl %>.inc.vcl";

sub vcl_recv {
	if (client.ip !~ wikimedia_nets) {
		// Do not allow direct access to non-frontend layers
		error 403 "Access denied";
	}

	call wm_common_recv_early;

<% if @site_tier == "one" -%>
	// tier-one caches must select an applayer backend
	call cluster_be_recv_applayer_backend;
<% else -%>
	// tier-two caches always have "backend" defined to tier-one varnish-backend instances
	set req.backend = backend;
<% end -%>

	call wm_common_recv_grace;

	call wm_common_recv_purge;
	call cluster_be_recv;

	return (lookup); // no default VCL
}

sub vcl_hash {
	call cluster_be_hash;
	// default vcl_hash invokes here!
}

sub vcl_hit {
	call wm_common_hit;
	call cluster_be_hit;
	return (deliver); // no default VCL (which is just "return (deliver)" anyways)
}

sub vcl_miss {
	call wm_common_miss;
	call cluster_be_miss;
	return (fetch); // no default VCL (which is just "return (fetch)" anyways)
}

sub vcl_pass {
	call wm_common_pass;

<% if @vcl_config.fetch("pass_random", false) -%>
<% if @site_tier == "two" -%>
	// pass-traffic should not use consistent hashing, to avoid unecessary
	// traffic focus on one node and keep things performant, *if* we're
	// fairly sure that all layers/tiers make equivalent pass decisions...
	set req.backend = backend_random;
<% end -%>
<% end -%>

	call cluster_be_pass;
	return (pass); // no default VCL (which is just "return (pass)" anyways)
}

sub vcl_fetch {
	call wm_common_fetch;
	call cluster_be_fetch;
	// default vcl_fetch invokes here, unless cluster VCL unconditionally returns!
}

sub vcl_deliver {
	call wm_common_deliver;
	call cluster_be_deliver;
	return (deliver); // no default VCL (which is just "return (deliver)" anyways)
}

sub vcl_error {
	call wm_common_error;
	if (obj.status > 400 && obj.status != 413) {
		call synth_errorpage;
	}
	return (deliver);
}
