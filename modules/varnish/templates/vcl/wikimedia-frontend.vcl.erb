// common frontend code for all clusters

vcl 4.0;

<% if @vcl_config.fetch("admission_policy", "nhw") == "exp" -%>
// Includes for Exp cache admission policy, admission probability exponentially
// decreasing with size. See vcl_backend_response. T144187
C{
   #include <stdlib.h>
   #include <math.h>
   #include <errno.h>

   // rate=0.9064392 and base=-18.16135 were calculated by mathematical
   // simulation using a dataset taken from live cache_upload traffic:
   // https://phabricator.wikimedia.org/T144187#2775914
   // TODO: We need to come up with a good way of (re)computing the values and
   // put them in hiera.
   const double adm_param = <%= ((@vcl_config.fetch("fe_mem_gb").to_i/1024.0)**0.9064392)/(2.0**-18.16135) %>;
}C
<% end -%>
// only used in recv_fe_ip_processing on frontends
import netmapper;

// rate limiting
import vsthrottle;

include "<%= @varnish_include_path %>wikimedia-common_<%= @vcl %>.inc.vcl";
include "analytics.inc.vcl";
include "browsersec.inc.vcl";

/* Include the VCL file for this role */
include "<%= @varnish_include_path %><%= @vcl %>.inc.vcl";

// *** HTTPS-forcing recv code
sub https_recv_redirect {
	if (req.http.X-Forwarded-Proto != "https") {
		if (req.method == "GET" || req.method == "HEAD") {
			// This is all of our unified cert wildcard domains,
			// as well as matching beta.wmflabs.org names handled via LE.
			if (req.http.Host ~ "((^|\.)(wikipedia|wikimedia|wikibooks|wikinews|wikiquote|wikisource|wikiversity|wikivoyage|wikidata|wikimediafoundation|wiktionary|mediawiki|wmfusercontent)(\.beta\.wmflabs)?\.org|^w\.wiki|^upload\.beta\.wmflabs\.org)$") {
				set req.http.Location = "https://" + req.http.Host + req.url;
				return (synth(301, "TLS Redirect"));
			}

			// We do receive a few requests for *.wikipedia.com. That
			// domain is not among our unified cert wildcards, so we cannot
			// return a TLS redirect. However, mediawiki does redirect
			// those appropriately to their *.wikipedia.org equivalent.
			// Send a 400 for any other Host header value.
			if (req.http.Host !~ "wikipedia.com$") {
				return (synth(400, "Bad Request"));
			}
		}
		else {
			return (synth(403, "Insecure Request Forbidden - use HTTPS - https://lists.wikimedia.org/pipermail/mediawiki-api-announce/2016-May/000110.html"));
		}
	}
}

// *** HTTPS error code - implements 301 response for recv code
sub https_error_redirect {
	if (resp.reason == "TLS Redirect") {
		set resp.http.Location = req.http.Location;
		set resp.http.Content-Length = "0"; // T64245
		return(deliver);
	}
}

// *** HTTPS deliver code - domain-based HSTS headers
sub https_deliver_hsts {
	if (req.http.X-Forwarded-Proto == "https") {
		// Same regex as above in https_recv_redirect
		if (req.http.Host ~ "((^|\.)(wikipedia|wikimedia|wikibooks|wikinews|wikiquote|wikisource|wikiversity|wikivoyage|wikidata|wikimediafoundation|wiktionary|mediawiki|wmfusercontent)\.org|^w\.wiki)$") {
			set resp.http.Strict-Transport-Security = "max-age=106384710; includeSubDomains; preload";
		}
	}
}

sub normalize_request {
	// We shouldn't even legally be receiving proxy-style requests, as we're not a
	// proxy from any client's point of view.  Just in case, we support it anyways
	// according to RFC7230 rules: we ignore any Host header sent along with it
	// and set a new Host header based on the host part we strip from the abs URI.
	// ref: http://tools.ietf.org/html/rfc7230#section-5.4
	if(req.url ~ "(?i)^https?://[^/]") {
		# this strips away 'user:pass@' and ':port' when copying from URI to Host:
		set req.http.Host = regsub(req.url, "(?i)^https?://(.*@)?([^/:]+).*$", "\2");
		set req.url = regsub(req.url, "(?i)^https?://[^/]+/?", "/");
	}

	// Strip :port from req.http.host and normalize to lowercase
	set req.http.Host = std.tolower(regsub(req.http.Host, ":.*$", ""));

	// Strip away characters that don't belong in hostnames
	set req.http.Host = regsuball(req.http.Host, "[^-.a-z0-9]+", "");
}

// Must be done at the top of vcl_recv, in our varnish-frontend layer only,
// and should be guarded against running on request restarts.
sub recv_fe_ip_processing {
	// this subroutine "owns" these 3 headers - nothing else in our VCL or
	// anywhere in our network should be setting them.
	unset req.http.X-Trusted-Proxy;
	unset req.http.X-Carrier;
	unset req.http.X-Carrier-Meta;

	// unset this one just because it's well-known and some default
	// software configs may look at it, and an external client may spoof
	// it. We don't set or use this header internally (we use X-Client-IP)
	unset req.http.X-Real-IP;

	if (client.ip !~ wikimedia_trust) {
		// Ensure we only accept XFP from our own networks.  Ideally
		// it should only be set by our nginx TLS terminator
		// specifically, but there are known cases where internal apps
		// set XFP to fake HTTPS when making a request to our public
		// endpoints from the inside.
		unset req.http.X-Forwarded-Proto;
	}

	if (client.ip !~ local_host) {
		// only the local nginx TLS terminator should set these at all -
		// there are no other internal exceptions to that rule
		unset req.http.X-Client-IP;
		unset req.http.X-Connection-Properties;
	}

	// To make further parsing/sanitizing simpler, convert all whitespace
	// in XFF to single spaces, and make sure all commas have a space
	// suffix but no space prefix.
	set req.http.X-Forwarded-For = regsuball(req.http.X-Forwarded-For, "[ \t]+", " ");
	set req.http.X-Forwarded-For = regsuball(req.http.X-Forwarded-For, " ?, ?", ", ");

	// Now fully-sanitize it to only the strict form "X(, X)*", where X is
	// a string of legal characters in IPv[46] addresses.  Note
	// that injections can still leave well-formed junk on the
	// left, but it's up to the trusted proxy code to ignore that,
	// e.g.:
	// "junk2, 123.123.123.123" -> "2, 123.123.123.123"
	set req.http.X-Forwarded-For = regsub(req.http.X-Forwarded-For,
		"^.*?([0-9A-Fa-f:.]+(, [0-9A-Fa-f:.]+)*)? ?$", "\1");

	// There are two possible cases here: either nginx acted as our TLS
	// proxy and already set X-Client-IP (as well as appended the same value
	// to XFF, and we appended nginx's IP to XFF already as well...), or the
	// traffic was direct to varnish-fe, in which case XCIP is not yet set
	// and XFF is external + our addition of client.ip.

	if (!req.http.X-Client-IP) {
		unset req.http.via-nginx;
		set req.http.X-Client-IP = client.ip;
		if (!req.http.X-Client-IP) {
			// apparently sometimes the above doesn't set it???  use
			// illegal RFC 5735 documentation network to avoid
			// sending NULL to netmapper-1.3 for now
			set req.http.X-Client-IP = "192.0.2.1";
		}
	} else {
		set req.http.via-nginx = 1;
	}

	set req.http.X-Trusted-Proxy = netmapper.map("trusted_proxies", req.http.X-Client-IP);
	// normalize to boolean post-netmapper (varnish-3.0.4...)
	if (req.http.X-Trusted-Proxy == "") {
		unset req.http.X-Trusted-Proxy;
	}

	if (req.http.X-Trusted-Proxy) {
		// We need the right-most entry of XFF that was set externally
		// to our software stack.  If this was direct-to-varnish, that
		// means the 2nd entry in from the right (varnish already
		// appended client.ip).  If this was nginx->varnish, we want
		// the 3rd entry in from the right (nginx appended a client IP,
		// then varnish appended nginx's IP).

		// set maybe-xcip to XFF with final entry stripped (added by this varnish)
		set req.http.maybe-xcip = regsub(req.http.X-Forwarded-For, ", [^,]+$", "");

		// repeat final-strip if this was via-nginx to remove the one added by nginx
		if (req.http.via-nginx) {
			unset req.http.via-nginx;
			set req.http.maybe-xcip = regsub(req.http.maybe-xcip, ", [^,]+$", "");
		}

		// set maybe-xcip to the right-most entry left in itself
		set req.http.maybe-xcip = regsub(req.http.maybe-xcip, "^([^,]+, )+", "");

		// if it's an outside IP, use it to set XCIP (otherwise leave
		// XCIP alone and it's still the proxy's IP)
		if(req.http.maybe-xcip && std.ip(req.http.maybe-xcip, "127.0.0.1") !~ wikimedia_nets) {
			// the check for empty/false maybe-xcip is to prevent
			// the same netmapper-1.3 breakage as the 192.0.2.1 hack
			set req.http.X-Client-IP = req.http.maybe-xcip;
		}

		// cleanup
		unset req.http.maybe-xcip;
	}

	// Now check carrier database for setting X-Carrier based on XCIP
	set req.http.X-Carrier = netmapper.map("carriers", req.http.X-Client-IP);
	// normalize to boolean post-netmapper (varnish-3.0.4...)
	if (req.http.X-Carrier == "") {
		unset req.http.X-Carrier;
	}
	else {
		// Split X-Carrier data from raw form with optional trailing metadata,
		// such as "123-45|wap|mobile", so that X-Carrier contains only
		// MCC-MNC and X-Carrier-Meta contains the trailing attributes
		set req.http.X-Carrier-Meta = regsub(req.http.X-Carrier, "^[^|]*\|?", "");
		if (req.http.X-Carrier-Meta != "") {
			set req.http.X-Carrier = regsub(req.http.X-Carrier, "\|.*$", "");
		}
		else {
			unset req.http.X-Carrier-Meta;
		}
	}

	// From this (very early) point forward, regardless of cache tier/layer:
	// req.http.X-Client-IP ->
	//     This is our standard notion of the Client/UA's real IP, after
	//     decoding XFF for our internal infrastructure addresses as well
	//     as any trusted proxies.
	// req.http.X-Trusted-Proxy ->
	//     If the traffic pass through a trusted proxy in our "proxies"
	//     database (such as OperaMini), this will be the official name of
	//     the trusted proxy.  Otherwise it will be unset (boolean false).
	// req.http.X-Carrier ->
	//     If X-Client-IP matches a network in our "carriers" database,
	//     this will contain the MCC-MNC code for that carrier.  Otherwise
	//     it will be undefined.
	// req.http.X-Carrier-Meta ->
	//     If X-Carrier is defined: for some carriers, the database
	//     contains extra metadata in the form of one or more labels like
	//     "wap" or "residential".  They'll be separated by "|" if more
	//     than one, and this header is undefined if there was no such
	//     metadata.
}

sub vcl_init {
	call wm_common_directors_init;
	// again, netmapper only used in frontends, for recv_fe_ip_processing
	// args here are map-name (for .map()), data file, and seconds between mtime checks for reload
	netmapper.init("trusted_proxies", "<%= @netmapper_dir %>/trusted_proxies.json", 89);
	netmapper.init("carriers", "<%= @netmapper_dir %>/carriers.json", 89);
	/* Function vcl_init in <%= @vcl %>.inc.vcl will be appended here */
}

sub vcl_recv {
<% if @traffic_shutdown -%>
	// Hieradata switch to shut users out of a DC/cluster. T129424
	// We refuse to authorize the request and describe the reason in the
	// response payload. https://tools.ietf.org/html/rfc7231#section-6.5.3
	error 403 "This server has been disabled, you probably ended up here because of hardcoded IPs or broken DNS caching";
<% end -%>

	// no injection from outside our stack allowed for these
	unset req.http.X-DCPath;
	unset req.http.X-Next-Is-Cache;
	unset req.http.Proxy; // https://httpoxy.org/

	if (req.restarts == 0) {
		// This unwraps proxy-style URLs and sanitizes the Host header (lowercase, no port, no funny chars)
		call normalize_request;

		// IP processing is req->req mangling that shouldn't be re-done on restart
		call recv_fe_ip_processing;
	}

	call wm_common_recv_early;

	set req.backend_hint = cache_local.backend();

	if (req.method != "PURGE") {
		call https_recv_redirect;
	}

	if (req.url ~ "^/beacon\/[^/?]+") {
		// Logging beacon endpoints
		//
		// They are handled by the log tailer (varnishkafka) that filters the
		// Varnish shm log for reqs to these endpoints and forwards them to log
		// processors for storage and analysis.
		return (synth(204, ""));
	}

	if(req.restarts == 0) {
		call analytics_recv;
	}

	call cluster_fe_recv_pre_purge;
	call wm_common_recv_purge;

	set req.http.X-CP-HTTP2 = regsub(req.http.X-Connection-Properties, "^H2=([01]);.*", "\1");

	set req.http.X-CP-TLS-Version = regsub(req.http.X-Connection-Properties, ".* SSL=(TLSv1(\.[123])?);.*", "\1");

	set req.http.X-CP-TLS-Session-Reused = regsub(req.http.X-Connection-Properties, ".* SSR=([01]);.*", "\1");

	set req.http.X-CP-Key-Exchange = regsub(req.http.X-Connection-Properties, ".* EC=([A-Za-z0-9]+);.*", "\1");

	set req.http.X-CP-Full-Cipher = regsub(req.http.X-Connection-Properties, ".* C=([A-Z0-9-]+);.*", "\1");

	set req.http.X-CP-Auth = req.http.X-CP-Full-Cipher;

	if (req.http.X-CP-Auth ~ "^(ECDHE-(ECDSA|RSA)|DHE-RSA|TLS13)-") {
		set req.http.X-CP-Cipher = regsub(req.http.X-CP-Auth, "^(ECDHE-(ECDSA|RSA)|DHE-RSA|TLS13)-", "");

		if (req.http.X-CP-Auth ~ "^ECDHE-ECDSA") {
			set req.http.X-CP-Auth = "ECDSA";
		} else if (req.http.X-CP-Auth ~ "^ECDHE-RSA") {
			set req.http.X-CP-Auth = "RSA";
		} else if (req.http.X-CP-Auth ~ "^DHE-RSA") {
			set req.http.X-CP-Auth = "RSA";
			set req.http.X-CP-Key-Exchange = "DHE";
		} else {
			// TLS13
			set req.http.X-CP-Auth = "ECDSA";
		}
	} else {
		set req.http.X-CP-Cipher = req.http.X-CP-Auth;
		set req.http.X-CP-Auth = "RSA";
		set req.http.X-CP-Key-Exchange = "RSA";
	}

	// Starting with TLSv1.3, CHACHA20-POLY1305 will be renamed into
	// CHACHA20-POLY1305-SHA256. Do the renaming now in VCL to avoid stats skew
	// later on.
	set req.http.X-CP-Cipher = regsub(req.http.X-CP-Cipher, "^CHACHA20-POLY1305$", "CHACHA20-POLY1305-SHA256");

	// Log values to shared memory logs. They can be extracted with:
	// varnishncsa -F "%{VCL_Log:CP-TLS-Version}x"
	std.log("CP-HTTP2: " + req.http.X-CP-HTTP2);
	std.log("CP-TLS-Version: " + req.http.X-CP-TLS-Version);
	std.log("CP-TLS-Session-Reused: " + req.http.X-CP-TLS-Session-Reused);
	std.log("CP-Key-Exchange: " + req.http.X-CP-Key-Exchange);
	std.log("CP-Auth: " + req.http.X-CP-Auth);
	std.log("CP-Cipher: " + req.http.X-CP-Cipher);
	std.log("CP-Full-Cipher: " + req.http.X-CP-Full-Cipher);

	<%- if !@varnish_testing -%>
	// Keep these in the test VCL version to ease testing
	unset req.http.X-CP-HTTP2;
	unset req.http.X-CP-TLS-Version;
	unset req.http.X-CP-TLS-Session-Reused;
	unset req.http.X-CP-Key-Exchange;
	unset req.http.X-CP-Auth;
	unset req.http.X-CP-Cipher;
	unset req.http.X-CP-Full-Cipher;
	<%- end -%>

	// The idea here is to block our worst clients (in TLS terms: those
	// using DES-CBC3-SHA, which is not forward-secret, and the bulk of
	// which are also IE[78]/XP).  This will remain in place until the
	// future removal of protocol-level support.
	if (req.http.X-Connection-Properties ~ "C=DES-CBC3-SHA;" && req.url != "/sec-warning" && req.url != "/test-sec-warning" && req.url !~ "^/static/images/") {
		set req.http.Location = "https://" + req.http.Host + "/sec-warning";
		return (synth(302, "Browser Connection Security Redirect"));
	}
	if (req.url == "/sec-warning" || req.url == "/test-sec-warning") {
		return (synth(200, "Browser Connection Security Warning"));
	}


	call cluster_fe_recv;
	call wm_common_recv_pass;
	call cluster_fe_recv_tail;

	return (hash); // no default VCL
}

sub vcl_hash {
	call cluster_fe_hash;
	// default vcl_hash invokes here!
}

// http://book.varnish-software.com/4.0/chapters/Cache_Invalidation.html
sub vcl_purge {
	return (synth(204, "Purged"));
}

sub vcl_hit {
	call wm_common_hit;
	call cluster_fe_hit;
	// no default VCL.
	return (deliver);
}

sub vcl_miss {
	call wm_common_miss;
	call cluster_fe_miss;
	return (fetch); // no default VCL (which is just "return (fetch)" anyways)
}

sub vcl_pass {
	call wm_common_pass;

<% if @vcl_config.fetch("pass_random", false) -%>
	// pass-traffic should not use consistent hashing, to avoid unecessary
	// traffic focus on one node and keep things performant, *if* we're
	// fairly sure that all layers/tiers make equivalent pass decisions...
	set req.backend_hint = cache_local_random.backend();
<% end -%>

	call cluster_fe_pass;
	return (fetch); // no default VCL (which is just "return (fetch)" anyways)
}

sub vcl_pipe {
	// for websockets over pipe
	if (req.http.upgrade) {
		set bereq.http.upgrade = req.http.upgrade;
	}
}

sub vcl_backend_fetch {
    call cluster_fe_backend_fetch;
}

sub vcl_backend_response {
	// retry 503 once in frontend instances, to paper over transient issues
	// This catches the backending handing us an explicit 503
	if (beresp.status == 503 && bereq.retries == 0 && bereq.method ~ "^(GET|HEAD|OPTIONS|PUT|DELETE)$") {
		return(retry);
	}
<% if @vcl_config.fetch("admission_policy", "nhw") == "exp" -%>
if (beresp.status == 200 && bereq.http.X-CDIS == "miss") {
C{
   const struct gethdr_s hdr = { HDR_BERESP, "\017Content-Length:" };
   const char *clen_hdr = VRT_GetHdr(ctx, &hdr);
   // Set CL:0 by default
   unsigned long int clen = 0;

   // If Content-Length has been specified
   if (clen_hdr) {
       errno = 0;
       clen = strtoul(clen_hdr, NULL, 10);
       if (errno)
           clen = 0;
   }

   if (clen) {
       const double clen_neg = -1.0 * (double)clen;
       const double admissionprob = exp(clen_neg/adm_param);
       const double urand = drand48();

<%- if @varnish_testing -%>
       const struct gethdr_s prob_hdr = { HDR_BERESP, "\030X-Admission-Probability:" };
       const struct gethdr_s urand_hdr = { HDR_BERESP, "\022X-Admission-Urand:" };
       VRT_SetHdr(ctx, &prob_hdr, VRT_REAL_string(ctx, admissionprob), vrt_magic_string_end);
       VRT_SetHdr(ctx, &urand_hdr, VRT_REAL_string(ctx, urand), vrt_magic_string_end);
<%- end -%>

       Vmod_std_Func.log(ctx, "Admission Probability: ", VRT_REAL_string(ctx, admissionprob), vrt_magic_string_end);
       Vmod_std_Func.log(ctx, "Admission Urand: ", VRT_REAL_string(ctx, urand), vrt_magic_string_end);

       // If admission test succeeds, mark as uncacheable
       if (admissionprob < urand) {
           // HFM with ttl=67 to avoid stalling
           VRT_l_beresp_ttl(ctx,67);
           VRT_l_beresp_uncacheable(ctx,1);
       }
    }
}C
}
<% end -%>
	call cluster_fe_backend_response_early; // e.g. to fix up Vary-slotting in bereq
	call wm_common_backend_response;
	call cluster_fe_backend_response;
	// default vcl_(fetch|backend_response) invokes here, unless cluster VCL unconditionally returns!
}

// Common code in frontend vcl_deliver + vcl_synth
sub deliver_synth_ {
	call wm_common_xcache_deliver;

	// At the frontends, copy X-Cache-Int to X-Cache and delete X-Cache-Int
	// This prevents double-set of X-Cache in log parsing on varnish4.
	// In this block we also decipher X-Cache into an overall X-Cache-Status
	// output header with one of the following simple values:
	// hit-{front,local,remote}, int-{front,local,remote}, miss, pass, unknown.
	if (req.method != "PURGE") {
		set resp.http.X-Cache = resp.http.X-Cache-Int;
		<%- if @varnish_testing -%>
		// The test VCL version uses X-Cache-Int-Testing accepted as is
		// from the upstream server to simplify writing VTC tests.
		set resp.http.X-Cache = resp.http.X-Cache-Int-Testing;
		unset resp.http.X-Cache-Int-Testing;
		<%- end -%>
		set resp.http.X-Cache-Status = regsuball(resp.http.X-Cache, "cp[0-9]{4} (hit|miss|pass|int)(?:/[0-9]+)?", "\1");

		unset resp.http.X-Cache-Int;

		if (resp.http.X-Cache-Status ~ "hit$") {
			set resp.http.X-Cache-Status = "hit-front";
		} elsif (resp.http.X-Cache-Status ~ "hit,[^,]+$") {
			set resp.http.X-Cache-Status = "hit-local";
		} elsif (resp.http.X-Cache-Status ~ "hit") {
			set resp.http.X-Cache-Status = "hit-remote";
		} elsif (resp.http.X-Cache-Status ~ "int$") {
			set resp.http.X-Cache-Status = "int-front";
		} elsif (resp.http.X-Cache-Status ~ "int,[^,]+$") {
			set resp.http.X-Cache-Status = "int-local";
		} elsif (resp.http.X-Cache-Status ~ "int") {
			set resp.http.X-Cache-Status = "int-remote";
		} elsif (resp.http.X-Cache-Status ~ "miss") {
			set resp.http.X-Cache-Status = "miss";
		} elsif (resp.http.X-Cache-Status ~ "pass") {
			set resp.http.X-Cache-Status = "pass";
		} else {
			set resp.http.X-Cache-Status = "unknown";
		}
	}

	std.collect(resp.http.Via);
	std.collect(resp.http.X-Varnish);

	// Set CP ('Connection Properties') cookie
	if (req.http.X-Connection-Properties ~ "H2=1") {
		if (req.http.X-Orig-Cookie !~ "(^|;\s*)CP=H2" && req.http.Cookie !~ "(^|;\s*)CP=H2") {
			header.append(resp.http.Set-Cookie, "CP=H2; Path=/; secure");
		}
	} else {
		// Explicitly unset the cookie if it exists. Support for HTTP/2 in a browser session can
		// flip if a device moves networks and thus behind a proxy.
		if (req.http.X-Orig-Cookie ~ "(^|;\s*)CP=H2" || req.http.Cookie ~ "(^|;\s*)CP=H2") {
			header.append(resp.http.Set-Cookie, "CP=H1; Expires=Thu, 01-Jan-1970 00:00:01 GMT; Path=/; secure");
		}
	}

	call https_deliver_hsts;

	call analytics_deliver;

	// echo metadata about the client back to the client (analytics looks at this as well)
	set resp.http.X-Client-IP = req.http.X-Client-IP;
	// note mobile apps look at X-C + X-C-M below
	if (req.http.X-Carrier) {
		set resp.http.X-Carrier = req.http.X-Carrier;
		if (req.http.X-Carrier-Meta) {
			set resp.http.X-Carrier-Meta = req.http.X-Carrier-Meta;
		}
	}
}

sub vcl_deliver {
	call wm_common_deliver_hitcount;
	call wm_common_deliver_error_with_empty_body;
	call deliver_synth_;
	call cluster_fe_deliver;
	return (deliver); // no default VCL (which is just "return (deliver)" anyways)
}

// Varnish4 vcl_synth+vcl_backend_error

sub vcl_synth {
	if (req.method != "PURGE") {
		set resp.http.X-CDIS = "int";
		call deliver_synth_;
		call https_error_redirect;
		call cluster_fe_err_synth;

		// Browser sec warning
		if (resp.reason == "Browser Connection Security Redirect") {
			set resp.http.Location = req.http.Location;
			set resp.http.Content-Length = "0"; // T64245
			return(deliver);
		}
		// Browser sec warning
		if (resp.reason == "Browser Connection Security Warning") {
			set resp.http.Connection = "keep-alive";
			set resp.http.Cache-Control = "public, max-age=3600, s-maxage=3600";
			set resp.http.Content-Type = "text/html; charset=utf-8";
			call browser_sec_synth;
			return (deliver);
		}

		if (resp.status >= 400) {
			call synth_errorpage;
		}
	}

	call wm_common_synth;
	return (deliver);
}

sub vcl_backend_error {
	// retry 503 once in frontend instances, to paper over transient issues
	// This catches an implicit 503 (e.g. connectfail, timeout, etc)
	if (beresp.status == 503 && bereq.retries == 0 && bereq.method ~ "^(GET|HEAD|OPTIONS|PUT|DELETE)$") {
		return(retry);
	}
	set beresp.http.X-CDIS = "int";
	call backend_error_errorpage;
	return (deliver);
}
