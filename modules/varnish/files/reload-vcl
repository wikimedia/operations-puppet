#!/usr/bin/env python
# -*- coding: utf-8 -*-

# VCL reloader for Varnish, adapted to current WMF-specific needs!
#
# Copyright 2018 Brandon Black
# Copyright 2018 Wikimedia Foundation, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


import os
import re
import time
import uuid
import argparse
import subprocess


def file_exists(fname):
    """Helper for argparse to do check if a filename argument exists"""
    if not os.path.exists(fname):
        raise argparse.ArgumentTypeError("{0} does not exist".format(fname))
    return fname


def parse_options():
    """Parse command-line options, return args hash"""
    parser = argparse.ArgumentParser(description="VCL Reloader")
    parser.add_argument('--file', '-f', dest="vcl_file", type=file_exists,
                        metavar="FILE", help="VCL file", required=True)
    parser.add_argument('--instance_name', '-n', dest="instance_name",
                        help="name of varnish instance", default='')
    parser.add_argument('--delay', '-d', type=int, default=5,
                        help="delay secs between vcl.load and vcl.use")
    parser.add_argument('--compile-only', '-c', action='store_true',
                        help="test compilation, but do not use")

    return parser.parse_args()


def do_cmd(cmd):
    """echo + exec cmd with normal output, raises on rv!=0"""
    print 'Executing: %s' % cmd
    subprocess.check_call(cmd, shell=True)


def get_cmd_output(cmd):
    """echo + exec cmd, return stdout. raises on rv!=0 w/ stderr in msg"""

    print 'Executing: %s' % cmd
    p = subprocess.Popen(cmd, shell=True,
                         stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (p_out, p_err) = p.communicate()
    if p.returncode != 0:
        raise Exception("Command %s failed with exit code %i, stderr:\n%s" %
                        (" ".join(args), p.returncode, p_err))
    return p_out


def main():
    args = parse_options()
    os.umask(022)

    if args.instance_name != '':
        args.instance_name = ' -n ' + args.instance_name
    vadm_cmd = '/usr/bin/varnishadm%s' % args.instance_name
    vcl_label = 'vcl-%s' % str(uuid.uuid4())

    do_cmd('%s vcl.load %s %s' % (vadm_cmd, vcl_label, args.vcl_file))

    if not args.compile_only:
        # First sleep is T157430
        time.sleep(args.delay)
        do_cmd('%s vcl.use %s' % (vadm_cmd, vcl_label))

        # Second sleep is insurance against unknown varnish bugs
        time.sleep(1)
        for l in get_cmd_output('%s vcl.list' % vadm_cmd).splitlines():
            match = re.match(r'^available\s+\S+\s+[0-9]+\s+(boot|vcl-\S+)$', l)
            if match:
                do_cmd('%s vcl.discard %s' % (vadm_cmd, match.group(1)))


if __name__ == '__main__':
    main()

# vim: set ts=4 sw=4 et:
