#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
  varnishxcache
  ~~~~~~~~~~~~~

  Accumulate X-Cache stats and report them to StatsD.

  Usage: varnishxcache [--statsd-server SERVER] [--key-prefix PREFIX]

    --statsd-server SERVER  statsd server (default: none; echo to stdout)
    --key-prefix PREFIX     metric key prefix (default: varnish.xcache)

  Copyright 2016 Brandon Black <bblack@wikimedia.org>
  Copyright 2016 Emanuele Rocca <ema@wikimedia.org>
  Copyright 2015 Ori Livneh <ori@wikimedia.org>

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

"""
import re
import sys

from cachestats import CacheStatsSender


class XCacheStatsSender(CacheStatsSender):
    cmd = ['/usr/bin/varnishncsa', '-n', 'frontend',
           '-q', 'ReqMethod ne "PURGE"',
           '-F', '%{X-Cache}o']

    description = 'X-Cache StatsD reporter'
    key_prefix = 'varnish.xcache'
    default_keys = (
        'unknown',
        'hit-front',
        'hit-local',
        'hit-remote',
        'int-front',
        'int-local',
        'int-remote',
        'pass',
        'miss',
    )

    def __init__(self, argument_list):
        super(XCacheStatsSender, self).__init__(argument_list)

        self.key_value_pairs = re.compile(r'([A-Z][A-Z0-9]*)=([^;]+)')

        self.re_simplify = re.compile(
            'cp[0-9]{4} (hit|miss|pass|int)(?:/[0-9]+)?')

        self.state_finder = [
            [re.compile(r'hit$'),        'hit-front'],
            [re.compile(r'hit,[^,]+$'),  'hit-local'],
            [re.compile(r'hit'),         'hit-remote'],
            [re.compile(r'int$'),        'int-front'],
            [re.compile(r'int,[^,]+$'),  'int-local'],
            [re.compile(r'int'),         'int-remote'],
            [re.compile(r'pass,[^,]+$'), 'pass'],
            [re.compile(r'miss'),        'miss'],
        ]

    def gen_stats(self, record):
        record = self.re_simplify.sub(r'\1', record)
        state = 'unknown'
        for sf in self.state_finder:
            if sf[0].search(record):
                state = sf[1]
                break

        self.stats[state] += 1

if __name__ == "__main__":
    XCacheStatsSender(sys.argv[1:]).main()
