#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
  varnishmedia
  ~~~~~~~~~~~~

  Accumulate browser cache hit ratio and total request volume statistics
  for media requests and report to StatsD.

  Usage: varnishmedia [--statsd-server SERVER] [--key-prefix PREFIX]

    --statsd-server SERVER  statsd server (default: none; echo to stdout)
    --key-prefix PREFIX     metric key prefix (default: media.thumbnail.varnish)

  Copyright 2015 Ori Livneh <ori@wikimedia.org>
  Copyright 2015 Gilles Dubuc <gilles@wikimedia.org>

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

"""
from __future__ import division

import argparse
import io
import re
import socket
import urlparse

import varnishlog

class MediaVarnishLogProcessor:

    def __init__(self, key_prefix='media.thumbnail.varnish', statsd_server=None):
        self.key_prefix = key_prefix
        self.statsd_server = statsd_server
        if statsd_server:
            self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.stats = {}
        self.transactions = {}

    def handle_log_record(self, transaction_id, tag, record, remote_party):
        """VSL_handler_f callback function."""

        if tag == 'RxURL':
            # RxURL is the first tag we expect. If there are any existing
            # records for this transaction ID, we clear them away.
            self.transactions[transaction_id] = {tag: record}
        elif tag == 'ReqEnd':
            # ReqEnd is the last tag we expect. We pop the transaction's
            # records from the buffer and process it.
            transaction = self.transactions.pop(transaction_id, None)
            if transaction is not None:
                transaction[tag] = record
                self.process_transaction(transaction)
        else:
            # All other tags are buffered.
            transaction = self.transactions.get(transaction_id)
            if transaction is not None:
                transaction[tag] = record
        return 0

    def process_transaction(self, transaction):
        """Process a single completed transaction."""
        status_code = transaction['TxStatus']
        metric_keys = ['reqs.all', 'resps.' + status_code]

        if 'RxHeader' in transaction:
            metric_keys.append('reqs.if_none_match')

        if 'TxHeader' in transaction:
            cache_control_header = transaction.get('TxHeader')
            cache_control = 'no'
            if cache_control_header:
                match = re.search(r'(?<=max-age=)\d+', cache_control_header)
                if match:
                    cache_control = 'short' if match.group() == '300' else 'long'
            metric_keys.append('responses.%s_cache_control.%s' %
                               (cache_control, status_code))

        for key in metric_keys:
            self.stats[key] = self.stats.get(key, 0) + 1

        if self.stats['reqs.all'] > 10000:
            self.flush_stats()

    def flush_stats(self):
        """Flush metrics to standard out or statsd server."""
        buf = io.BytesIO()
        while self.stats:
            key, value = self.stats.popitem()
            metric = '%s.%s:%s|c\n' % (self.key_prefix, key, value)
            buf.write(metric.encode('utf-8'))
        buf.seek(io.SEEK_SET)
        if self.statsd_server:
            self.sock.sendto(buf.read(), self.statsd_server)
        else:
            print(buf.read().decode('utf-8').rstrip())

    def start(self):
        varnishlog.varnishlog((
            ('m', 'RxURL:/thumb/'), # Only look at thumb requests
            ('n', 'frontend'),      # Consider the frontend Varnish instance
            ('i', 'TxStatus'),      # Get TxStatus for the HTTP status code
            ('i', 'RxURL'),         # Get RxURL to match /w/load.php
            ('i', 'ReqEnd'),        # Get ReqEnd to delimit requests
        ), self.handle_log_record)

def parse_statsd_server_string(server_string):
    parsed = urlparse.urlparse('//' + server_string)
    return parsed.hostname, parsed.port or 8125


def parse_prefix_string(key_prefix):
    key_prefix = key_prefix.strip('.')
    if not key_prefix:
        raise ValueError('Key prefix must not be empty')
    return key_prefix

ap = argparse.ArgumentParser(
    description='Media Browser Cache Hit Ratio StatsD Reporter',
    epilog='If no statsd server is specified, prints stats to stdout instead.'
)
ap.add_argument('--key-prefix', help='metric key prefix',
                type=parse_prefix_string, default='media.thumbnail.varnish')
ap.add_argument('--statsd-server', help='statsd server',
                type=parse_statsd_server_string, default=None)
args = ap.parse_args()

lp = MediaVarnishLogProcessor(args.key_prefix, args.statsd_server)
lp.start()
