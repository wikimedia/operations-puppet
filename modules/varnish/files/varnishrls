#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
  varnishrls
  ~~~~~~~~~~

  Accumulate browser cache hit ratio and total request volume statistics
  for ResourceLoader requests (/w/load.php) and report to StatsD.

  Usage: varnishrls [--statsd-server SERVER] [--key-prefix PREFIX]

    --statsd-server SERVER  statsd server (default: none; echo to stdout)
    --key-prefix PREFIX     metric key prefix (default: varnish.clients)

  Copyright 2015 Ori Livneh <ori@wikimedia.org>

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

"""
import argparse
import io
import re
import socket
import urlparse

import varnishlog


def parse_statsd_server_string(server_string):
    parsed = urlparse.urlparse('//' + server_string)
    return parsed.hostname, parsed.port or 8125


def parse_prefix_string(key_prefix):
    key_prefix = key_prefix.strip('.')
    if not key_prefix:
        raise ValueError('Key prefix must not be empty')
    return key_prefix


ap = argparse.ArgumentParser(
    description='ResourceLoader Browser Cache Hit Ratio StatsD Reporter',
    epilog='If no statsd server is specified, prints stats to stdout instead.'
)

ap.add_argument('--statsd-server', help='statsd server',
                type=parse_statsd_server_string, default=None)
ap.add_argument('--key-prefix', help='metric key prefix',
                type=parse_prefix_string, default='ResourceLoader')
args = ap.parse_args()

sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
stats = {}


current_match = -1

def vsl_callback(transaction_id, tag, record, remote_party):
    global current_match
    keys = ()

    # Start of new request.
    if tag == 'RxURL':
        if record.startswith('/w/load.php'):
            current_match = transaction_id
        else:
            # This should only happen if the request URL consists of
            # three digits or if starts with 'if-modified-since', in
            # which case we reject the match.
            current_match = -1
        return 0

    # Out-of-sequence log record. Discard and reset request context.
    if current_match != transaction_id:
        current_match = -1
        return 0

    if tag == 'TxStatus':
        # We don't expect to see any more log records from this request
        # because TxStatus ought to come after RxHeader and RxURL.
        current_match = -1
        keys = ('reqs.all', 'resps.%s' % record)
    elif tag == 'RxHeader':
        if not re.match(r'if-none-match', record, re.I):
            # This should only happen if the request header name
            # consists of three digits or starts with '/w/load.php'.
            current_match = -1
            return 0
        keys = ('reqs.if_none_match',)

    for key in keys:
        stats[key] = stats.get(key, 0) + 1

    if sum(stats.values()) > 1e4:
        buf = io.BytesIO()
        while stats:
            key, value = stats.popitem()
            metric = '%s.%s:%s|c\n' % (args.key_prefix, key, value)
            buf.write(metric.encode('utf-8'))
        buf.seek(io.SEEK_SET)
        if args.statsd_server:
            sock.sendto(buf.read(), args.statsd_server)
        else:
            print(buf.read().decode('utf-8').rstrip())

    return 0


varnishlog.varnishlog((
    ('n', 'frontend'),  # Consider the frontend Varnish instance
    ('c', None),        # Only consider interactions with the client
    ('i', 'TxStatus'),  # Get TxStatus for the HTTP status code
    ('i', 'RxHeader'),  # Get RxHeader for If-None-Match header
    ('i', 'RxURL'),     # Get RxURL to match /w/load.php
    ('C', ''),          # Use case-insensitive matching
    ('I', '^(/w/load\.php'   # ...to match ResourceLoader RxURLs
          '|if-none-match'   # ...or If-None-Match RxHeaders
          '|[1-5]\d{2}$)'),  # ...or RxStatus codes
), vsl_callback)
