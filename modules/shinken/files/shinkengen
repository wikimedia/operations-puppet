#!/usr/bin/python3
#   Copyright 2014 Yuvi Panda <yuvipanda@gmail.com>
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
"""
Generates config about labs instances for shinken, taking info from LDAP.

Emits a host definition for each instance in the whitelisted projects
(whitelist in the config file).

Sets as hostgroup for each instance:
    - Name of project instance is a part of
    - role::labs::instance
    - Each puppet role explicitly applied to it (via Wikitech)

Sets as contact for each instance a contactgroup with the same name as the
project the instance is in. This contactgroup must be created whenever a
new project is whitelisted.

Sets the project name in the notes section of each instance, so that
can be used when constructing graphite metric paths.
"""
import argparse
import sys
import yaml
import ldap3
from collections import OrderedDict


class ConfigObject():
    """
    A Shinken configuration object.

    Has a type (Host, Hostgroup, Service, etc) and a bunch of key
    value pairs that it can output in a format that shinken understands.
    """

    def __init__(self, type):
        self.type = type  # Host, HostGroup, Service, whatever
        self.properties = OrderedDict()

    def __str__(self):
        max_key_len = max(len(key) for key in self.properties.keys())
        config_str = ''.join('    %-*s   %s\n' % (max_key_len, key, value)
                             for key, value in self.properties.items())
        return 'define %s {\n%s}\n' % (self.type, config_str)


class LDAPSource(object):
    """
    A source of information about labs instances, querying LDAP
    """
    def __init__(self, server, bindas, passwd):
        server = ldap3.Server(server)
        self.conn = ldap3.Connection(server, read_only=True,
                                     user=bindas, password=passwd)
        self.conn.bind()
        self.conn.start_tls()

    def get_instances(self, project):
        """
        Get info about all instances in the given project.

        Returns the following information for each instance in given project:
            - ec2id: Permanent id for this particular instance
            - ip: Internal IP of this instance
            - region: Which OpenStack Region this Instance is in
            - puppetClasses: List of puppet classes applied to this instance via
                             configure page in wikitech.
            - project: Name of project the instance is contained in
            - name: Name of the instance
            - puppetVars: Dictionary containing any custom puppet variables that
                          have been set in the configure page in wikitech. Also
                          contains default keys of `instanceproject` & `instancename`
        """
        self.conn.search('ou=hosts,dc=wikimedia,dc=org',
                         '(puppetVar=instanceproject=%s)' % project,
                         ldap3.SEARCH_SCOPE_WHOLE_SUBTREE,
                         attributes=ldap3.ALL_ATTRIBUTES)
        hosts = []
        hostnames = set()  # Temp fix for T96817
        for responseitem in self.conn.response:
            hostinfo = responseitem['attributes']
            ip = [a for a in hostinfo['aRecord'] if a.startswith('10.')][0]
            puppetvars = {
                var[0]: var[1]
                for var in [pv.split("=") for pv in hostinfo['puppetVar']]
            }
            if puppetvars['instancename'] in hostnames:
                continue
            else:
                hostnames.add(puppetvars['instancename'])
            hosts.append({
                'ec2id': hostinfo['dc'][0],
                'ip': ip,
                'region': hostinfo['l'][0],
                'puppetClasses': hostinfo.get('puppetClass', []),
                'project': project,
                'name': puppetvars['instancename'],
                'puppetVars': puppetvars
            })

        return hosts

if __name__ == '__main__':
    argparser = argparse.ArgumentParser()
    argparser.add_argument("--test-if-up-to-date", action="store_true",
                           help="Succeed only if no changes would be done")
    args = argparser.parse_args()

    with open('/etc/shinkengen.yaml') as f:
        config = yaml.load(f)

    ldapsource = LDAPSource(config['ldap']['server'],
                            config['ldap']['bindas'],
                            config['ldap']['password'])

    for project in config['projects']:
        instances = ldapsource.get_instances(project)
        host_configs = []
        for instance in instances:
            co = ConfigObject('host')
            co.properties['use'] = 'generic-host'
            co.properties['host_name'] = instance['name']
            co.properties['address'] = instance['ip']
            # Each role applied to this instance explicitly, via
            # wikitech, is added as a hostgroup, so we can target
            # particular roles with checks.  role::labs::instance is
            # implicitly applied to all instances via
            # manifests/site.pp, so we need to add it here explicitly.
            co.properties['hostgroups'] = ','.join([project, 'role::labs::instance'] + instance['puppetClasses'])
            # For each project added to monitoring we expect a contactgroup with the same
            # name added.
            # FIXME: Implement access mechanism more fine grained than per-project
            co.properties['contact_groups'] = project
            # Used to auto derive metric paths in graphite, which is of the form
            # <projectname>.<instancename>.<metric-path>.
            co.properties['notes'] = project  # Used for auto deriving graphite path
            host_configs.append(co)
        hosts_config_path = '%s/%s.cfg' % (
            config['output_path'], project
        )
        file_content = ''.join([str(hc) for hc in host_configs])
        if args.test_if_up_to_date:
            # By not catching exceptions here, not existing or
            # inaccessible files cause the script to fail as well.
            with open(hosts_config_path, 'r') as hostsfile:
                if hostsfile.read() != file_content:
                    sys.exit(1)
        else:
            with open(hosts_config_path, 'w') as hostsfile:
                hostsfile.write(file_content)
