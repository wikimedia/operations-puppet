#!/usr/bin/python2
#   Copyright 2014 Yuvi Panda <yuvipanda@gmail.com>
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
"""
Generates config about labs instances for shinken, taking info from OpenStack and our puppetmaster.

Emits a host definition for each instance in the whitelisted projects
(whitelist in the config file).

Sets as hostgroup for each instance:
    - Name of project instance is a part of
    - role::labs::instance
    - Each puppet role explicitly applied to it (via Wikitech)

Sets as contact for each instance a contactgroup with the same name as the
project the instance is in. This contactgroup must be created whenever a
new project is whitelisted.

Sets the project name in the notes section of each instance, so that
can be used when constructing graphite metric paths.
"""
import argparse
import sys
import yaml
import requests
from collections import OrderedDict

from keystoneclient.session import Session as KeystoneSession
from keystoneclient.auth.identity.v3 import Password as KeystonePassword

from keystoneclient.v3 import Client as KeystoneClient
from novaclient import client as novaclient


class ConfigObject():
    """
    A Shinken configuration object.

    Has a type (Host, Hostgroup, Service, etc) and a bunch of key
    value pairs that it can output in a format that shinken understands.
    """

    def __init__(self, type):
        self.type = type  # Host, HostGroup, Service, whatever
        self.properties = OrderedDict()

    def __str__(self):
        max_key_len = max(len(key) for key in self.properties.keys())
        config_str = ''.join('    %-*s   %s\n' % (max_key_len, key, value)
                             for key, value in self.properties.iteritems())
        return 'define %s {\n%s}\n' % (self.type, config_str)

def get_keystone_session(project, observer_config):
    return KeystoneSession(auth=KeystonePassword(
        auth_url=observer_config['OS_AUTH_URL'],
        username=observer_config['OS_USERNAME'],
        password=observer_config['OS_PASSWORD'],
        project_name=project,
        user_domain_name='default',
        project_domain_name='default'
    ))

def get_instances(project, keystone_session):
    client = novaclient.Client("2.0", session=keystone_session)
    hosts = []
    for instance in client.servers.list():
        hosts.append({
            'ip': [
                str(ip['addr']) for ip in instance.addresses['public']
                if ip['OS-EXT-IPS:type'] == 'fixed'
            ][0],
            'project': project,
            'name': instance.name,
            'fqdn': '.'.join([instance.name, project, config['site'], 'wmflabs'])
        })

    return hosts


def get_instance_roles(project, fqdn, enc_host):
    url = 'http://{enc_host}:8100/v1/{project}/node/{fqdn}'.format(
        enc_host=enc_host,
        project=project,
        fqdn=fqdn
    )
    return yaml.safe_load(requests.get(url).text)['roles']

if __name__ == '__main__':
    argparser = argparse.ArgumentParser()
    argparser.add_argument("--test-if-up-to-date", action="store_true",
                           help="Succeed only if no changes would be done")
    args = argparser.parse_args()

    with open('/etc/shinkengen.yaml') as f:
        config = yaml.safe_load(f)

    with open('/etc/novaobserver.yaml') as n:
        nova_observer = yaml.safe_load(n)
        observer_pass = nova_observer['OS_PASSWORD']

    client = KeystoneClient(
        session=get_keystone_session('bastion', nova_observer),
        endpoint=nova_observer['OS_AUTH_URL'],
        interface='public'
    )

    for project in client.projects.list():
        instances = get_instances(project.name, get_keystone_session(project.name, nova_observer))
        host_configs = []
        for instance in instances:
            co = ConfigObject('host')
            co.properties['use'] = 'generic-host'
            co.properties['host_name'] = instance['name']
            co.properties['address'] = instance['ip']
            # Each role applied to this instance explicitly, via
            # wikitech, is added as a hostgroup, so we can target
            # particular roles with checks.  role::labs::instance is
            # implicitly applied to all instances via
            # manifests/site.pp, so we need to add it here explicitly.
            hostgroups = [project.name, 'role::labs::instance']
            hostgroups += get_instance_roles(instance['project'],
                                             instance['fqdn'],
                                             config['puppet_enc_host'])
            co.properties['hostgroups'] = ','.join(sorted(set(hostgroups)))
            # For each project added to monitoring we expect a contactgroup with the same
            # name added.
            # FIXME: Implement access mechanism more fine grained than per-project
            co.properties['contact_groups'] = project.name
            # Used to auto derive metric paths in graphite, which is of the form
            # <projectname>.<instancename>.<metric-path>.
            co.properties['notes'] = project.name  # Used for auto deriving graphite path
            host_configs.append(co)
        hosts_config_path = '%s/%s.cfg' % (
            config['output_path'], project.name
        )
        file_content = ''.join([str(hc) for hc in host_configs])
        if args.test_if_up_to_date:
            # By not catching exceptions here, not existing or
            # inaccessible files cause the script to fail as well.
            with open(hosts_config_path, 'r') as hostsfile:
                if hostsfile.read() != file_content:
                    sys.exit(1)
        else:
            with open(hosts_config_path, 'w') as hostsfile:
                hostsfile.write(file_content)
