<%#- SPDX-License-Identifier: Apache-2.0 -%>

<%-
# IPv6 addresses have to be escaped with [] for gitlab.rb config file
nginx_listen_addresses_escaped = []

@nginx_listen_addresses.each do | nginx_listen_address |
  if nginx_listen_address.include?(':')
      nginx_listen_addresses_escaped.push("[#{nginx_listen_address}]")
  else
    nginx_listen_addresses_escaped.push("#{nginx_listen_address}")
  end
end
def _to_ruby(value)
  scope.call_function('to_ruby', [value])
end

-%>

# The URL through which GitLab will be accessed.
external_url "<%= @external_url %>"

# GitLab configuration
gitlab_rails['time_zone'] = 'UTC'
gitlab_rails['backup_keep_time'] = <%= @backup_keep_time %>

# Users settings
gitlab_rails['gitlab_username_changing_enabled'] = <%= @gitlab_username_changing %>

# Email settings
gitlab_rails['gitlab_email_enabled'] = <%= @email_enable.to_s %>
<%- if @email_enable -%>
gitlab_rails['gitlab_email_from'] = "<%= @email_from %>"
gitlab_rails['gitlab_email_display_name'] = "<%= @email_name %>"
gitlab_rails['gitlab_email_reply_to'] = "<%= @email_reply_to %>"
<%- end -%>

# Default Theme
gitlab_rails['gitlab_default_theme'] = "<%= @default_theme %>"

# Content-Security-Policy
#
# Upstream has not enabled it by default yet:
# https://gitlab.com/gitlab-org/gitlab/-/issues/30720
# We want some report while upstream is polishing the rules
# https://gitlab.com/groups/gitlab-org/-/epics/6363
#
# Upstream defaults are in `config/gitlab.yml.example`
gitlab_rails['content_security_policy'] = {
    enabled: <%= @csp_enabled %>,
    report_only: <%= @csp_report_only %>,
    directives: {
        base_uri: "'self'",
        child_src: "'self'",
        # Web sockets must be explicitly allowed (different scheme)
        connect_src: "'self' wss://<%= @gitlab_domain %>:*",
        default_src: "'self'",
        font_src: nil,
        form_action: nil,
        frame_ancestors: "'self'",
        frame_src: "'self'",
        img_src: "* data: blob:",
        manifest_src: nil,
        media_src: nil,
        object_src: "'none'",
        script_src: "'self' 'unsafe-eval' 'report-sample'",
        style_src: "'self' 'unsafe-inline' 'report-sample'",
        worker_src: "'self' blob:",
        # https://logstash.wikimedia.org/app/dashboards#/view/AW0h61hZZKA7RpiroFmS?_a=(query:(term:(source.keyword:gitlab.wikimedia.org)))
        report_uri: 'https://meta.wikimedia.org/w/api.php?action=cspreport&reportonly=1&source=<%= @gitlab_domain %>&format=json',
    }
}

letsencrypt['enable'] = <%= @letsencrypt_enable %>

# nginx and TLS configuration
nginx['listen_port'] = <%= @nginx_listen_port %>
<%- if @listen_https -%>
# Whether to redirect http to https.
nginx['listen_https'] = true
nginx['redirect_http_to_https'] = false
nginx['ssl_certificate'] = "<%= @cert_path %>"
nginx['ssl_certificate_key'] = "<%= @key_path %>"
<%- else -%>
nginx['listen_https'] = false
<%- end -%>
nginx['listen_addresses'] = <%= nginx_listen_addresses_escaped %>

# Nginx access logging in JSON - see https://phabricator.wikimedia.org/T274462
#
# This is hacky: The whole string is just dumped into a template between
# single-quotes, so we have to balance the quotes here.  Note that escape=json
# is a parameter setting json escaping for variables, not part of the log
# format itself.
#
# Relevant docs:
#
#   - https://docs.gitlab.com/omnibus/settings/logs.html#using-a-custom-nginx-log-format
#   - https://nginx.org/en/docs/http/ngx_http_log_module.html#log_format
nginx['log_format'] = 'escape=json\' \'@cee: {\'
    \'"timestamp":"$time_iso8601",\'
    \'"client.ip":"$remote_addr",\'
    \'"user.name":"$remote_user",\'
    \'"url.path":"$request_uri",\'
    \'"url.domain":"$host",\'
    \'"host.name":"$hostname",\'
    \'"http.request.method":"$request_method",\'
    \'"http.request.headers.referer":"$http_referer",\'
    \'"http.response.status_code":"$status",\'
    \'"http.response.body.bytes":"$body_bytes_sent",\'
    \'"user_agent.original":"$http_user_agent",\'
    \'"event.category":["network","web"],\'
    \'"event.dataset":"nginx.access",\'
    \'"event.kind":"event",\'
    \'"event.type":["access","connection"],\'
    \'"service.type":"nginx",\'
    \'"ecs.version":"1.7.0"\'
  \'}'

# Default feature settings:
<%- ['issues', 'wiki', 'snippets'].each do |project| -%>
gitlab_rails['gitlab_default_projects_features_<%= project %>'] = <%= @default_projects_features.include?(project) %>
<%- end -%>

# The directory where Git repositories will be stored
git_data_dirs({"default" => {"path" => "<%= @data_dir %>"} })

# The directory where Gitlab backups will be stored
gitlab_rails['backup_path'] = "<%= @backup_dir_data %>"

# These settings are documented in more detail at
# https://gitlab.com/gitlab-org/gitlab-ce/blob/master/config/gitlab.yml.example#L118
gitlab_rails['ldap_enabled'] = false

# Allow prometheus to scrape GitLab Nginx metrics T275170
## https://docs.gitlab.com/ee/administration/monitoring/prometheus/#using-an-external-prometheus-server
<%- unless @monitoring_whitelist.empty? or !@exporters.include?('nginx') -%>
nginx['status']['options'] = {
      "server_tokens" => "off",
      "access_log" => "off",
      <%- @monitoring_whitelist.each do |range| -%>
      "allow" => "<%= range %>",
      <%- end -%>
      "deny" => "all",
}
<%- end -%>

# Use smtp instead of sendmail/postfix
# More details and example configuration at
# https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/doc/settings/smtp.md#smtp-on-localhost
<%- if @smtp_enabled -%>
gitlab_rails['smtp_enable'] = true
gitlab_rails['smtp_port'] = <%= @smtp_port %>
<%- else -%>
gitlab_rails['smtp_enable'] = false
<%- end -%>

# GitLab registry.
registry['enable'] = false

# GitLab monitoring
<%- if @monitoring_whitelist -%>
gitlab_rails['monitoring_whitelist'] = <%= @monitoring_whitelist %>
<%- end -%>
<%- if @gitlab_prometheus_address -%>
gitlab_rails['prometheus_address'] = <%= @gitlab_prometheus_address %>
<%- end -%>

prometheus['enable'] = <%= @enable_prometheus %>
alertmanager['enable'] = <%= @enable_alertmanager %>

# Exporters have to be enabled and disabled explicitly, otherwise some are started by default
gitlab_exporter['enable'] = <%= @exporters.include?('gitlab') %>
node_exporter['enable'] = <%= @exporters.include?('node') %>
postgres_exporter['enable'] = <%= @exporters.include?('postgres') %>
redis_exporter['enable'] = <%= @exporters.include?('redis') %>
puma['exporter_enabled'] = <%= @exporters.include?('puma') %>

<%- @exporters.each do |exporter, config| -%>
<%- case exporter -%>
<%- when 'gitlab' -%>
gitlab_exporter['listen_address'] = '<%= config.fetch('listen_address', @exporter_default_listen) %>'
gitlab_exporter['listen_port'] = <%= config['port'] %>
<%- when 'node' -%>
node_exporter['listen_address'] = '<%= config.fetch('listen_address', @exporter_default_listen) %>:<%= config['port'] %>'
<%- when 'postgres' -%>
postgres_exporter['listen_address'] = '<%= config.fetch('listen_address', @exporter_default_listen) %>:<%= config['port'] %>'
<%- when 'redis' -%>
redis_exporter['listen_address'] = '<%= config.fetch('listen_address', @exporter_default_listen) %>:<%= config['port'] %>'
<%- when 'puma' -%>
puma['exporter_address'] = '<%= config.fetch('listen_address', @exporter_default_listen) %>'
puma['exporter_port'] = <%= config['port'] %>
<%- when 'workhorse' -%>
gitlab_workhorse['prometheus_listen_addr'] = '<%= config.fetch('listen_address', @exporter_default_listen) %>:<%= config['port'] %>'
<%- when 'gitaly' -%>
gitaly['configuration'] = {
  prometheus_listen_addr: '<%= config.fetch('listen_address', @exporter_default_listen) %>:<%= config['port'] %>',
}
<%- when 'sidekiq' -%>
sidekiq['listen_address'] = '<%= config.fetch('listen_address', @exporter_default_listen) %>'
sidekiq['listen_port'] = <%= config['port'] %>
<% end -%>
<% end -%>

gitlab_rails['omniauth_allow_single_sign_on'] = <%= _to_ruby(@configured_providers) %>
<% unless @auto_sign_in_with.nil? -%>
gitlab_rails['omniauth_auto_sign_in_with_provider'] = '<%= @auto_sign_in_with %>'
<% end -%>
gitlab_rails['omniauth_block_auto_created_users'] = <%= @block_auto_created_users.to_s %>
gitlab_rails['omniauth_sync_email_from_provider'] = <%= _to_ruby(@configured_providers) %>
gitlab_rails['omniauth_sync_profile_from_provider'] = <%= _to_ruby(@configured_providers) %>
gitlab_rails['omniauth_sync_profile_attributes'] = <%= _to_ruby(@sync_profile_attributes) %>

gitlab_rails['omniauth_providers'] = <%= _to_ruby(@_omniauth_providers) %>

# T320390: Make sure we autolink cas3 and oidc users
gitlab_rails['omniauth_auto_link_user'] = ["cas3", "openid_connect"]
gitlab_rails['omniauth_auto_link_saml_user'] = <%= @omniauth_auto_link_saml_user %>

# To change other settings, see:
# https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/README.md#changing-gitlab-yml-settings

<% if @thanos_storage_enabled %>
gitlab_rails['object_store']['enabled'] = true
gitlab_rails['object_store']['proxy_download'] = true
gitlab_rails['object_store']['connection'] = {
  'provider' => 'AWS',
  'aws_access_key_id' => '<%= @thanos_storage_username %>',
  'aws_secret_access_key' => '<%= @thanos_storage_password %>',
  'host' => 'thanos-swift.discovery.wmnet',
  'path_style' => true,
  'enable_signature_v4_streaming' => false,
}

gitlab_rails['object_store']['objects']['artifacts']['bucket'] = 'gitlab-artifacts'
gitlab_rails['object_store']['objects']['packages']['bucket'] = 'gitlab-packages'

gitlab_rails['object_store']['objects']['external_diffs']['enabled'] = false
gitlab_rails['object_store']['objects']['lfs']['enabled'] = false
gitlab_rails['object_store']['objects']['uploads']['enabled'] = false
gitlab_rails['object_store']['objects']['dependency_proxy']['enabled'] = false
gitlab_rails['object_store']['objects']['terraform_state']['enabled'] = false
gitlab_rails['object_store']['objects']['pages']['enabled'] = false
<%- end -%>

gitlab_rails['env'] = {
<%- if @thanos_storage_enabled -%>
  # This is needed to let Gitlab/Excon pick up the wmf signed certificates
  'SSL_CERT_DIR' => '/etc/ssl/certs',
<%- end -%>
<%- if @local_gems_enabled -%>
  'BUNDLE_GEMFILE' => '<%= @rails_path %>/Gemfile.local',
<%- end -%>

}
<%- if @custom_nginx_config -%>
nginx['custom_gitlab_server_config'] = <%= @custom_nginx_config.join("\n").inspect %>
<%- end -%>