# This file is managed by puppet

##########
# Macros #
##########

CONFDIR=/etc/exim4

<% if @site == "eqiad" -%>
# wiki-mail-eqiad
WIKI_INTERFACE=<; 208.80.154.91 ; 2620:0:861:3:208:80:154:91
<% elsif @site == "codfw" -%>
# wiki-mail-codfw
WIKI_INTERFACE=<; 208.80.153.46 ; 2620:0:860:2:208:80:153:46
<% end %>

VERP_BOUNCE_LOCALPART_REGEXP = \N^wiki-\w+-\w+-\w+-[+/\w]+$\N

###############################
# Main configuration settings #
###############################

# 2022-05-09: Disable RFC1830 CHUNKING. Starting on 05-04 we began bouncing
# some messages from Gmail with the following error:
#
#     2022-05-04 01:28:33 SMTP protocol error in "BDAT 18942 LAST"
#     H=mail-lj1-x236.google.com [2a00:1450:4864:20::236]:33303
#     I=[2620:0:861:3:208:80:154:76]:25 BDAT command used when
#     CHUNKING not advertised
#
# The cause was determined to be a change in some of Google's servers which
# exposed a bug in Exim. This bug was fixed in, 462e2cd30, so chunking can be
# re-enabled when Exim is upgraded to 4.96, T307873.
chunking_advertise_hosts =

domainlist system_domains = @
<% if @realm == "production" -%>
domainlist local_domains = +system_domains : +wikimedia_domains : +verp_domains
<% else -%>
domainlist local_domains = +system_domains : +verp_domains
<% end -%>
domainlist wikimedia_domains = lsearch,ret=key;CONFDIR/wikimedia_domains
domainlist verp_domains = <%= @verp_domains.join(" : ") %>
domainlist relay_domains = +wikimedia_domains

# a list of domains to always respond defer; used for emergencies or planned downtimes
domainlist defer_domains = lsearch;CONFDIR/defer_domains

# Standard lists
domainlist legacy_mailman_domains = wikimedia.org : wikipedia.org
domainlist phab_domains = phabricator.wikimedia.org
domainlist donate_domains = donate.wikimedia.org : civicrm.wikimedia.org

hostlist wikimedia_nets = <; <%= scope.lookupvar('network::constants::aggregate_networks').join(" ; ") %>

# this explicitly allows all Wikimedia networks, including Labs, as we are the relays for them as well
hostlist relay_from_hosts = <; @[] ; 127.0.0.1 ; ::1 ; <%= scope.lookupvar('network::constants::aggregate_networks').join(" ; ") %>

# Administration
log_selector = +address_rewrite +all_parents +delivery_size +deliver_time +incoming_interface +incoming_port +smtp_connection +smtp_confirmation +smtp_protocol_error +smtp_syntax_error +tls_cipher +tls_peerdn<% if @log_selector_extra %> <%= @log_selector_extra %><% end %>
message_logs = false

# Change the default Received header, this is a copy of the default header with
# one exeception, for authenticated clients we record their authenticated_id
# rather than their IP address. This is done to prevent Gmail from checking
# whether the authenticated client IP is in our SPF record.
received_header_text = Received: \
	${if def:authenticated_id {from $authenticated_id\n\t}{\
		${if def:sender_rcvhost {from $sender_rcvhost\n\t}{\
			${if def:sender_ident {from ${quote_local_part:$sender_ident} }}\
			${if def:sender_helo_name {(helo=$sender_helo_name)\n\t}}\
		}}\
	}}\
	by $primary_hostname \
	${if def:received_protocol {with $received_protocol }}\
	${if def:tls_in_ver { ($tls_in_ver)}}\
	${if def:tls_in_cipher_std { tls $tls_in_cipher_std\n\t}}\
	(Exim $version_number)\n\t\
	${if def:sender_address {(envelope-from <$sender_address>)\n\t}}\
	id $message_exim_id\
	${if def:received_for {\n\tfor $received_for}}

# Policy control
acl_smtp_connect = acl_check_connect
acl_smtp_rcpt = acl_check_rcpt
acl_smtp_data = acl_check_data

helo_try_verify_hosts = *

system_filter = CONFDIR/system_filter

# Resource control
check_spool_space = 50M
smtp_reserve_hosts = <; 127.0.0.1 ; ::1 ; +wikimedia_nets
smtp_accept_queue_per_connection = 500

deliver_queue_load_max = 800.0
queue_only_load = 100.0
remote_max_parallel = 500

smtp_connect_backlog = 128
smtp_receive_timeout = 1m
smtp_accept_max = 4000
smtp_accept_max_per_host = ${if match_ip{$sender_host_address}{+wikimedia_nets}{50}{5}}
smtp_accept_reserve = 100

# Lookups
host_lookup = *
rfc1413_hosts =

# Content filtering
spamd_address = 127.0.0.1 783

# Other
never_users = root : daemon : bin
ignore_bounce_errors_after = 0h
bounce_message_file = /etc/exim4/bounce_message_file
warn_message_file = /etc/exim4/warn_message_file

add_environment = <; PATH=/bin:/usr/bin
keep_environment =

# TLS
tls_certificate = /etc/acmecerts/mx/live/rsa-2048.chained.crt
tls_privatekey = /etc/acmecerts/mx/live/rsa-2048.key
tls_advertise_hosts = *
tls_require_ciphers = NORMAL:%SERVER_PRECEDENCE

# force Gmail over IPv4 due to reports of bad spam reputation over IPv6
dns_ipv4_lookup = gmail-smtp-in.l.google.com : aspmx.l.google.com

<%- if @plain_auth_logins != {} -%>
###############################
#       Authenticators        #
###############################
begin authenticators

plain:
	driver = plaintext
	public_name = PLAIN
	server_prompts = :
	# Only advertise plain auth when tls encrypted
	server_advertise_condition = ${if def:tls_in_cipher }
	server_condition = \
		${lookup{$auth2}lsearch{/etc/exim4/plain_auth_logins} \
		{${if crypteq{$auth3}{$value}}} {false}}
	# Set $authenticated_id
	server_set_id = $auth2

<%- end -%>
###############################
# Access Control Lists (ACLs) #
###############################

begin acl

acl_check_rcpt:

	# If the recipient is a mailing list addressed to the legacy domain
	# names, return an error indicating the new domain name.
	deny
		local_parts = ${if exists{CONFDIR/legacy_mailing_lists}\
			{CONFDIR/legacy_mailing_lists}\
			{}}
		domains = +legacy_mailman_domains
		message = 551 User <$local_part_data@$domain_data> not local; please try <$local_part_data@lists.wikimedia.org>

	# If there have been ~4 times as many previous RCPT rejects than
	# accepts, drop the connection
	drop message = Too many ($rcpt_fail_count) rejected recipients, good bye
		hosts = ! +wikimedia_nets
		condition = ${if >={$rcpt_fail_count}{${eval:4*($recipients_count+1)}}}

	# Accept if the source is local SMTP (a pipe)
	accept hosts = :

	# Deny if the local part contains @, %, /, | or !, or starts with a dot
	deny local_parts = ^.*[@%!/|] : ^\\.

	# CONFDIR/sender_discards: Holds a list of envelope senders that should have
	# their messages discarded. Incoming messages from one of these senders
	# appear accepted from an SMTP perspective, but are silently discarded.
	discard
		senders = ${if exists{CONFDIR/sender_discards}\
			{CONFDIR/sender_discards}\
			{}}
		log_message = Discarded $local_part@$domain as matched in sender_discards

	# Accept relaying from networks we control. Note: no address verification
	# is done at this point, which is good for mail submission, but may render
	# recipient callout verification by affected hosts useless.
	accept domains = ! +local_domains
		hosts = +relay_from_hosts
		control = submission/sender_retain

	<%- if @plain_auth_logins != {} -%>
	# Allow relaying from authenticated clients
	accept authenticated = *
		control = submission/domain=

	<%- end -%>
	# Require recipient domain to be local, or a domain we relay for
	require message = Relay not permitted
		domains = +local_domains : +relay_domains
		set acl_m_relayed = yes

	# use this only for emergencies or planned downtimes
	defer	message = Administratively set to defer
		domains = +defer_domains

	# Accept mail for postmaster without further policy checking,
	# for compliance with the RFCs
	accept local_parts = postmaster : abuse
		set acl_m2 = skip_spamd

	# Verify the recipient address for local domains, or require the
	# recipient domain to exist for remote domains
	require verify = recipient

	# If the destination domain is a domain we relay for,
	# check if the local part exists at the destination,
	# reject if it doesn't.
	# Accept if the destination cannot be reached within 30s.
	deny domains = +relay_domains
		! verify = recipient/callout=10s,maxwait=30s,defer_ok

	# Check whether the sender address domain exists
	require verify = sender

	accept

acl_check_connect:
	# Deny external connections to the internal bulk mail submission interface
	deny condition = ${if match_ip{$interface_address}{WIKI_INTERFACE}{true}{false}}
		! hosts = +wikimedia_nets

	accept

acl_check_data:
	# Let's trust local senders to not send out spam
	accept hosts = +wikimedia_nets
		set acl_m0 = trusted relay

	# Only run through SpamAssassin if requested for this domain and
	# the message is not too large
	accept condition = ${if >{$message_size}{400K}}

	# Skip if so requested
	accept condition = ${if eq{$acl_m2}{skip_spamd}}

	# Add spam headers if score >= 1
	warn spam = nonexistent:true
		condition = ${if >{$spam_score_int}{10}{1}{0}}
		set acl_m0 = $spam_score ($spam_bar)
		set acl_m1 = $spam_report

	<%- if @plain_auth_logins != {} -%>
	# Reject authenticated users whose From header does not match their login
	# username
	deny
		authenticated = *
		message = Unable to accept message: RFC5322.From does not match the auth user
		condition = ${if ! eqi {$authenticated_id} {${address:$header_from:}}}

	<%- end -%>
	# Reject spam at high scores (> 12)
	deny message = This message scored $spam_score spam points.
		spam = nonexistent/defer_ok
		condition = ${if >{$spam_score_int}{120}{1}{0}}

	accept

###########
# Routers #
###########

begin routers

# Route mail generated by MediaWiki differently
wiki_mail:
	driver = dnslookup
	domains = ! +local_domains
	condition = ${if and{{match_ip{$interface_address}{WIKI_INTERFACE}}{eqi{$header_X-Mailer:}{MediaWiki mailer}}}}
	transport = bulk_smtp
	ignore_target_hosts = <; 0.0.0.0 ; 127.0.0.0/8 ; 10/8 ; 172.16/12 ; 192.168/16
	no_verify

# Send donate.wikimedia.org and civicrm.wikimedia.org mail to Fundraising CiviCRM server
donate:
	driver = manualroute
	domains = +donate_domains
	route_list = * civi1002.frack.eqiad.wmnet byname
	transport = remote_smtp

# Route non-local domains (including +relay_domains) via DNS MX and A records
dnslookup:
	driver = dnslookup
	domains = ! +local_domains
	transport = ${if eq {$acl_m_relayed}{yes}{remote_smtp}{remote_smtp_signed}}
	ignore_target_hosts = <; 0.0.0.0 ; 127.0.0.0/8 ; 10/8 ; 172.16/12 ; 192.168/16
	cannot_route_message = Cannot route to remote domain $domain
	no_more

# Route bounce emails
mw_verp_api:
	driver = accept
	domains = +verp_domains
	condition = ${if match{$local_part}{VERP_BOUNCE_LOCALPART_REGEXP}{true}{false}}
	transport = mwverpbounceprocessor

eat:
	driver = redirect
	domains = +local_domains
	local_parts = no-reply-notifications
	data = :blackhole:

# Use the system aliasfile /etc/aliases for system domains
system_aliases:
	driver = redirect
	domains = +system_domains
	data = ${lookup{$local_part}lsearch{/etc/aliases}}
	pipe_transport = address_pipe
	allow_fail
	allow_defer
	forbid_file

# Use alias files /etc/exim4/aliases/$domain for domains like
# wikimedia.org, wikipedia.org, wiktionary.org etc.
aliases:
	driver = redirect
	domains = +local_domains
	require_files = CONFDIR/aliases/$domain_data
	data = ${lookup{$local_part}lsearch*{CONFDIR/aliases/$domain_data}}
	qualify_preserve_domain
	allow_fail
	allow_defer
	forbid_file
	include_directory = CONFDIR
	pipe_transport = address_pipe

# send phabricator.wm.org emails to Phabricator
phabricator:
	driver = manualroute
	domains = +phab_domains
	route_list = * phabricator.discovery.wmnet byname
	transport = remote_smtp

# Query the flat file of email addresses for the existence of the queue address
# $local_part@$domain, and manually route to the OTRS server if
# successful.  The flat file is generated using a systemd timer once per hour
otrs:
	driver = manualroute
	domains = +local_domains
	require_files = <%= @vrts_aliases_file %>
	condition = ${lookup{$local_part@$domain}lsearch*{<%= @vrts_aliases_file %>}}
	route_list = * ticket.discovery.wmnet  byname
	transport = remote_smtp

# Gsuite accounts
gsuite_account:
	driver = manualroute
	domains = wikimedia.org
	local_part_suffix = +*
	local_part_suffix_optional
	transport = remote_smtp
	route_list = *  aspmx.l.google.com

# Redirect postmaster@$domain if it hasn't been accepted before
postmaster:
	driver = redirect
	domains = +local_domains
	local_parts = postmaster
	data = postmaster@$primary_hostname
	cannot_route_message = Address $local_part@$domain does not exist

##############
# Transports #
##############

begin transports

# Generic remote SMTP transport

remote_smtp:
	driver = smtp
	multi_domain = false

remote_smtp_signed:
	driver = smtp
	multi_domain = false
	dkim_domain = <%= @dkim_domain %>
	dkim_selector = wikimedia
	dkim_private_key = ${if exists{/etc/exim4/dkim/${dkim_domain}-${dkim_selector}.key}{/etc/exim4/dkim/${dkim_domain}-${dkim_selector}.key}{0}}
	dkim_canon = relaxed

# Transport for sending out automated bulk (wiki) mail
# DKIM signed with wikimedia.org irrespective of actual sender domain
# but using a separate selector that only allows "wiki" as the local part
bulk_smtp:
	driver = smtp
	multi_domain = false
	interface = WIKI_INTERFACE
	helo_data = wiki-mail-<%= @site %>.wikimedia.org
	dkim_domain = <%= @dkim_domain %>
	dkim_selector = wiki-mail
	dkim_private_key = ${if exists{/etc/exim4/dkim/${dkim_domain}-${dkim_selector}.key}{/etc/exim4/dkim/${dkim_domain}-${dkim_selector}.key}{0}}
	dkim_canon = relaxed

# Generic pipe local delivery transport (for use by alias/forward files)

address_pipe:
	driver = pipe
	return_output

# POST VERP bounce emails to a MediaWiki 'bouncehandler' API
mwverpbounceprocessor:
	driver = pipe
	command = /usr/bin/curl -H 'X-Client-IP: <%= @facts['ipaddress'] %>' -H 'Host: <%= @verp_post_connect_server %>' <%= @verp_bounce_post_url %> -d "action=bouncehandler" --data-urlencode "email@-" -o /dev/null
	user = nobody
	group = nogroup

###############
# Retry rules #
###############

begin retry

# retry deliveries to *@alert.victorops.com every minute for 2 hours
alert.victorops.com	*	F,2h,1m
*			*	senders=wiki@wikimedia.org	F,1h,15m; G,8h,1h,1.5
*			*	F,2h,15m; G,16h,1h,1.5; F,4d,6h

#################
# Rewrite rules #
#################

begin rewrite

# Rewrite the envelope From for mails from internal servers in *.site.wmnet,
# as they are usually rejected by sender domain address verification.
*@*.eqiad.wmnet		root@wikimedia.org	F
*@*.codfw.wmnet		root@wikimedia.org	F
*@*.esams.wmnet		root@wikimedia.org	F
*@*.ulsfo.wmnet		root@wikimedia.org	F
*@*.eqsin.wmnet		root@wikimedia.org	F
*@*.drmrs.wmnet		root@wikimedia.org	F
*@*.magru.wmnet		root@wikimedia.org	F
# vim: set syntax=exim:
