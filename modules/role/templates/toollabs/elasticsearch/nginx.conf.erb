upstream elasticsearch {
  server 127.0.0.1:9200;
}

server {
  listen 80;

  location / {
    # Require auth for POST, PUT, DELETE, ... requests
    limit_except GET HEAD OPTIONS {
      auth_basic "<%= @auth_realm %>";
      auth_basic_user_file <%= @auth_file %>;
    }

    # CORS support
    # See http://enable-cors.org/server_nginx.html
    add_header 'Access-Control-Allow-Origin' "$http_origin";
    add_header 'Access-Control-Allow-Credentials' 'true';

    if ($request_method = 'OPTIONS') {
      # CORS preflight request
      add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
      add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since';
      add_header 'Access-Control-Max-Age' 1728000;
      add_header 'Content-Type' 'text/plain charset=UTF-8';
      add_header 'Content-Length' 0;
      return 204;
      break;
    }

    proxy_pass http://elasticsearch;
    proxy_redirect off;
    proxy_buffering off;
    proxy_http_version 1.1;
    proxy_set_header Connection "Keep-Alive";
    proxy_set_header Proxy-Connection "Keep-Alive";
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header Host $host;
    proxy_hide_header 'Access-Control-Allow-Origin';
  }
}
# vim:ft=nginx:sw=2:ts=2:sts=2:et:
