#!/usr/bin/env bash

set -e

download_dir="/srv/downloads/"
osmosis_dir="/srv/osmosis"
kartotherian_dir="/srv/deployment/kartotherian/deploy"
osm_bright_source_dir="${kartotherian_dir}/node_modules/osm-bright-source"
modules_with_sql="osm-bright-source kartotherian-geoshapes"
replicate_lock="${osmosis_dir}/replicate-osm.lck"
proxy=
database_host=localhost
log_file=/var/log/osm-initial-import.log
dump_date="latest"
state_file_url=
state_file="${osmosis_dir}/state.txt"

function show_help() {
  echo "osm-initial-import -d <date_of_import> [-H <database_host>] -p <password_file> -s <state_file_url> [-x <proxy>]"
  echo "  date_of_import: find the latest dump at https://planet.osm.org/pbf/"
  echo "  database_host: hostname of the postgresql database, default to `hostname -f`"
  echo "  password_file: a file containing the postgresql password of the osmimporter user"
  echo "  state_file_url: the URL to the state file corresponding to the dump, find the"
  echo "      correct one at http://planet.openstreetmap.org/replication/ (the state file"
  echo "      must be older than the dump)"
  echo "  proxy: proxy used to download PBF files"
  echo ""
  echo "WARNING: the import is going to run for a long, long time. You should probably run"
  echo "         this from inside screen or similar"
  echo ""
  echo "  example:"
  echo "      osm-initial-import \\"
  echo "        -d 160530 \\"
  echo "        -p ~/osmimporter_pass \\"
  echo "        -s http://planet.openstreetmap.org/replication/day/000/001/355.state.txt \\"
  echo "        -x webproxy.eqiad.wmnet:8080"
}

while getopts "d:hH:p:s:x:" opt; do
  case "${opt}" in
  d)  dump_date="${OPTARG}"
      ;;
  h)  show_help
      exit 0
      ;;
  H)  database_host="${OPTARG}"
      ;;
  p)  password_file="${OPTARG}"
      ;;
  s)  state_file_url="${OPTARG}"
      ;;
  x)  proxy="-x ${OPTARG}"
      ;;
  esac
done

filename="planet-${dump_date}.osm.pbf"
if [ "${state_file_url}" == "" ] ; then
  echo "state file URL is mandatory (-s)"
  exit -1
fi

function download_pbf() {
  echo "starting download of PBF from planet.openstreetmap.org"
  cd ${download_dir}
  curl ${proxy} -O https://planet.openstreetmap.org/pbf/${filename}.md5
  curl ${proxy} -O https://planet.openstreetmap.org/pbf/${filename}
  md5sum -c ${filename}.md5
  if [ $? -ne 0 ] ; then
    echo "Download of PBF file failed, md5sum is invalid"
    exit -1
  fi
  echo "download of PBF from planet.openstreetmap.org completed"
}

function reset_postgres() {
  echo "starting reset of prosgresql database"
  sudo -u postgres psql -d gis -c 'DROP TABLE IF EXISTS admin, planet_osm_line, planet_osm_point, planet_osm_polygon, planet_osm_roads, water_polygons;'
  ensure_sql_grants
  echo "reset of prosgresql database comleted"
}

function ensure_sql_grants() {
  cat /usr/local/bin/maps-grants.sql | sudo -u postgres psql -d gis -f -
}

function initial_osm_import() {
  echo "starting initial OSM import"
  cd ${osmosis_dir}
  PGPASSWORD="$(< ${password_file})" flock -xn ${replicate_lock} \
    sudo -E -u osmupdater osm2pgsql \
      --create --slim --flat-nodes nodes.bin -C 40000 --number-processes 8 \
      --hstore --host ${database_host} -U osmimporter -d gis \
      ${download_dir}/${filename} 2>&1 | tee ${log_file}

  if [ ${PIPESTATUS[0]} -ne 0 ]; then
    echo "osm2pgsql failed to complete initial import"
    exit -1
  fi
  echo "initial OSM import completed"
}

function import_water_lines() {
  echo "starting water line import"
  sudo -u osmupdater /usr/local/bin/import_waterlines create
  echo "water line import completed"

}

function custom_functions_and_indexes() {
  echo "starting creation of custom functions and indexes"
  sudo -u postgres psql -Xd gis -f "${osm_bright_source_dir}/node_modules/postgis-vt-util/lib.sql"

  for module in ${modules_with_sql}; do
    echo "executing SQL in: ${kartotherian_dir}/node_modules/${module}/sql"
    for sql_file in `ls ${kartotherian_dir}/node_modules/${module}/sql/*.sql`; do
      echo "  executing: ${sql_file}"
      sudo -u postgres psql -Xd gis -f ${sql_file}
    done
  done

  sudo -u postgres psql -d gis -c 'SELECT populate_admin();'
  echo "creation of custom functions and indexes completed"
}

function replicate_osm() {
  echo "starting replication from OSM"
  curl ${proxy} -o ${state_file} ${state_file_url}
  chown osmupdater:osmupdater ${state_file}
  sudo -u osmupdater /usr/local/bin/replicate-osm >> /tmp/osm2pgsql-initial.log
  echo "replication from OSM completed"
}

function cleanup() {
  echo "starting cleanup"
  rm "${download_dir}/${filename}.md5"
  rm "${download_dir}/${filename}"
  echo "cleanup completed"
}

download_pbf
reset_postgres
ensure_sql_grants
initial_osm_import
import_water_lines
custom_functions_and_indexes
# ensure grants again as some other tables have been created
ensure_sql_grants
replicate_osm
cleanup
