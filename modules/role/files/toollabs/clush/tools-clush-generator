#!/usr/bin/python3
"""
Simple script that generates a YAML file classifying all instances
on the tools project into groups based on the role they perform.

This YAML file can then be read by `tools-clush-interpreter` to
list instances within a group. This can be used by `clush` to
allow arbitrary command execution on targeted list of instances.

This is run in a cron every hour.
"""
import json
import yaml
import argparse
from urllib.request import urlopen


# Maps prefixes to hostgroup names
TOOLS_PREFIX_CLASSIFIER = {
    'webgrid-lighttpd-12': 'webgrid-lighttpd-precise',
    'webgrid-lighttpd-14': 'webgrid-lighttpd-trusty',
    'webgrid-generic': 'webgrid-generic',
    'webgrid-': 'webgrid',
    'exec-': 'exec',
    'exec-12': 'exec-precise',
    'exec-14': 'exec-trusty',
    'proxy-': 'webproxy',
    'checker-': 'checker',
    'redis-': 'redis',
    'services-': 'services',
    'bastion-': 'bastion',
    'cron-': 'cron',
    'grid-master': 'grid-master',
    'grid-shadow': 'grid-shadow',
    'mail': 'mail',
    'static-': 'static',
    'worker': 'k8s-worker',
    'k8s-master': 'k8s-master',
    'flannel-etcd': 'flannel-etcd',
    'k8s-etcd': 'k8s-etcd',
    'logs': 'logs',
    'precise-dev': 'precise-dev',
    'prometheus': 'prometheus',
    '': 'all',
}


def get_hostgroups(classifier):
    hostgroups = {name: [] for name in classifier.values()}

    api_url = 'https://wikitech.wikimedia.org/w/api.php' \
            '?action=query&list=novainstances&niregion=eqiad&format=json' \
            '&niproject=tools'

    data = json.loads(urlopen(api_url).read().decode('utf-8'))

    for instance in data['query']['novainstances']:
        name = instance['name']
        for prefix in classifier:
            if name.startswith('tools-' + prefix):
                role = classifier[prefix]
                hostgroups[role].append(name + ".tools.eqiad.wmflabs")

    return hostgroups


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
        'outputpath',
        help='Path to output hostgroup to host mappings'
    )
    args = parser.parse_args()

    hostgroups = get_hostgroups(TOOLS_PREFIX_CLASSIFIER)
    with open(args.outputpath, 'w') as f:
        f.write(yaml.safe_dump(hostgroups, default_flow_style=False))
