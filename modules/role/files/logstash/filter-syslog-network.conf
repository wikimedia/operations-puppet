# vim:set sw=2 ts=2 sts=2 et
# Parse Network related syslog
# Note: Juniper prepend its messages with "%-"
filter {
  if [type] == "syslog" and [facility_label] == "local3"{
    # Parse the username tried as well as the source IP
    if [program] == "sshd" {
      grok {
        match => ["message", "%-SSHD_LOGIN_FAILED: Login failed for user '%{USER:ssh_username}' from host '%{IP:ssh_client_ip}'"]
        add_field => { "login_status" => "failed" }
      }
    }
    # Parse Juniper RT_FLOW
    # Using https://github.com/logstash-plugins/logstash-patterns-core/blob/master/patterns/junos
    if [program] == "RT_FLOW" {
      grok {
        match => { "message" => [ "%-%{RT_FLOW3}", "%-%{RT_FLOW2}" ] }
      }
    }
    # Parse Juniper BGP messages
    if [program] == "rpd" {
      grok {
        match => ["message", "%-: bgp_process_caps: mismatch NLRI with %{IP:peer_ip} \(External AS %{NUMBER:peer_asn}\)"]
        add_field => { "protocol" => "bgp",
                       "bgp_status" => "mismatch_nlri" }
      }
      grok {
        match => ["message", "%-: bgp_listen_accept: Connection attempt from unconfigured neighbor: %{IP:unconfigured_neighbor_ip}"]
        add_field => { "protocol" => "bgp",
                       "bgp_status" => "unconfigured_neighbor" }
      }
    }
  }
}
