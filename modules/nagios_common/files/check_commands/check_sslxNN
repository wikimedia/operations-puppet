#!/usr/bin/perl

# nagios: -epn
# icinga: -epn

# Copyright 2014 Faidon Liambotis
# Copyright 2014 Wikimedia Foundation, Inc.
#
# This nagios plugin is free software, and comes with ABSOLUTELY NO WARRANTY.
# It may be used, redistributed and/or modified under the terms of the GNU
# General Public Licence (see http://www.fsf.org/licensing/licenses/gpl.txt).
#
# Example usage:
#   check_sslxNN -H text-lb.wikimedia.org -p 443 --issuer GlobalSign
#   check_sslxNN -H cp1036.eqiad.wmnet -p 443 --warning 30 --critical 60

package Local::CheckSSL::xNN;

use constant DOMAINS => qw(
  wikipedia.org
  mediawiki.org
  wikibooks.org
  wikidata.org
  wikimediafoundation.org
  wikimedia.org
  wikinews.org
  wikiquote.org
  wikisource.org
  wikiversity.org
  wikivoyage.org
  wiktionary.org
);

use strict;
use warnings;
use Nagios::Plugin::Functions qw(nagios_exit max_state %STATUS_TEXT);

# this is required to be in the same directory as us
require 'check_ssl';    ## no critic

sub check_ssl {
    local @ARGV = @_;
    Nagios::Plugin::Functions::_fake_exit(1);
    my $e = Local::CheckSSL->run();
    Nagios::Plugin::Functions::_fake_exit(0);
    return $e;
}

sub run {
    my ( @exits, @lines );

    foreach my $domain (DOMAINS) {
        foreach my $prefix ( '', 'en.', 'en.m.' ) {
            my $cn = $prefix . $domain;

            my @argv = ( @ARGV, '--cn', $cn );
            my $e = check_ssl(@argv);

            my $msg = $e->message;
            $msg =~ s/^\w+ (.+)\n/$1/;

            # prepend with $cn and format in columns to ease debugging
            $msg = sprintf( '%-30s %s', $cn, $msg );

            push @lines, $msg;
            push @exits, $e->return_code;
        }
    }

    # build a one-line summary (e.g. "70 OK, 2 WARNING") and set it first
    my %ec;
    $ec{$_}++ foreach @exits;
    my @summary = map { $ec{$_} . ' ' . $STATUS_TEXT{$_} } sort keys %ec;
    unshift @lines, join( ', ', @summary );

    nagios_exit( max_state(@exits), join( "\n", @lines ) );

    return;
}

# call run() if are we running interactively or via ePN
__PACKAGE__->run() if ( !caller || (caller)[0] eq 'Embed::Persistent' );

1;

# vim: ts=4 sw=4 sts=4 et
