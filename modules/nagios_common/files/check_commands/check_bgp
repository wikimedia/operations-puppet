#!/usr/bin/perl

# Copyright 2016 Faidon Liambotis
# Copyright 2016 Wikimedia Foundation, Inc.
#
# This nagios plugin is free software, and comes with ABSOLUTELY NO WARRANTY.
# It may be used, redistributed and/or modified under the terms of the GNU
# General Public Licence (see http://www.fsf.org/licensing/licenses/gpl.txt).
#
# Example usage:
#   check_bgp -H cr1-eqdfw.wikimedia.org -c s3cr3t
#   check_bgp -H cr1-eqdfw.wikimedia.org -c s3cr3t -t 3600
#   check_bgp -H cr1-eqdfw.wikimedia.org -c s3cr3t ---critasn 1299,2914,6461 --vendor juniper

# this is an OO-like representation of our SNMP BGP session It features a
# constructor ("new") and two public methods: "list" and "get", that list all
# BGP peers and fetch attributes for them, respectively. Its main benefit is
# that it's lazy, i.e. it will fetch subtrees of the SNMP tree on-demand, as
# attributes are requested, to avoid excessive round-trips.
package Local::CheckBGP::SNMP;

use strict;
use warnings;
use Net::SNMP;
use Socket qw(AF_INET6 inet_ntop);

my %name2oid = (

    # BGP4-MIB
    bgp                       => '1.3.6.1.2.1.15',
    bgpPeerTable              => '1.3.6.1.2.1.15.3',
    bgpPeerEntry              => '1.3.6.1.2.1.15.3.1',
    bgpPeerState              => '1.3.6.1.2.1.15.3.1.2',
    bgpPeerRemoteAs           => '1.3.6.1.2.1.15.3.1.9',
    bgpPeerFsmEstablishedTime => '1.3.6.1.2.1.15.3.1.16',

    # Juniper BGP MIB
    jnxBgpM2                       => '1.3.6.1.4.1.2636.5.1.1',
    jnxBgpM2Peer                   => '1.3.6.1.4.1.2636.5.1.1.2',
    jnxBgpM2PeerData               => '1.3.6.1.4.1.2636.5.1.1.2.1',
    jnxBgpM2PeerTable              => '1.3.6.1.4.1.2636.5.1.1.2.1.1',
    jnxBgpM2PeerState              => '1.3.6.1.4.1.2636.5.1.1.2.1.1.1.2',
    jnxBgpM2PeerRemoteAs           => '1.3.6.1.4.1.2636.5.1.1.2.1.1.1.13',
    jnxBgpM2PeerFsmEstablishedTime => '1.3.6.1.4.1.2636.5.1.1.2.4.1.1.1',
);

use constant STATE => qw(
  None     Idle        Connect Active
  OpenSent OpenConfirm Established
);

# the constructor; accepts a list of arguments, all of which except one are
# passed as-is to Net::SNMP->session(). The only one that's ours is "vendor"
# which varies the MIB between different vendor MIBs (currently Cisco's and
# Juniper's)
sub new {
    my $class = shift;
    my %opts  = @_;

    my $self = {};
    bless $self, $class;

    my $vendor = delete $opts{vendor};
    if ( not defined $vendor or $vendor =~ /(bgp4|cisco)/ ) {
        $self->{_prefix} = 'bgp';
    }
    elsif ( $vendor =~ /(juniper)/ ) {
        $self->{_prefix} = 'jnxBgpM2';
    }
    else {
        return ( undef, "Unrecognized vendor $vendor" );
    }

    my @snmp_opts = %opts;
    my ( $session, $error ) = Net::SNMP->session(@snmp_opts);

    if ( defined $session ) {
        $self->{session} = $session;

        $error = $self->fill_oid('PeerState');
        if ($error) {
            $self->{session}->close();
            delete $self->{session};
            return ( undef, $error );
        }

        return ( $self, $error );

    }
    else {
        return ( undef, $error );
    }
}

# internal class function, used by parse_key(); this is fairly opaque and
# complicated, but essentially, parses object names such as:
# * 0.1.80.249.209.176.1.80.249.212.49
# * 0.2.32.1.7.248.0.1.0.0.0.0.165.4.56.33.0.1.2.32.1.7.248.0.1.0.0.165.0.0.32.1.48.0.1
# ...into their respective IPv4/IPv6 and returns only the remote ends
sub parse_jnx {
    my @a = split( /\./, shift );
    shift @a;

    my $eat = sub {
        my $afi = shift @a;

        # IPv4
        if ( $afi == 1 ) {
            return join( '.', splice( @a, 0, 4 ) );
        }

        # IPv6
        elsif ( $afi == 2 ) {
            return inet_ntop( AF_INET6, pack( "(C2)*", splice( @a, 0, 16 ) ) );
        }
    };

    return ( &$eat, &$eat );
}

# internal class function; returns the stripped/clean-up form of an object name
# in the SNMP tree. Currently it just strips the OID prefix and cleans up the
# neighbor's IP address in the jnxBgpM2 case.
sub parse_key {
    my ( $key, $oid ) = ( shift, shift );
    $key =~ s/^\Q${oid}.\E//;
    if ( $oid =~ /^\Q$name2oid{jnxBgpM2Peer}\E/ ) {
        my ( $local, $remote ) = parse_jnx($key);
        return $remote;
    }
    else {
        return $key;
    }
}

# internal class function; given an object's value, returns its cleaned up
# form; currently just replaces the BGP peer states into their string
# equivalents
sub parse_value {
    my ( $value, $oid ) = ( shift, shift );

    if (   $oid eq $name2oid{bgpPeerState}
        or $oid eq $name2oid{jnxBgpM2PeerState} )
    {
        $value = (STATE)[$value];
    }

    return $value;
}

# internal method that actually does the heavy-lifting of the SNMP polling.  It
# takes an attribute name as an argument (e.g. "PeerState") and fills the
# $self->{_peers} structure, keyed by BGP peer and with cleaned up keys and
# values. It's called lazily when each attribute is needed and hence it doesn't
# exclusively manage the structure, and it's only called once per sub-tree to
# avoid extra work.
sub fill_oid {
    my $self = shift;
    my $attr = shift;

    my $identifier = $self->{_prefix} . $attr;
    my $oid        = $name2oid{$identifier};
    my $response   = $self->{session}->get_table(
        -baseoid        => $oid,
        -maxrepetitions => 20,
    ) or return $self->{session}->error;

    while ( my ( $key, $value ) = each %{$response} ) {
        my $peer = parse_key( $key, $oid );
        my $value = parse_value( $value, $oid );
        $self->{_peers}{$peer}{$attr} = $value;
    }

    $self->{_filled}{$attr} = 1;
    return;
}

# public method; simply returns a list of all BGP peers
sub list {
    my $self = shift;
    return keys %{ $self->{_peers} };
}

# public method; given a peer's name (= IP) and an attribute (such as
# "PeerState"), returns its value, taking care of actually performing a
# tree-wide SNMP query for the attribute, if needed.
sub get {
    my $self = shift;
    my ( $peer, $attr ) = ( shift, shift );

    if ( !exists $self->{_filled}{$attr} ) {
        $self->fill_oid($attr);
    }

    return $self->{_peers}{$peer}{$attr};
}

1;

# this is the actual check, formatted as a package (instead of main) for
# cleaner separation and ePN compatibility.
package Local::CheckBGP;

use strict;
use warnings;
use Nagios::Plugin::Getopt;
use Nagios::Plugin::Functions;
use Time::Duration;

# this not exactly great; this isn't a very OO-package, but ePN restricts the
# use of global variables, so package variables should do, for now.
our ( $ng,   $bgp,  %critASN );
our ( @crit, @warn, @ok );

sub init {
    ( @crit, @warn, @ok ) = ();

    $ng = Nagios::Plugin::Getopt->new(
        usage   => 'Usage: %s -H <host> --c <community> [...]',
        version => 1,
        blurb   => 'Checks the state of a router\'s BGP peerings',
    );

    $ng->arg(
        spec     => 'host|H=s',
        help     => 'Hostname or IP address of the server to check against',
        required => 1,
    );
    $ng->arg(
        spec    => 'port|p=i',
        help    => 'SNMP port, default: %s',
        default => 161,
    );
    $ng->arg(
        spec    => 'community|c=s',
        help    => 'SNMP community to use, default: %s',
        default => 'public',
    );
    $ng->arg(
        spec    => 'snmpver=i',
        help    => 'SNMP version to use (1 or 2), default: %s',
        default => 2,
    );
    $ng->arg(
        spec    => 'vendor=s',
        help    => 'Use a different vendor MIB (bgp4, juniper), default: %s',
        default => 'bgp4',
    );
    $ng->arg(
        spec    => 'threshold|t=i',
        help    => 'Time threshold after which to warn, default: %s',
        default => 0,
    );
    $ng->arg(
        spec    => 'critasn=s',
        help    => 'Comma-separated list of ASNs to raise CRITICAL for',
        default => '',
    );

    $ng->getopts;

    # split critasn into a hash, so that we can check against it with "exists"
    %critASN = map { $_ => 1 } split( /,/, $ng->critasn );

    return;
}

sub collect {

    # instantiate our BGP SNMP session class, supplying a combination of
    # Net::SNMP arguments and our very own arguments to the class
    ( $bgp, my $error ) = Local::CheckBGP::SNMP->new(
        -hostname  => $ng->host,
        -community => $ng->community,
        -port      => $ng->port,
        -version   => $ng->snmpver,
        vendor     => $ng->vendor,
    );
    unless ( defined $bgp ) {
        nagios_exit( CRITICAL, $error );
    }

    my %counts = (qw/up 0 down 0 shutdown 0/);

    # iterate over the list of the BGP peerings and:
    # - increment up/down/shutdown counters (for OK/verbose)
    # - raise WARN/CRIT in case of failures
    #
    # Note that $bgp is lazy: get() will always respond to queries about
    # attributes, but it will perform SNMP queries as necessary. This means
    # that care must be taken to avoid issuing get()s for no reason (e.g. to
    # fetch values that are only used conditionally.
    foreach my $peer ( $bgp->list() ) {
        my $state = $bgp->get( $peer, 'PeerState' );

        if ( $state eq 'Established' ) {
            $counts{up}++;
        }
        elsif ( $state eq 'Idle' ) {
            $counts{shutdown}++;
        }
        else {
            $counts{down}++;
            my $asn = $bgp->get( $peer, 'PeerRemoteAs' );
            my $afi = $peer =~ /:/ ? 'IPv6' : 'IPv4';
            my $astext = "AS$asn/$afi: $state";

            # raise a CRIT if the peer's ASN is in the "critical ASN" list
            if ( exists $critASN{$asn} ) {
                push @crit, $astext;
                next;
            }

            # otherwise, raise a WARN if this peer has been down for some time
            my $duration = $bgp->get( $peer, 'PeerFsmEstablishedTime' );
            if ( $duration > $ng->threshold ) {
                my $human_duration = concise( duration($duration) );
                push @warn, "$astext (for $human_duration)";
            }
        }
    }

    # returns something like: "up: 220, down: 1, shutdown: 0"
    push @ok, join( ', ', map { "$_: $counts{$_}" } qw/up down shutdown/ );
    return;
}

sub run {
    init;
    collect;

    print join( "\n", @ok ), "\n" if $ng->verbose;

    nagios_exit(
        check_messages(
            critical => \@crit,
            warning  => \@warn,
            ok       => \@ok,
            join     => ', ',
        )
    );
    return;
}

# call run() if are we running interactively or via ePN
__PACKAGE__->run() if ( !caller || (caller)[0] eq 'Embed::Persistent' );

1;

# vim: ts=4 sw=4 sts=4 et
