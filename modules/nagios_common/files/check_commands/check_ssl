#!/usr/bin/perl

# Copyright 2014-2015 Faidon Liambotis
# Copyright 2014-2015 Wikimedia Foundation, Inc.
#
# This nagios plugin is free software, and comes with ABSOLUTELY NO WARRANTY.
# It may be used, redistributed and/or modified under the terms of the GNU
# General Public Licence (see http://www.fsf.org/licensing/licenses/gpl.txt).
#
# Example usage:
#   check_ssl -H test.example.org -p 443
#   check_ssl -H text-lb.wikimedia.org -p 443 --cn en.wikipedia.org --warning 30 --critical 15 --issuer GlobalSign

package Local::CheckSSL;

use strict;
use warnings;
use Nagios::Plugin::Getopt;
use Nagios::Plugin::Functions;
use Net::SSLeay;
use IO::Socket::SSL;
use Socket qw(AF_INET AF_INET6 AF_UNSPEC);
use Date::Parse;
use POSIX qw(strftime);

# this not exactly great; this isn't a very OO-package, but ePN restricts the
# use of global variables, so package variables should do, for now.
our ( $ng, $cn );
our ( $client, @crit, @warn, @ok, @verbose );

sub init {
    ( @crit, @warn, @ok, @verbose ) = ();

    $ng = Nagios::Plugin::Getopt->new(
        usage   => 'Usage: %s -H <host> -p <port> -w <days> -c <days> [...]',
        version => 1,
        blurb   => 'Connects to a host and checks their SSL/TLS certificate',
    );

    $ng->arg(
        spec     => 'host|H=s',
        help     => 'Hostname or IP address of the server to check against',
        required => 1,
    );
    $ng->arg(
        spec     => 'port|p=i',
        help     => 'TCP port',
        required => 1,
    );
    $ng->arg(
        spec => 'cn|n=s',
        help => 'commonName to check for (default: hostname)',
    );
    $ng->arg(
        spec => 'protocol|P=s',
        help =>
'use the specific protocol (http|xmpp|ftp|smtp|imap|pop3|snmp|ldap|sip), default: %s',
        default => 'http',
    );
    $ng->arg(
        spec => 'ipv4|4',
        help => 'force IPv4',
    );
    $ng->arg(
        spec => 'ipv6|6',
        help => 'force IPv6',
    );
    $ng->arg(
        spec    => 'rootcert|r=s',
        help    => 'root certificate or directory (default: %s)',
        default => '/etc/ssl/certs',
    );
    $ng->arg(
        spec => 'ssl|S=s',
        help => 'force SSL/TLS version (SSLv3, TLSv1, TLSv1.1 etc)',
    );
    $ng->arg(
        spec    => 'noverify|no-verify',
        help    => 'do not verify hostname & authority (default: verify)',
        default => 0,
    );
    $ng->arg(
        spec    => 'nosni|no-sni',
        help    => 'do not use SNI (default: use SNI)',
        default => 0,
    );
    $ng->arg(
        spec => 'authalg=s',
        help => 'authentication algorithm (DSS, RSA, ECDSA)',
    );
    $ng->arg(
        spec => 'subject|s=s',
        help => 'subject name to match against',
    );
    $ng->arg(
        spec => 'issuer|i=s',
        help => 'issuer name to match against',
    );

    $ng->arg(
        spec    => 'warning|w=i',
        help    => 'min validity days left to issue a WARNING (default: %s)',
        default => 30,
    );
    $ng->arg(
        spec    => 'critical|c=i',
        help    => 'min validity days left to issue a CRITICAL (default: %s)',
        default => 15,
    );

    $ng->getopts;
    $cn = $ng->cn ? $ng->cn : $ng->host;

    # initialize Net::SSLeay
    Net::SSLeay::load_error_strings();
    Net::SSLeay::SSLeay_add_ssl_algorithms();
    Net::SSLeay::randomize();
}

sub ssl_connect {
    my %sopts = ();

    if ( $ng->ipv4 && $ng->ipv6 ) {
        $sopts{Domain} = AF_UNSPEC;
    }
    elsif ( $ng->ipv4 ) {
        $sopts{Domain} = AF_INET;
    }
    elsif ( $ng->ipv6 ) {
        $sopts{Domain} = AF_INET6;
    }

    $sopts{PeerHost}     = $ng->host;
    $sopts{PeerPort}     = $ng->port;
    $sopts{SSL_version}  = $ng->ssl if $ng->ssl;
    $sopts{timeout}      = $ng->timeout;
    $sopts{SSL_hostname} = $cn;

    # Note: This might seem insecure, but we actually rely on the rest of our
    # custom ssl_* functions to do all the verifications. Plus this is monitoring
    # We explicity disable peer verification to allow the connecting phase to continue
    # and retrieve certificates.
    # This was added to override the default of IO::Socket::SSL version 1.950 which is
    # SSL_VERIFY_PEER
    $sopts{SSL_verify_mode} = SSL_VERIFY_NONE;

    # not setting this (or setting to undef) does *not* disable SNI;
    # only setting to empty string does (this is documented)
    if ( $ng->nosni ) {
        $sopts{SSL_hostname}      = '';
        $sopts{SSL_verifycn_name} = $cn;
    }

    if ( defined $ng->authalg ) {
        $sopts{SSL_cipher_list} = 'a' . uc( $ng->authalg );
        $sopts{SSL_cipher_list} .= ':!eNULL';
    }

    if ( -d $ng->rootcert ) {
        $sopts{'SSL_ca_path'} = $ng->rootcert;
    }
    else {
        $sopts{'SSL_ca_file'} = $ng->rootcert;
    }

    # we use IO::Socket::SSL for its verify hostname routines that are
    # complicated enough to handles SANs, wildcards etc., depending on the given
    # protocol (e.g. RFC 2818 rules for HTTPS)
    $client = IO::Socket::SSL->new(%sopts)
      or nagios_exit( CRITICAL, 'failed to connect or SSL handshake:' . $@ );
}

sub ssl_verify {
    my $name    = $client->peer_certificate('commonName');
    my $subject = $client->peer_certificate('subject');
    my $issuer  = $client->peer_certificate('issuer');
    my @sans    = $client->peer_certificate('subjectAltNames');

    # handle Net::SSLeay's list of tuples (get even elements, ignore odd)
    @sans = @sans[ grep { $_ & 1 } 1 .. $#sans ];
    my $sans = join(q{, }, @sans);

    # commonName + SANs-except-commonName
    my @names = ( $name, grep { !/^\Q$name\E$/ } @sans );
    my $names = join(q{, }, @names);

    unless ( $ng->noverify ) {
        $client->verify_hostname( $cn, $ng->protocol )
          or push @crit, "failed to verify $cn against $names";
    }

    push @verbose, "Certificate subject: $subject";
    push @verbose, "Certificate issuer: $issuer";
    push @verbose, "Certificate SANs: $sans";

    if ( $ng->subject && $subject !~ /\Q$ng->{subject}\E/ ) {
        push @crit, "Certificate subject $subject didn't match argument";
    }
    if ( $ng->issuer && $issuer !~ /\Q$ng->{issuer}\E/ ) {
        push @crit, "Certificate issuer $issuer didn't match argument";
    }
}

sub ssl_expiry_check {
    my $name = $client->peer_certificate('commonName');

    # We fallback to lower-level Net::SSLeay for extracting information about
    # the certificate itself, such as expiry time, subject names etc.
    # This uses an *internal* Net::SSLeay function so it's prone to failure.
    my $ssl  = $client->_get_ssl_object;
    my $x509 = Net::SSLeay::get_peer_certificate($ssl);

    my $notBefore = str2time(
        Net::SSLeay::P_ASN1_UTCTIME_put2string(
            Net::SSLeay::X509_get_notBefore($x509)
        )
    );
    my $notAfter = str2time(
        Net::SSLeay::P_ASN1_UTCTIME_put2string(
            Net::SSLeay::X509_get_notAfter($x509)
        )
    );
    my $now = time;
    my $expiry = strftime( '%Y-%m-%d %H:%M:%S +0000', gmtime($notAfter) );
    $expiry .= ' (expires in ' . int( ( $notAfter - $now ) / 86400 ) . ' days)';

    if ( $notBefore > $now ) {
        push @crit, "Certificate $name not yet valid";
    }
    elsif ( $notAfter < $now ) {
        push @crit, "Certificate $name expired";
    }
    elsif ( $notAfter - $now < $ng->critical * 86400 ) {
        push @crit, "Certificate $name valid until $expiry";
    }
    elsif ( $notAfter - $now < $ng->warning * 86400 ) {
        push @warn, "Certificate $name valid until $expiry";
    }
    else {
        push @ok, "Certificate $name valid until $expiry";
    }
}

sub run {
    init;
    ssl_connect;
    ssl_verify;
    ssl_expiry_check;

    print join( "\n", @verbose ), "\n" if $ng->verbose;

    nagios_exit(
        check_messages(
            critical => \@crit,
            warning  => \@warn,
            ok       => \@ok,
            join     => ';',
        )
    );
}

# call run() if are we running interactively or via ePN
__PACKAGE__->run() if ( !caller || (caller)[0] eq 'Embed::Persistent' );

1;

# vim: ts=4 sw=4 sts=4 et
