<%#- SPDX-License-Identifier: Apache-2.0 -%>
###
## kubernetes system config
##
## The following values are used to configure the kube-apiserver
##
#
<%-
daemon_args = [
  "--v=#{@v_log_level}",
  "--allow-privileged=#{@allow_privileged}",
  "--etcd-servers=#{@etcd_servers}",
  "--tls-cert-file=#{@apiserver_cert['chained']}",
  "--tls-private-key-file=#{@apiserver_cert['key']}",
  "--service-account-key-file=#{@sa_cert['cert']}",
]

if @ipv6dualstack
  daemon_args.push("--service-cluster-ip-range=#{@service_cluster_cidr['v4']},#{@service_cluster_cidr['v6']}")
else
  daemon_args.push("--service-cluster-ip-range=#{@service_cluster_cidr['v4']}")
end

if @additional_sa_certs
  @additional_sa_certs.each do |v|
    unless v == @sa_cert['cert']
      daemon_args.push("--service-account-key-file=#{v}")
    end
  end
end

if @service_node_port_range
  daemon_args.push("--service-node-port-range=#{@service_node_port_range.join('-')}")
end

if @admission_plugins
  @admission_plugins.each do |k, v|
    if !v.empty?
      daemon_args.push("--#{k}-admission-plugins=#{v.sort.join(',')}")
    end
  end
end

if @admission_configuration
  daemon_args.push("--admission-control-config-file=#{@admission_configuration_file}")
end

if @enable_audit_log
  daemon_args.push("--audit-policy-file=#{@audit_policy_file}")
  daemon_args.push("--audit-log-path=/var/log/kubernetes/audit.log")
  daemon_args.push("--audit-log-compress")
  daemon_args.push("--audit-log-maxsize=100M")
  daemon_args.push("--audit-log-maxbackup=10")
end

# Enable node authorizer
daemon_args.push("--authorization-mode=Node,RBAC")

# From 1.20 changelog:
# TokenRequest and TokenRequestProjection are now GA features. The following flags are required by the API server:
#  --service-account-issuer, should be set to a URL identifying the API server that will be stable over the cluster lifetime.
#  --service-account-key-file, set to one or more files containing one or more public keys used to verify tokens.
#  --service-account-signing-key-file, set to a file containing a private key to use to sign service account tokens. Can be the same file given to kube-controller-manager with --service-account-private-key-file.
daemon_args.push("--service-account-issuer=#{@service_account_issuer}")
daemon_args.push("--service-account-signing-key-file=#{@sa_cert['key']}")
daemon_args.push("--client-ca-file=#{@apiserver_cert['chain']}")
daemon_args.push("--kubelet-client-key=#{@kubelet_client_cert['key']}")
daemon_args.push("--kubelet-client-certificate=#{@kubelet_client_cert['cert']}")

# https://v1-23.docs.kubernetes.io/docs/tasks/extend-kubernetes/configure-aggregation-layer
daemon_args.push("--requestheader-username-headers=X-Remote-User")
daemon_args.push("--requestheader-group-headers=X-Remote-Group")
daemon_args.push("--requestheader-extra-headers-prefix=X-Remote-Extra-")
daemon_args.push("--requestheader-client-ca-file=#{@frontproxy_cert['chain']}")
daemon_args.push("--requestheader-allowed-names=front-proxy-client")
daemon_args.push("--proxy-client-cert-file=#{@frontproxy_cert['cert']}")
daemon_args.push("--proxy-client-key-file=#{@frontproxy_cert['key']}")
-%>
DAEMON_ARGS="<%= daemon_args.sort.join(" \\\n ") %>"
