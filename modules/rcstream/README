RCStream
-------

This module contains a simple and self-contained software stack for streaming
recent changes from a MediaWiki instance. It subscribes to the 'rc' topic
of a Redis server and forwards incoming messages to web clients via socket.io,
a convenience layer for the WebSockets protocol. Each websockets server instance
is implemented in Python. Nginx serves as a load-balancer and reverse proxy.

To use this module, you must first configure MediaWiki to publish recent
changes to a Redis instance:

    $wgRCFeeds['redis'] = array(
         'formatter' => 'JSONRCFeedFormatter',
         'uri'       => "redis://rcstream.eqiad.wmnet:6379/rc.$wgDBname",
    );

The following example shows how to configure Nginx to reverse-proxy three
websockets server instances, running locally on ports 10080-10082:

    $backends = [ 10080, 10081, 10082 ]

    class { '::rcstream':
      redis        => 'redis://rcstream.eqiad.wmnet:6379',
      bind_address => '127.0.0.1',
      ports        => $backends,
    }

    class { '::rcstream::proxy':
      server_name => 'stream.wikimedia.org',
      location    => '/rc',
      backends    => $backends,
    }

To utilize the stream in the context of a web application, you will need
to load socket.io's JavaScript library and subscribe to the stream. For example:

  <html>
    <meta charset="utf-8">
    <script src="static/socket.io.js"></script>
    <script>
      var socket = io.connect( 'stream.wikimedia.org/rc' );

      socket.on( 'connect', function () {
          // Subscribe to recent changes from the bg.wikipedia.org and meta.wikimedia.org
          socket.emit( 'subscribe', [ 'bgwiki', 'metawiki' ] );
      } );

      socket.on( 'change', function ( data ) {
         console.log( 'title: ' + data.title );
      } );
    </script>
  </html>

socket.io may be obtained from <http://socket.io/>.

TODOs:
* SSL support (see <http://siriux.net/2013/06/nginx-and-websockets/>).
* Configure Nginx to serve static assets.
