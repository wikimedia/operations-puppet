# Number of worker processes to spawn.
# Set to 0 to run everything in a single process without clustering.
# Use 'ncpu' to run as many workers as there are CPU units
num_workers: ncpu

# Log error messages and gracefully restart a worker if v8 reports that it
# uses more heap (note: not RSS) than this many mb.
worker_heap_limit_mb: 300

# Logger info
logging:
  name: <%= @title %>
  level: warn
  streams:
  # Use gelf-stream -> logstash
  - type: gelf
    host: <%= scope.lookupvar('service::configuration::logstash_host') %>
    port: <%= scope.lookupvar('service::configuration::logstash_port') %>
  - type: file
    path: <%= @local_logfile %>
    level: info

# Statsd metrics reporter
metrics:
  type: statsd
  host: <%= scope.lookupvar('service::configuration::statsd_host') %>
  port: <%= scope.lookupvar('service::configuration::statsd_port') %>

services:
  - name: <%= @title %>
    # a relative path or the name of an npm package, if different from name
    module: ./src/app.js
    # optionally, a version constraint of the npm package
    # version: ^0.4.0
    # per-service config
    conf:
      # the port to bind to
      port: <%= @port %>
      # IP address to bind to, all IPs by default
      # interface: localhost # uncomment to only listen on localhost
      # allow cross-domain requests to the API (default '*')
      cors: '*'
      # to disable use:
      # cors: false
      # to restrict to a particular domain, use:
      # cors: restricted.domain.org
      # URL of the outbound proxy to use (complete with protocol)
      <% if scope.lookupvar('service::configuration::http_proxy') %>
      proxy: <%= scope.lookupvar('service::configuration::http_proxy') %>
      <% else %>
      # proxy: http://my.proxy.org:8080
      <% end %>
