#!/bin/bash
# release_script template for service::node services
# Copyright (C) 2015 Giuseppe Lavagetto
#
# This script is supposed to be run locally on one server
# and do the release procedure and exit with an exit code of 0,1, or 2
# depending on the result of the release of the code.
#
# This can be useful when deploying services, to be sure a rolling restart
# happens only after the code has been fully and correctly deployed to
# each node.
#
# What this script does:
# - executes a tagged puppet run that should only touch the config file,
#   refreshing it if needed
# - Releases the code at the desired git ref
# - Restarts the service
# - Checks the health of the service until it is ok
# If more than 10 attempts to check the health fail, we bail out and declare
# this a failure.
#
# This script is local to the server and needs the deployer just to be able to:
# - do a tagged puppet run as the sudo user
# - restart the service (via sudo)
# - deploy the code in git
set -u
set -e

function usage {
    echo "$0 - deployment helper script"
    echo "Usage: $0 <git-ref>"
}



# Maximum number of retries of the health check before declaring failure
MAX_RETRIES=10
# Seconds to wait between retries
SLEEP_INTERVAL=5

# Code directory
REL_CODE_DIR="<%= @release_dir %>"

# Provider of the code, for now only 'git' is supported.
REL_PROVIDER="<%= @provider %>"

# Url to pass to the monitoring system
MONITOR_URL="<%= @monitor_url %>"

# TODO: correctly parse command-line args
if [ -z ${1} ];
then
    usage
    exit 1
fi

REL_GIT_REF=${1}
REL_CUR_GIT_REF=""

# Name of the service
REL_SERVICE="<%= @service %>"

# Puppet tag to use for the puppet run
PUPPET_TAG="${REL_SERVICE}::config"

# Does the service need restarting or will puppet take care of it?
HAS_AUTORESTART=<% if @has_autorestart %>"yes"<% else %>""<% end %>

# Url for monitoring
MONITOR_URL="<%= @monitor_url %>"

# Ip address for monitoring
IPADDRESS="<%= @ipaddress %>"

function log {
    echo $@
}

function puppet_run {
    # Let's verify puppet is indeed enabled
    log "WARNING: Enabling puppet if it was disabled"
    puppet agent --enable
    log "Performing a puppet tagged run"
    while test -f /var/lib/puppet/state/agent_catalog_run.lock;
    do
        log "Detected a puppet run already happening, sleeping for ${SLEEP_INTERVAL} seconds"
        sleep ${SLEEP_INTERVAL};
    done

    # We can't use -t because --detailed-exitcodes is harmful to us
    if ! puppet agent --onetime --no-daemonize --ignorecache --no-usecacheonfailure --no-splay --tags ${PUPPET_TAG} > /dev/null 2>&1 ;
    then
        log "Puppet run failed, check your puppet catalog for errors"
        exit 1
    else
        log "Puppet ran successfully, everything should be up to date"
    fi
}

function deploy_git {
    pushd ${REL_CODE_DIR}
    if [ "x${REL_GIT_REF}" == "xmaster" ];
    then
        # We are just releasing the latest revision on origin/master
        # Please note I'm assuming we are using "origin" as a remote
        git fetch origin
        REL_GIT_REF=$(git rev-parse origin/HEAD)
    fi;
    log "Refreshing the git repository"
    REL_CUR_GIT_REF=$(git rev-parse HEAD)
    # TODO: this check actually only works with sha1 refs
    if [ "x${REL_GIT_REF}" != "x${REL_CUR_GIT_REF}" ];
    then
        git remote update && git fetch --tags
        git checkout $REL_GIT_REF
        git submodule update --init --recursive
    else
        log "Not checking out the code, we're already at the correct REF"
    fi
    popd
}

function restart_service {
    if [ -z ${HAS_AUTORESTART} ];
       then
           log "Restarting service ${REL_SERVICE}"
           service ${REL_SERVICE} restart
    fi
}

function check_service_health {
    RETRIES=0
    log "Waiting for the service to come up; checks will be run every ${SLEEP_INTERVAL} seconds"
    while ! /usr/bin/service-checker-swagger -t 5 ${IPADDRESS} "${MONITOR_URL}";
    do
        RETRIES=$((RETRIES + 1))
        if [ ${RETRIES} -gt ${MAX_RETRIES} ];
        then
            log "Too many failures, bailing out"
            exit 2
        fi
        log "Health check failed, trying again."
        sleep ${SLEEP_INTERVAL}
    done
}


if [ $(id -u) != 0 ];
then
    log "ERROR: this script must be run as root (or via sudo)"
    exit 3
fi

deploy_${PROVIDER}
puppet_run
restart_service
check_service_health
