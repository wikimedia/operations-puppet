#!/usr/bin/python3
"""
Reset password of a given LDAP user to a random string.

Useful for rescuing svn users apparently.
"""
import ldap3
import yaml
import random
import string
import argparse


def change_password(conn, user, basedn, new_pass):
    """
    Change password of given user to new password
    """
    op = {
        'userPassword': [(ldap3.MODIFY_REPLACE, [new_pass])]
    }
    user_dn = 'uid={user},ou=people,{base}'.format(
        user=user,
        base=basedn
    )
    return conn.modify(user_dn, op).result


def generate_pass(length):
    """
    Generate a secure password of given length
    """
    password_chars = string.ascii_letters + string.digits + '!@#$%^&*()-=+_[]{};:.<>`~ '
    sysrandom = random.SystemRandom()  # Uses /dev/urandom
    return ''.join([sysrandom.choice(password_chars) for _ in range(length)])


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
        'username',
        help='Name of user to change password for'
    )
    parser.add_argument(
        '--ldapconfig',
        help='Path to LDAP connection config in YAML format',
        default='/etc/ldap.scriptuser.yaml',
    )

    args = parser.parse_args()

    with open(args.ldapconfig, encoding='utf-8') as f:
        ldapconfig = yaml.safe_load(f)

    new_pass = generate_pass(32)
    with ldap3.Connection([
        ldap3.Server(s) for s in ldapconfig['servers']],
        read_only=True,
        user=ldapconfig['user'],
        auto_bind=True,
        password=ldapconfig['password']
    ) as conn:
        res = change_password(conn, args.user, ldapconfig['basedn'], new_pass)
        print("Result of LDAP call: ", res)
        print("New password is: ", new_pass)