#!/usr/bin/python
# Copyright 2015 Yuvi Panda <yuvipanda@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
Takes a user as a parameter and prints list of allowed ssh keys
for that user from querying LDAP.

We just let all errors crash the script since that makes it
exit with a non zero status code and thus prevents login, which
is the behavior we want
"""
import ldap
import yaml
import argparse


def connect(server, username, password):
    conn = ldap.initialize('ldap://%s:389' % server)
    conn.protocol_version = ldap.VERSION3
    conn.start_tls_s()
    conn.simple_bind_s(username, password)
    return conn


def get_keys(conn, basedn, username):
    response = conn.search_s(
        'ou=people,%s' % basedn,
        ldap.SCOPE_SUBTREE,
        '(uid=%s)' % username
    )
    for _, user in response:
        print user['sshPublicKey']
        return user['sshPublicKey']


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('username', help='Username to list ssh keys for')
    args = parser.parse_args()

    with open('/etc/ldap.yaml') as f:
        config = yaml.safe_load(f)

    conn = connect(config['servers'][0], config['user'], config['password'])
    keys = get_keys(conn, config['basedn'], args.username)
    for key in keys:
        # Some keys have an accidental newline at the end, see T77902
        print key.strip()

if __name__ == '__main__':
    main()
