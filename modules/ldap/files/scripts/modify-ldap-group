#!/usr/bin/python3
"""
Add / Remove users from LDAP group
"""
import ldap3
import yaml
import argparse


def get_members_list(conn, basedn, group, user):
    """
    Get list of members of the given group
    """
    conn.search(
        'ou=groups,{base}'.format(base=basedn),
        '(cn={group})'.format(group=group),
        ldap3.SEARCH_SCOPE_WHOLE_SUBTREE,
        attributes=['member']
    )
    return conn.response[0]['attributes']['member']


def add_member(conn, basedn, group, user):
    """
    Adds user to group as a mmeber
    """
    userdn = 'uid={user},ou=people,{base}'.format(
        user=user,
        base=basedn,
    )
    groupdn = 'cn={group},ou=groups,{base}'.format(
        group=group,
        base=basedn,
    )
    members = get_members_list(conn, basedn, group, user)
    if userdn in members:
        raise Exception("User already is member of given group")
    members.append(userdn)
    op = {
        'member': [(ldap3.MODIFY_REPLACE, [members])]
    }
    return conn.modify(groupdn, op).result


def remove_member(conn, basedn, group, user):
    """
    Remove user from group as a member
    """
    userdn = 'uid={user},ou=people,{base}'.format(
        user=user,
        base=basedn,
    )
    groupdn = 'cn={group},ou=groups,{base}'.format(
        group=group,
        base=basedn,
    )
    members = get_members_list(conn, basedn, group, user)
    if userdn not in members:
        raise Exception("User already is not a member of given group")
    members.remove(userdn)
    op = {
        'member': [(ldap3.MODIFY_REPLACE, [members])]
    }
    return conn.modify(groupdn, op).result


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
        'action',
        help='Action to perform',
        choices=['adduser', 'removeuser'],
    )
    parser.add_argument(
        'group',
        help='Name of group to modify',
    )
    parser.add_argument(
        'user',
        help='Name of user to add/remove'
    )
    parser.add_argument(
        '--ldapconfig',
        help='Path to LDAP connection config in YAML format',
        default='/etc/ldap.scriptuser.yaml',
    )

    args = parser.parse_args()

    with open(args.ldapconfig, encoding='utf-8') as f:
        ldapconfig = yaml.safe_load(f)

    with ldap3.Connection([
        ldap3.Server(s) for s in ldapconfig['servers']],
        user=ldapconfig['user'],
        auto_bind=True,
        password=ldapconfig['password']
    ) as conn:
        if args.action == 'adduser':
            print(add_member(conn, ldapconfig['basedn'], args.group, args.user))
        elif args.action == 'removeuser':
            print(remove_member(conn, ldapconfig['basedn'], args.group, args.user))