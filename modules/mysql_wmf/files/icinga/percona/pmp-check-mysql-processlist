#!/bin/sh

# ########################################################################
# This program is part of Percona Monitoring Plugins
# License: GPL License (see COPYING)
# Authors:
#  Baron Schwartz
# ########################################################################

# ########################################################################
# Redirect STDERR to STDOUT; Nagios doesn't handle STDERR.
# ########################################################################
exec 2>&1

# ########################################################################
# Set up constants, etc.
# ########################################################################
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
STATE_DEPENDENT=4

# ########################################################################
# Run the program.
# ########################################################################
main() {
   # Get options
   for o; do
      case "${o}" in
         -c)              shift; OPT_CRIT="${1}"; shift; ;;
         --defaults-file) shift; OPT_DEFT="${1}"; shift; ;;
         -H)              shift; OPT_HOST="${1}"; shift; ;;
         -l)              shift; OPT_USER="${1}"; shift; ;;
         -p)              shift; OPT_PASS="${1}"; shift; ;;
         -P)              shift; OPT_PORT="${1}"; shift; ;;
         -S)              shift; OPT_SOCK="${1}"; shift; ;;
         -w)              shift; OPT_WARN="${1}"; shift; ;;
         --version)       grep -A2 '^=head1 VERSION' "$0" | tail -n1; exit 0 ;;
         --help)          perl -00 -ne 'm/^  Usage:/ && print' "$0"; exit 0 ;;
         -*)              echo "Unknown option ${o}.  Try --help."; exit 1; ;;
      esac
   done
   OPT_CRIT=${OPT_CRIT:-32}
   OPT_WARN=${OPT_WARN:-16}
   if [ -e '/etc/nagios/mysql.cnf' ]; then
      OPT_DEFT="${OPT_DEFT:-/etc/nagios/mysql.cnf}"
   fi
   if is_not_sourced; then
      if [ -n "$1" ]; then
         echo "WARN spurious command-line options: $@"
         exit 1
      fi
   fi

   # Get processlist into a temp file.
   local TEMP=$(mktemp -t "${0##*/}.XXXXXX") || exit $?
   trap "rm -f '${TEMP}' >/dev/null 2>&1" EXIT
   mysql_exec 'SHOW PROCESSLIST\G' > "${TEMP}"
   if [ $? = 0 ]; then
      # Capture a number of types of states, add some together, take the max,
      # and compare to the threshold.
      UNAUTH=$(count_mysql_processlist "${TEMP}" "User" "unauthenticated user")
      LOCKED1=$(count_mysql_processlist "${TEMP}" "State" "Locked")
      LOCKED2=$(count_mysql_processlist "${TEMP}" "State" "Waiting for table level lock")
      LOCKED3=$(count_mysql_processlist "${TEMP}" "State" "Table lock")
      COPYIN=$(count_mysql_processlist "${TEMP}" "State" ".*opy.* to.* table.*")
      STATIS=$(count_mysql_processlist "${TEMP}" "State" "statistics")
      LOCKED=$((${LOCKED1:-0} + ${LOCKED2:-0} + ${LOCKED3:-0}))
      NOTE="${UNAUTH} unauthenticated, ${LOCKED} locked,"
      NOTE="${NOTE} ${COPYIN} copy to table, ${STATIS} statistics"
      MAX="$(max "${UNAUTH:-0}" "${LOCKED:-0}" "${COPYIN:-0}" "${STATIS:-0}")"
      if [ "${MAX:-0}" -gt "${OPT_CRIT}" ]; then
         NOTE="CRIT $NOTE"
      elif [ "${MAX:-0}" -gt "${OPT_WARN}" ]; then
         NOTE="WARN $NOTE"
      else
         NOTE="OK $NOTE"
      fi

      # Build the common perf data output for graph trending
      PERFDATA="processes=${MAX:-0};${OPT_WARN};${OPT_CRIT};0;"
      NOTE="$NOTE | $PERFDATA"
   else
      NOTE="UNK could not retrieve MySQL processlist"
   fi

   echo $NOTE
}

# ########################################################################
# Extract a count from MySQL processlist.  The arguments are:
# $1 - file with the processlist.
# $2 - the column to examine.
# $3 - the value to count.
# ########################################################################
count_mysql_processlist() {
   local FILE="${1}"
   local COL="${2}"
   local MATCH="${3}"
   grep -c "^ *${COL}: ${MATCH}" "${FILE}"
}

# ########################################################################
# Find the maximum argument, assuming nonnegative integers.
# ########################################################################
max() {
   local MAX=0
   for val; do
      if [ "${val:-0}" -gt "${MAX}" ]; then
         MAX="${val}"
      fi
   done
   echo "${MAX:-0}"
}

# ########################################################################
# Execute a MySQL command.
# ########################################################################
mysql_exec() {
   mysql ${OPT_DEFT:+--defaults-file="${OPT_DEFT}"} ${OPT_HOST:+-h"${OPT_HOST}"} ${OPT_USER:+-u"${OPT_USER}"} \
      ${OPT_PASS:+-p"${OPT_PASS}"} ${OPT_SOCK:+-S"${OPT_SOCK}"} ${OPT_PORT:+-P"${OPT_PORT}"} \
      -ss -e "$1"
}

# ########################################################################
# Determine whether this program is being executed directly, or sourced/included
# from another file.
# ########################################################################
is_not_sourced() {
   [ "${0##*/}" = "pmp-check-mysql-processlist" ] || [ "${0##*/}" = "bash" -a "$_" = "$0" ]
}

# ########################################################################
# Execute the program if it was not included from another file.
# This makes it possible to include without executing, and thus test.
# ########################################################################
if is_not_sourced; then
   OUTPUT=$(main "$@")
   EXITSTATUS=$STATE_UNKNOWN
   case "${OUTPUT}" in
      UNK*)  EXITSTATUS=$STATE_UNKNOWN;  ;;
      OK*)   EXITSTATUS=$STATE_OK;       ;;
      WARN*) EXITSTATUS=$STATE_WARNING;  ;;
      CRIT*) EXITSTATUS=$STATE_CRITICAL; ;;
   esac
   echo "${OUTPUT}"
   exit $EXITSTATUS
fi

# ############################################################################
# Documentation
# ############################################################################
: <<'DOCUMENTATION'
=pod

=head1 NAME

pmp-check-mysql-processlist - Alert when MySQL processlist has dangerous patterns.

=head1 SYNOPSIS

  Usage: pmp-check-mysql-processlist [OPTIONS]
  Options:
    -c CRIT         Critical threshold; default 32.
    --defaults-file FILE Only read mysql options from the given file.
                    Defaults to /etc/nagios/mysql.cnf if it exists.
    -H HOST         MySQL hostname.
    -l USER         MySQL username.
    -p PASS         MySQL password.
    -P PORT         MySQL port.
    -S SOCKET       MySQL socket file.
    -w WARN         Warning threshold; default 16.
    --help          Print help and exit.
    --version       Print version and exit.
  Options must be given as --option value, not --option=value or -Ovalue.
  Use perldoc to read embedded documentation with more details.

=head1 DESCRIPTION

This Nagios plugin examines MySQL's processlist and alerts when there are too
many processes in various states.  The list of checks is as follows:

=over

=item Unauthenticated users

Unauthenticated users appear when DNS resolution is slow, and can be a warning
sign of DNS performance problems that could cause a sudden denial of service to
the server.

=item Locked processes

Locked processes are the signature of MyISAM tables, but can also appear for
other reasons.

=item Copying to temporary tables

Too many processes copying to various kinds of temporary tables at one time is a
typical symptom of a storm of poorly optimized queries.

=item Statistics

Too many processes in the "statistics" state is a signature of InnoDB
concurrency problems causing query execution plan generation to take too long.

=back

=head1 PRIVILEGES

This plugin executes the following commands against MySQL:

=over

=item *

C<SHOW PROCESSLIST>.

=back

This plugin executes no UNIX commands that may need special privileges. 

=head1 COPYRIGHT, LICENSE, AND WARRANTY

This program is copyright 2012-2013 Baron Schwartz, 2012-2013 Percona Inc.
Feedback and improvements are welcome.

THIS PROGRAM IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, version 2.  You should have received a copy of the GNU General
Public License along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.

=head1 VERSION

Percona Monitoring Plugins pmp-check-mysql-processlist 1.0.4

=cut

DOCUMENTATION
