#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
  ssh-agent-proxy -- filtering proxy for ssh-agent

  Creates a UNIX domain socket that proxies connections to an ssh-agent(1)
  socket, disallowing any operations except listing identities and signing
  requests.

  usage: ssh-agent-proxy [--bind ADDRESS] [--connect ADDRESS]

  Options:
    --bind ADDRESS     Bind the proxy to the UNIX domain socket at this address
    --connect ADDRESS  Proxy connects to the ssh-agent socket at this address


  Copyright 2014 Ori Livneh <ori@wikimedia.org>

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

"""
import argparse
import os
import select
import socket
import socketserver
import struct


# See <http://api.libssh.org/rfc/PROTOCOL.agent>
SSH_AGENTC_REQUEST_RSA_IDENTITIES = 1
SSH2_AGENTC_REQUEST_IDENTITIES = 11
SSH2_AGENTC_SIGN_REQUEST = 13
SSH_AGENTC_REMOVE_ALL_RSA_IDENTITIES = 9
SSH_AGENT_FAILURE = 5
SSH_AGENT_SUCCESS = 6


class SshAgentProxyHandler(socketserver.BaseRequestHandler):

    permitted_requests = (
        SSH_AGENTC_REQUEST_RSA_IDENTITIES,
        SSH2_AGENTC_REQUEST_IDENTITIES,
        SSH2_AGENTC_SIGN_REQUEST,
    )

    def setup(self):
        self.proxy = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        self.proxy.setblocking(0)
        self.proxy.connect(self.connect)
        self.sockets = [self.request, self.proxy]

    def recv_message(self, socket):
        header = socket.recv(5)
        if not header:
            return None, b''
        size, kind = struct.unpack_from('!LB', header)
        message = socket.recv(size - 1)
        return kind, message

    def send_message(self, socket, kind, message=b''):
        header = struct.pack('!LB', len(message) + 1, kind)
        socket.sendall(header + message)

    def handle(self):
        while 1:
            readable, *_ = select.select(self.sockets, [], [], 1)
            for socket in readable:
                kind, message = self.recv_message(socket)
                if kind is None:
                    return

                if socket == self.proxy:
                    self.send_message(self.request, kind, message)
                else:
                    if kind == SSH_AGENTC_REMOVE_ALL_RSA_IDENTITIES:
                        self.send_message(self.request, SSH_AGENT_SUCCESS)
                    elif kind in self.permitted_requests:
                        self.send_message(self.proxy, kind, message)
                    else:
                        self.send_message(self.request, SSH_AGENT_FAILURE)

    def finish(self):
        for socket in self.sockets:
            socket.close()


ap = argparse.ArgumentParser(description='Filtering proxy for ssh-agent(1)')
ap.add_argument('--bind', default='/run/keyholder/proxy.sock',
                help='Bind the proxy to the domain socket at this address')
ap.add_argument('--connect', default='/run/keyholder/agent.sock',
                help='Proxy connects to the ssh-agent socket at this address')
args = ap.parse_args()

SshAgentProxyHandler.connect = args.connect
proxy = socketserver.ThreadingUnixStreamServer(args.bind, SshAgentProxyHandler)
proxy.serve_forever()
