#!/usr/bin/python
# Update ganglia config files for the ganglia aggregator in labs:
# add gmetad data_source, gmond udp_recv_channel, and gmond tcp_accept_channel
# lines for each labs project, as stored in ldap (cn, gidNumber).
# Runs via cron every 8 hours.

import filecmp
import ldap
import os
import shutil
import sys
import syslog

# ldap variables
ldapconffile = '/etc/ldap.conf' # ldap conf file to extract bind parameters from
basedn = 'ou=groups,dc=wikimedia,dc=org' # basedn for ldap query
lfilter = '(&(objectclass=groupofnames)(owner=*))' # filter for ldap query
attrs = ['cn', 'gidNumber'] # attributes to return from ldap query

# gmetad and gmond shared variables
gdir = '/etc/ganglia' # ganglia directory
portprefix = 2 # number to prefix to gidNumber to create unique port number

# gmetad variables
gmetadconf = os.path.join(gdir, 'gmetad.conf') # live gmetad conf file
gmetadconfstub = gmetadconf + '.labsstub' # gmetad conf stub file
gmetadconfnew= gmetadconf + '.new' # location to stage new gmetad conf file
gserver = 'aggregator1.pmtpa.wmflabs' # hostname of the aggregator server
gmetadaemon = 'gmetad' # name of gmetad daemon (for restarting)
gmetadps = 'gmetad' # name of gmetad ps (for verifying restart)

# gmond variables
gmondconf = os.path.join(gdir, 'conf.d', 'labs-aggregator.conf') # live gmond conf include file
gmondconfnew= gmondconf + '.new' # location to stage new gmond conf include file
gmondaemon = 'ganglia-monitor' # name of gmond daemon (for restarting)
gmondps = 'gmond' # name of gmond daemon (for verifying restart)

def _get_projects_gids():
  """Query ldap and return a dictionary of all projects (cn) and their
     corresponding group IDs (gidNumber);
     raise LDAPError on any ldap failures"""
  # get ldap connect parameters (e.g., uri, binddn, bindpw) from conf file
  ldapconf = {}
  for line in open(ldapconffile):
    splitline = line.strip().split()
    ldapconf[splitline[0]] = splitline[1]

  # establish ldap connection
  con = ldap.initialize(ldapconf['uri'])
  con.protocol_version = ldap.VERSION3
  con.start_tls_s()
  con.simple_bind_s(ldapconf['binddn'], ldapconf['bindpw'])

  # ldap search
  res = con.search_s(basedn, ldap.SCOPE_SUBTREE, lfilter, attrs)
  projectgid = {}
  for (dn, record) in res:
    projectgid[record['cn'][0]] = int(record['gidNumber'][0])
  return projectgid

def gen_ganglia_conf():
  """Generate new ganglia config files, using defaults from gconfstub and
     dynamically adding data_source lines for each project (found in ldap),
     e.g., data_source "testlabs" aggregator1.pmtpa.wmflabs:21002"""
  # get dict of project names and group IDs from ldap, or exit on failure
  try:
    pg = _get_projects_gids()
  except ldap.LDAPError, e:
    syslog.syslog(e)
    sys.exit(3)

  # write gmetad conf file
  f = open(gmetadconfnew, 'w')
  for line in open(gmetadconfstub):
    f.write(line)
    if line == '# BEGIN AUTOGEN FROM CRON\n':
      for p in sorted(pg):
        # write out data_source line to conf file, e.g.,
        # data_source "testlabs" aggregator1.pmtpa.wmflabs:21002
        f.write('data_source "%s" %s:%d%d\n' % (p, gserver, portprefix, pg[p]))
  f.close()

  # write gmond conf include file
  g = open(gmondconfnew, 'w')
  g.write('# THIS FILE IS AUTOGENERATED VIA CRON\n')
  # 'deaf = no' is required so gmond will listen on ports specified below
  g.write('globals {\n  deaf = no\n}\n\n')
  for p in sorted(pg):
    # write out udp_recv_channel and tcp_accept_channel stanzas
    g.write('# %s\n' % p)
    g.write('udp_recv_channel {\n  port = %d%s\n}\n' % (portprefix, pg[p]))
    g.write('tcp_accept_channel {\n  port = %d%s\n}\n\n' % (portprefix, pg[p]))
  g.close()

def cond_restart(conf, daemon, ps):
  """Restart daemon if the new conf file has changed and verify restart;
     exit with error code 1 or 2, to indicate 1 or 2 restart failures"""
  confnew = conf + '.new' # location of new conf file
  confbk = conf + '.bk' # location to backup old conf file
  restart = ('/etc/init.d/' + daemon + ' restart && '
             '/usr/bin/pgrep ' + ps) # restart/verify commands
  # update the conf file if it has changed
  if os.path.isfile(conf) and filecmp.cmp(conf, confnew):
    syslog.syslog("INFO: %s config has not changed; no reload needed" % daemon)
  else:
    if os.path.isfile(conf):
      shutil.copyfile(conf, confbk)
    shutil.copyfile(confnew, conf)
    # restart the daemon, verify, and attempt to revert if needed
    if os.system(restart) == 0:
      syslog.syslog("INFO: %s new config loaded successfully" % daemon)
    else:
      shutil.copyfile(confbk, conf)
      # verify revert attempt
      if os.system(restart) == 0:
        syslog.syslog(("WARN: %s failed to load new config, but "
                       "has been successfully reverted") % daemon)
        sys.exit(1)
      else:
        syslog.syslog(("ERROR: %s failed to load new config, and "
                       "revert failed; daemon is not running!") % daemon)
        sys.exit(2)


if __name__ == "__main__":
  gen_ganglia_conf()
  cond_restart(gmondconf, gmondaemon, gmondps)
  cond_restart(gmetadconf, gmetadaemon, gmetadps)
