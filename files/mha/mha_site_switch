#!/bin/bash
#
# The All-The-Databases Datacenter Migration Script
#
# this is a wrapper script for masterha_master_switch to move masters for all
# managed shards between datacenters.  If you need to move single shards,
# call masterha_master_switch individually.
#
root=/etc/mha
sites="|eqiad|codfw|"
primary=$(cat $root/primary_site)
configs="${root}/*dc.cnf"
switch_options="--master_state=alive --orig_master_is_new_slave --interactive=0"
log="/var/tmp/siteswitch.$(date +'%Y%m%d%H%M')-$$.log"
dryrun=1
unset dest blind status

if ! which masterha_master_switch >/dev/null ; then
	echo 'Error: masterha_master_switch must be in $PATH'
	exit 2
fi

function usage {
	echo "Usage: $0
	-s <site to set as master>
	-j just switch every shards master to whichever site is currently its secondary
	-y actually run masterha_master_switch, default is to do a dry run and show what would be run
	-D primary site is hard down for all shards, online master migration not possible (CAUTION)
	"
	echo "Example:
	$0 -s eqiad -y	# all shards will be mastered in eqiad. if some already are, nothing is changed.
	$0 -j -y		# if s[1-7] are mastered in eqiad and es[2-3] in codfw, s[1-7] masters switched to codfw and es[2-3] to eqiad."
	exit 1
}

function lognote {
	echo
	if [ $dryrun -eq 0 ] ; then
		echo "All masterha_master_switch invocations logged to $log"
		echo "Get CHANGE MASTER statements there if needed"
	else
		echo "This was a dry run, add -y to actually run the above"
	fi
	echo
}

function switch_all {
	for conf in $configs ; do
		echo "============================================================================="
		echo "On ${conf}:"
		echo "Running: masterha_master_switch $switch_options --conf=$conf 2>&1 | tee -a $log"
		echo "============================================================================="
		if [ $dryrun -eq 0 ] ; then
			masterha_master_switch $switch_options --conf=$conf 2>&1 | tee -a $log
			if [ $? -eq 0 ] ; then
				$status="${status}${conf}: success\n"
			else
				$status="${status}${conf}: ERROR\n"
			fi
		fi
	done
	lognote
}

function switch_to_site {
	# the destination site must be contained in $sites
	if [ $sites = ${sites/|$dest|} ] ; then
		echo "Invalid site $dest, valid sites are : ${sites//|/ }"
		exit 1
	fi

	if [ $dest = $primary ] ; then
		echo -n "$dest is the primary site, according to the puppets. proceed anyways? (y/N)  "
		read x
		[ "$x" != "y" ] && exit 1
	fi

	for conf in $configs ; do
		unset hostname
		eval $(grep hostname= $conf | grep $dest)
		echo "============================================================================="
		echo "On ${conf}:"
		echo "Running: masterha_master_switch $switch_options --new_master_host=$hostname --conf=$conf 2>&1 | tee -a $log"
		echo "============================================================================="
		if [ $dryrun -eq 0 ] ; then
			masterha_master_switch $switch_options --new_master_host=$hostname --conf=$conf 2>&1 | tee -a $log
			if [ $? -eq 0 ] ; then
				$status="${status}${conf}: success\n"
			else
				$status="${status}${conf}: ERROR\n"
			fi
		fi
	done
	lognote
}

while getopts ":s:yjD" opt; do
	case $opt in
		s)
			dest=$OPTARG
			;;
		j)	blind=1
			;;
		y)	dryrun=0
			;;
		D)
			echo "Caution: -D set - only use if current primary datacenter is quite indisposed, and *all* masters can be considered hard down!"
			echo
			echo "Replication will be broken and must be manually reconfigured on every master in the primary datacenter."
			echo
			echo "If mediawiki continues to write to them from the unreachable datacenter, those writes will need to be discarded."
			echo "Depending on what they are, you may need to rebuild/restore all databases in that dc from scratch based on"
			echo "copies of the \"good\" side to restore replication without risk of inconsistencies or corruption."
			echo
			echo "If ES shards get into that state, and you can't sort out how to get them consistent from binlog inspection"
			echo "(should generally be possible since they only get INSERT queries) be prepared for a 48 hour roller coaster."
			echo
			echo "So.. Are you sure? (y/N)"
			read x
			[ "$x" != "y" ] && exit 1
			echo "Really? Do you have backups? (y/N)"
			read x
			[ "$x" != "y" ] && exit 1
			echo "FSM help you."
			echo
			switch_options="--master_state=dead --interactive=0"
			;;
		*)
			usage
			;;
	esac
done

if [ "$dest" ] && [ "$blind" ] ; then
	echo "Error: -s and -y are mutually exclusive"
	usage
elif [ "$blind" ] ; then
	switch_all
elif [ "$dest" ] ; then
	switch_to_site
else
	usage
fi

echo -e "\n\n${status}" | tee -a $log
