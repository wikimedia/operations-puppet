#!/usr/bin/perl

# varnishhtpcd	Translates multicast htcp to varnish local http purge
#
# chkconfig: - 90 10
# description: HTCP2Varnish purger

#
# Released under some license as perl AL || GPL
#
# Requires the second patch at http://varnish.projects.linpro.no/ticket/265
#


use strict;
use URI;
use warnings;

use Socket;
use IO::Socket;
use LWP::UserAgent;

my $ip_add_membership;
if($^O eq 'linux') {
	$ip_add_membership = 35;
} else {
	die "no constants for non linux platforms";
}

use Working::Daemon;
my $daemon = Working::Daemon->new();
$daemon->name('varnishhtcpd');

$daemon->parse_options(
	'mcast_port=i' => 4827 => "htcp multicast port to listen to",
	'mcast_address=s' => "224.0.0.85" => "htcp multicast port",
	'cache=s@' => [] => 'Where to purge',
	'address=s' => '0.0.0.0' => 'Interface to listen to',
	'http_source=s' => '0.0.0.0' => 'Interface to send HTTP requests from',
	'buffer=i' => 16777216 => "socket receive buffer size (bytes)",
	'debug' => 0 => "Debugging",
	);

$daemon->do_action;

$daemon->drop_privs;

use Data::Dumper;
print Dumper($daemon->options);

my $listen = IO::Socket::INET->new(
                                   LocalPort => $daemon->options->{'mcast_port'},
                                   Type => SOCK_DGRAM,
                                   Proto => 'udp',
                                   ReuseAddr => 1,
                                   ) || die;

setsockopt($listen, 0, SO_RCVBUF, $daemon->options->{'buffer'});
setsockopt($listen, 0, $ip_add_membership,,
           pack("a4 a4", inet_aton($daemon->options->{'mcast_address'}), inet_aton($daemon->options->{address})))
           || die "IP_ADD_MEMBERSHIP: $!"; 


my %userAgents;
foreach my $cache (@{$daemon->options->{cache}}) {
	my $ua = LWP::UserAgent->new(keep_alive => 1, timeout => 5);
	$ua->agent("HTCP Purger");
	$ua->proxy('http', "http://$cache/");
	if ($daemon->options->{http_source} ne '0.0.0.0') {
		$ua->local_address($daemon->options->{http_source});
	}

	$userAgents{$cache} = $ua
}

while(1) {
	my $raw;
	my ($len, $datalen, $op, $id, $specifier,$extra);
	my ($method, $url, $version, $nr3);
	$0 = $daemon->name . " worker - waiting for net";

	(my $peer = recv($listen, $raw, 4096, 0)) || die "recv: $!";
	my ($port, $addr) = sockaddr_in($peer);

	# reverse engineered from mediawiki SquidUpdate.php
	($len, $datalen, $op, $id, $specifier,$extra) = unpack("nxxnCxNxxa*n", $raw);
	($method, $url, $version, $nr3) = unpack("n/an/an/an", $specifier);

	foreach my $cache (@{$daemon->options->{cache}}) {
		my $uri = URI->new($url);
		my $req = HTTP::Request->new(PURGE => "$uri");
		my $ua = $userAgents{$cache};
		$req->header("Accept-Encoding" => 'gzip');
	
		my $res = $ua->request($req);
		if($res->is_success() || $res->code == 404) {
			if ($daemon->options->{debug}) {
				print "OK: PURGE $url sent to $cache\n";
			}
		} elsif ($daemon->options->{debug}) {
			print "FAIL: PURGE $url sent to $cache\n";
		}
	}
}

exit;
__END__

1;
