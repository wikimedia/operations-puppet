#!/usr/bin/env php
<?php

/**
 * Merge CDB file updates via a JSON blobs and push-based MD5 file.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 * http://www.gnu.org/copyleft/gpl.html
 *
 * @file
 * @author Aaron Schulz
 */

if ( PHP_SAPI !== 'cli' ) {
	die( "This is not a valid entry point.\n" );
}

$script = new MergeCdbFileUpdates(
	getopt( '', array( 'directory:', 'threads:' ) )
);
$script->execute();

/**
 * Script to pull in updates to CDB files.
 *
 * This will check if the /upstream .MD5 files for each CDB file match their hash.
 * If they do not, then the JSON files in the that directory will be converted
 * to CDB files, replacing the current ones.
 */
class MergeCdbFileUpdates {
	/** @var array */
	protected $params = array();

	public function __construct( array $params ) {
		foreach ( array( 'directory' ) as $par ) {
			if ( !isset( $params[$par] ) ) {
				die( "Usage: mergeCdbFileUpdates " .
					"--directory <directory> --threads <integer> [--trustmtime]\n\n" .
					"The --trustmtime option assumes that the CDB files match the " .
					"upstream JSON files if their mtimes match.\nWithout it, the hash " .
					"of the CDB files is checked against the upstream hash files.\n"
				);
			}
		}
		$this->params = $params;
		$this->params['threads'] = isset( $params['threads'] ) ? $params['threads'] : 1;
		$this->params['trustmtime'] = !empty( $params['trustmtime'] );
	}

	public function execute() {
		$threads = $this->params['threads'];
		if ( $threads < 1 || $threads != intval( $threads ) ) {
			$this->output( "Invalid thread count specified; running single-threaded.\n" );
			$threads = 1;
		}
		if ( $threads > 1 && !function_exists( 'pcntl_fork' ) ) {
			$this->output( "PHP pcntl extension is not present; running single-threaded.\n" );
			$threads = 1;
		}
		$directory = realpath( $this->params['directory'] );

		// Get the list of JSON files to make CDB files from...
		$files = array();
		$nHandle = opendir( "$directory/upstream" );
		if ( !$nHandle ) {
			$this->error( "Could not open directory '$directory/upstream'.", 1 ); // bail
		}
		while ( false !== ( $entry = readdir( $nHandle ) ) ) {
			if ( $this->extensionFromPath( $entry ) === 'json' ) {
				// Get the filename ending in CDB instead of JSON
				$files[] = substr( $entry, 0, strrpos( $entry, '.' ) );
			}
		}
		closedir( $nHandle );
		if ( !count( $files ) ) {
			$this->output( "Directory '$directory/upstream' is empty.\n" );
			return;
		}

		// Make results file
		$tmpFileName = tempnam( "/tmp", get_class( $this ) );
		if ( $tmpFileName === false ) {
			$this->error( "Could not create temp file with tempnam().", 1 ); // bail
		}

		// Initialise and split into chunks
		$chunks = array_chunk( $files, ceil( count( $files ) / $threads ) );
		$pids = array();
		foreach ( $chunks as $fileBatch ) {
			// Do not fork for only one thread
			$pid = ( $threads > 1 ) ? pcntl_fork() : -1;
			if ( $pid === 0 ) {
				// Child, reseed due to http://bugs.php.net/bug.php?id=42465
				mt_srand( getmypid() );
				$this->doUpdate( $directory, $fileBatch, $tmpFileName );
				return;
			} elseif ( $pid === -1 ) {
				// Fork failed or one thread, do it serialized
				$this->doUpdate( $directory, $fileBatch, $tmpFileName );
			} else {
				// Main thread
				$pids[] = $pid;
			}
		}
		// Wait for all children
		foreach ( $pids as $pid ) {
			$status = 0;
			pcntl_waitpid( $pid, $status );
		}

		// Collect results file
		$numRebuilt = array_sum( explode( "\n", file_get_contents( $tmpFileName ) ) );
		unlink( $tmpFileName );

		if ( $numRebuilt > 0 ) {
			$this->output( "Updated $numRebuilt CDB file(s) in '$directory'.\n" );
		}
	}

	/**
	 * @param string $directory
	 * @param array $files
	 * @param string $resFile
	 */
	protected function doUpdate( $directory, array $files, $resFile ) {
		$rebuilt = 0;
		foreach ( $files as $file ) {
			// Get the MD5 to match the CDB file upstream requests
			if ( !is_file( "$directory/upstream/$file.MD5" ) ) {
				$this->error( "Skipped file '$file'; no MD5 file." );
				continue;
			}
			$cdbPath = "$directory/$file";
			$jsonPath = "$directory/upstream/$file.json";
			// Get the upstream JSON file timestamp and local CDB file timestamp
			$jsonTimestamp = is_file( $jsonPath ) ? filemtime( $jsonPath ) : 0;
			// Check if a rebuild is needed
			if ( $this->params['trustmtime'] ) {
				$cdbTimestamp = is_file( $cdbPath ) ? filemtime( $cdbPath ) : 0;
				$needRebuild = ( $cdbTimestamp !== $jsonTimestamp );
			} else {
				$md5Upstream = file_get_contents( "$directory/upstream/$file.MD5" );
				$md5Local = is_file( $cdbPath ) ? md5_file( $cdbPath ) : '';
				$needRebuild = ( $md5Local !== $md5Upstream );
			}
			// If the hashes do not match, fetch the diff needed to update the CDB
			if ( $needRebuild ) {
				// @FIXME: stream this instead loading to RAM
				$data = json_decode( file_get_contents( $jsonPath ), true );
				if ( $data === null ) {
					$this->error( "Could not read '$jsonPath'.", 1 ); // bail
				}
				// Open a temporary new CDB file
				$tmpFileName = tempnam( "/tmp", $file );
				if ( $tmpFileName === false ) {
					$this->error( "Could not create temp file with tempnam().", 1 ); // bail
				}
				$handle = dba_open( $tmpFileName, 'n', 'cdb_make' );
				if ( $handle === false ) {
					$this->error( "Could not open temp CDB file '$tmpFileName'.", 1 ); // bail
				}
				// Convert the JSON data to CDB...
				foreach ( $data as $key => $value ) {
					dba_insert( $key, $value, $handle );
				}
				dba_close( $handle );
				chmod( $tmpFileName, 0644 );
				// Move the temporary CDB file over the old one..
				if ( !rename( $tmpFileName, $cdbPath ) ) {
					$this->error( "Unable to move the new CDB file to '$file'.", 1 );
				}
				// Set its timestamp to match the upstream JSON file
				touch( $cdbPath, $jsonTimestamp );
				++$rebuilt;
			}
		}
		file_put_contents( $resFile, "$rebuilt\n", LOCK_EX | FILE_APPEND );
	}

	protected function extensionFromPath( $path ) {
		$i = strrpos( $path, '.' );
		return strtolower( $i ? substr( $path, $i + 1 ) : '' );
	}

	protected function output( $s ) {
		print $s;
	}

	protected function error( $s, $die = 0 ) {
		fwrite( STDERR, $s . "\n" );
		$die = intval( $die );
		if ( $die > 0 ) {
			die( $die );
		}
	}
}
