#!/bin/bash

# Acquire a non-blocking lock to prevent parallel runs
exec 200>/var/lock/scap || exit 1
flock -n 200 || { echo "WARNING: could not acquire /var/lock/scap; scap is already running." >&2; exit 1; }

SCAP_START=$(date +%s)
NODEFILE=

function cleanup() {
	if [ -n "$NODEFILE" ]; then
		rm -f "$NODEFILE"
	fi
	# The lock is automatically released on exit, but do it here for good measure
	flock -u 200
}

function die() {
	cleanup
	if [ -n "$*" ]; then
		echo >&2 "$*"
	else
		echo >&2 "sync failed" 
	fi
	exit 1
}

. /usr/local/lib/mw-deployment-vars.sh

BINDIR=/usr/local/bin

if [ ! -S "$SSH_AUTH_SOCK" ]; then
	die "SSH_AUTH_SOCK not set or not pointing to a socket. Did you start your ssh-agent?"
fi

DSH_EXPORTS=
# Only sync the active version(s) if requested
if [ -n "$1" ]; then
	# This will export MW_VERSIONS_SYNC to sync-common/mw-update-l10n
	if [ "$1" == "active" ]; then
		# All active MW versions
		export MW_VERSIONS_SYNC=$($BINDIR/mwversionsinuse --home)
	elif [ -d "$MW_COMMON_SOURCE/$1" ]; then
		# A specific MW version
		export MW_VERSIONS_SYNC=$1
	else
		die "Invalid MediaWiki version \"$1\""
	fi
	# This will export MW_VERSIONS_SYNC to scap-1 on the proxies/servers
	DSH_EXPORTS="export MW_VERSIONS_SYNC=\"$MW_VERSIONS_SYNC\";"
fi

# Perform syntax check
echo -n "Checking syntax of wmf-config and multiversion..."
if ( ! ( $BINDIR/lint $MW_COMMON_SOURCE/wmf-config && $BINDIR/lint $MW_COMMON_SOURCE/multiversion ) ); then
	die "Found syntax errors, cannot sync."
fi
echo " done"

# Update the current machine so that serialization works.
# Push wikiversions.dat changes so mwversionsinuse, set-group-write,
# and mwscript work with the right version of the files.
/usr/local/bin/sync-common || die

# Update list of extension message files and regenerate
# the localisation cache
/usr/local/bin/mw-update-l10n || die

# Notify
$BINDIR/dologmsg "!log $USER started scap${*:+: }$*"

# Disable logging
export DOLOGMSGNOLOG=1

echo 'Updating rsync proxies...'
dsh -cM -g scap-proxies -o -oSetupTimeout=10 -- "$DSH_EXPORTS /usr/local/bin/scap-1"

# Do the main code update in random order to avoid overloading any given rsync server
NODEFILE=$(mktemp)
shuf < /etc/dsh/group/mediawiki-installation > "$NODEFILE" || die

RSYNC_SERVERS=`sed 's/^#.*//' /etc/dsh/group/scap-proxies` || die
# Condense whitespace
RSYNC_SERVERS=`echo $RSYNC_SERVERS`

echo 'Copying code to apaches...'
dsh -F30 -cM -f "$NODEFILE" -o -oSetupTimeout=10 -- "$DSH_EXPORTS /usr/local/bin/scap-1 \""$RSYNC_SERVERS"\""
echo 'Finished'

# Builds wikiversions.cdb and syncs it to the apaches with the dat file
sync-wikiversions || die

SCAP_END=$(date +%s)
DIFF=$((SCAP_END-SCAP_START))
MINS=$(((DIFF/60)%60))
SECS=$((DIFF%60))
printf "scap completed in %02dm %02ds.\n" $MINS $SECS

export DOLOGMSGNOLOG=""
$BINDIR/dologmsg "!log $USER finished scap${*:+: }$*"
$BINDIR/deploy2graphite scap $DIFF

cleanup
exit 0
