#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
  you know, scap.

"""
import argparse
import contextlib
import fcntl
import os
import struct
import subprocess
import time


MW_COMMON = '/usr/local/apache/common-local'
MW_COMMON_SOURCE = '/a/common'


@contextlib.contextmanager
def lock(filename):
    """Context manager. Acquires a file lock on entry, releases on exit."""
    # FIXME: Actually use this.
    with open(filename) as fd:
        fcntl.lockf(fd, fcntl.LOCK_EX | fcntl.LOCK_NB)
        yield
        fcntl.lockf(fd, fcntl.LOCK_UN)


def irc_echo(message, address=('neon.wikimedia.org', 9200)):
    """Echo a message on #wikimedia-operations via logmsgbot."""
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    return sock.sendto(string, address)


def cdb_items(buf):
    """Iterates over CDB key/value pairs."""
    table_start, = struct.unpack_from('<L', buf)
    offset = 2048
    while offset < table_start:
        lengths = struct.unpack_from('<LL', buf, offset)
        offset += 8
        yield struct.unpack_from('%ds %ds' % lengths, buf, offset)
        offset += sum(lengths)


def get_branches(wikiversions_cdb_path):
    """Get the set of active branches from a wikiversions.cdb file."""
    with open(wikiversions_cdb_path, 'rb') as f:
        cdb = f.read()
        return {v for k, v in cdb_items(cdb) if k.startswith('ver:')}


def dsh(command, group):
    """Run a command on multiple hosts via DSH."""
    group_file = os.path.join('/etc/dsh/group', group)
    return subprocess.check_call(['dsh', '-F40', '-cM', '-f', group_file, '-o',
                                  '-oSetupTimeout=10', '--', command.strip()])


def check_syntax(*paths):
    """Run lint.php on `paths`; raise CalledProcessError if nonzero exit."""
    command = ['/usr/bin/php', '-n', '-dextension=parsekit.so',
               '/usr/local/bin/lint.php'] + list(paths)
    return subprocess.check_call(command)


ap = argparse.ArgumentParser(description='Deploy MediaWiki')
ap.add_argument('--active', action='store_true', default=False,
                help='only sync active branches')
ap.add_argument('message', nargs=argparse.REMAINDER)
args = ap.parse_args()

env = ''
if args.active:
    branches = get_branches('%s/wikiversions.cdb' % MW_COMMON)
    env = 'export MW_VERSIONS_SYNC="%s"; ' % ' '.join(branches)

assert 'SSH_AUTH_SOCK' in os.environ

start = time.time()

# Perform syntax check
print('Checking syntax of wmf-config and multiversion... ')
check_syntax('%s/wmf-config' % MW_COMMON_SOURCE)
check_syntax('%s/multiversion' % MW_COMMON_SOURCE)
print('done')

# Update the current machine so that serialization works.
# Push wikiversions.dat changes so mwversionsinuse, set-group-write,
# and mwscript work with the right version of the files.
subprocess.check_call('/usr/local/bin/sync-common')

# Update list of extension message files and regenerate
# the localisation cache
subprocess.check_call('/usr/local/bin/mw-update-l10n')

# Notify
irc_echo('!log %s started scap: %s' % (os.getlogin(), args.message))

print('Updating rsync proxies...')
dsh('/usr/local/bin/scap-1' % versions)
print('Finished')

with open('/etc/dsh/group/scap-proxies') as f:
    rsync_servers = ' '.join(ln.strip() for ln in f if not ln.startswith('#'))

# Randomize the order of target machines
with open('/etc/dsh/group/mediawiki-installation', 'rt') as f:
    hosts = random.shuffle(ln for ln in f if not ln.startswith('#'))
    with tempfile.NamedTemporaryFile(prefix='scap') as tmp:
        tmp.write(''.join(hosts))
        NODEFILE = tmp.name
        print('Copying code to apaches...',)
        dsh('%s /usr/local/bin/scap-1 "%s"'
            % (env, versions, rsync_servers), tmp.name)
        print('Finished')

        print('Rebuilding CDB files from /upstream...',)
        dsh('%s /usr/local/bin/scap-rebuild-cdbs' % env, tmp.name)
        print('Finished')


# Builds wikiversions.cdb and syncs it to the apaches with the dat file.
# This is done after all else so that deploying new MW versions is easier.
subprocess.check_call('sync-wikiversions')

stop = time.time()
duration = '%02dm %02ds' % divmod(stop - start, 60)
print('scap completed in %s' % duration)
irc_echo('!log %s finished scap: %s (duration: %s)'
         % (os.getlogin(), args.message, duration))
