#!/usr/bin/env php
<?php

/**
 * Create JSON/MD5 files for all CDB files in a directory
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 * http://www.gnu.org/copyleft/gpl.html
 *
 * @file
 * @author Aaron Schulz
 */

if ( PHP_SAPI !== 'cli' ) {
	die( "This is not a valid entry point.\n" );
}

$script = new RefreshCdbJsonFiles(
	getopt( '', array( 'directory:', 'threads:' ) )
);
$script->execute();

/**
 * Create JSON/MD5 files for all CDB files in a directory
 *
 * This will put a JSON and MD5 file in /upstream for each CDB file.
 *
 * This can be combined with rsync and the mergeCdbFileUpdates.php script to push out
 * large CDB files with minimal traffic. CDB files change drastically with small key/value
 * changes, where as JSON files do not, and thus they diff/rdiff much better.
 *
 * When pushing updates with rsync, this should be run before running rsync.
 * The rsync command should exclude CDB files or at least use -ignore-existing.
 * After the rsync is done, mergeCdbFileUpdates.php can be run on each server to
 * apply the updates to the CDB files.
 */
class RefreshCdbJsonFiles {
	/** @var array */
	protected $params = array();

	public function __construct( array $params ) {
		foreach ( array( 'directory' ) as $par ) {
			if ( !isset( $params[$par] ) ) {
				die( "Usage: refreshCdbJsonFiles " .
					"--directory <directory> --threads <integer>\n"
				);
			}
		}
		$this->params = $params;
		$this->params['threads'] = isset( $params['threads'] ) ? $params['threads'] : 1;
	}

	public function execute() {
		$threads = $this->params['threads'];
		if ( $threads < 1 || $threads != intval( $threads ) ) {
			$this->output( "Invalid thread count specified; running single-threaded.\n" );
			$threads = 1;
		}
		if ( $threads > 1 && !function_exists( 'pcntl_fork' ) ) {
			$this->output( "PHP pcntl extension is not present; running single-threaded.\n" );
			$threads = 1;
		}

		$directory = realpath( $this->params['directory'] );
		if ( !is_dir( $directory ) ) {
			$this->error( "Invalid directory '$directory'.", 1 ); // bail
		}

		if ( !is_dir( "$directory/upstream" ) && !mkdir( "$directory/upstream" ) ) {
			$this->error( "Could not make directory '$directory/upstream'.", 1 ); // bail
		}

		$files = array();
		$handle = opendir( $directory );
		if ( !$handle ) {
			$this->error( "Could not open directory '$directory'.", 1 ); // bail
		}
		while ( false !== ( $entry = readdir( $handle ) ) ) {
			if ( $this->extensionFromPath( $entry ) === 'cdb' ) {
				$files[] = $entry;
			}
		}
		closedir( $handle );
		if ( !count( $files ) ) {
			$this->output( "Directory '$directory' is empty.\n" );
			return;
		}

		// Make results file
		$tmpFileName = tempnam( "/tmp", get_class( $this ) );
		if ( $tmpFileName === false ) {
			$this->error( "Could not create temp file with tempnam().", 1 ); // bail
		}

		// Initialise and split into chunks
		$chunks = array_chunk( $files, ceil( count( $files ) / $threads ) );
		$pids = array();
		foreach ( $chunks as $fileBatch ) {
			// Do not fork for only one thread
			$pid = ( $threads > 1 ) ? pcntl_fork() : -1;
			if ( $pid === 0 ) {
				// Child, reseed due to http://bugs.php.net/bug.php?id=42465
				mt_srand( getmypid() );
				$this->doUpdate( $directory, $fileBatch, $tmpFileName );
				return;
			} elseif ( $pid === -1 ) {
				// Fork failed or one thread, do it serialized
				$this->doUpdate( $directory, $fileBatch, $tmpFileName );
			} else {
				// Main thread
				$pids[] = $pid;
			}
		}
		// Wait for all children
		foreach ( $pids as $pid ) {
			$status = 0;
			pcntl_waitpid( $pid, $status );
		}

		// Collect results file
		$numUpdated = array_sum( explode( "\n", file_get_contents( $tmpFileName ) ) );
		unlink( $tmpFileName );

		if ( $numUpdated > 0 ) {
			$this->output( "Updated $numUpdated JSON file(s) in '$directory'.\n" );
		}
	}

	/**
	 * @param string $directory
	 * @param array $files
	 * @param string $resFile
	 */
	protected function doUpdate( $directory, array $files, $resFile ) {
		$rebuilt = 0;
		foreach ( $files as $file ) {
			$newCdbMd5 = md5_file( "$directory/$file" );
			if ( is_file( "$directory/upstream/$file.MD5" ) &&
				is_file( "$directory/upstream/$file.json" ) &&
				file_get_contents( "$directory/upstream/$file.MD5" ) === $newCdbMd5
			) {
				continue;
			}

			// Open the CDB file for iteration
			$cdbHandle = dba_open( "$directory/$file", 'r-', 'cdb' );
			if ( $cdbHandle === false ) {
				$this->error( "Could not open CDB file '$directory/$file'." );
				continue;
			}
			// Convert the CDB file to JSON...
			$tmpFileName = tempnam( "/tmp", get_class( $this ) );
			if ( $tmpFileName === false ) {
				$this->error( "Could not create temp file with tempnam()." );
				continue;
			}
			$jsonHandle = fopen( $tmpFileName, 'wb+' );
			if ( $jsonHandle === false ) {
				$this->error( "Could not open '$tmpFileName'." );
				continue;
			}
			$bytes = 0;
			$first = true;
			fwrite( $jsonHandle, '{' );
			for ( $k = dba_firstkey( $cdbHandle ); $k !== false; $k = dba_nextkey( $cdbHandle ) ) {
				$key = json_encode( $k );
				$val = json_encode( dba_fetch( $k, $cdbHandle ) );
				$data = "$key:$val";
				if ( $first ) {
					$first = false;
				} else {
					$data = ',' . $data;
				}
				fwrite( $jsonHandle, $data );
				$bytes += strlen( $data );
			}
			fwrite( $jsonHandle, '}' );
			fclose( $jsonHandle );
			dba_close( $cdbHandle );
			// Sanity check file size
			if ( filesize( $tmpFileName ) !== ( $bytes + 2 ) ) {
				unlink( $tmpFileName );
				$this->error( "Failed to write '$tmpFileName'." );
				continue;
			}
			// Create the MD5 and JSON files...
			$bytes = file_put_contents( "$directory/upstream/$file.MD5", $newCdbMd5, LOCK_EX );
			if ( $bytes !== strlen( $newCdbMd5 ) ) {
				unlink( $tmpFileName );
				$this->error( "Could not write '$file.MD5'." );
				continue;
			}
			chmod( $tmpFileName, 0644 );
			if ( !rename( $tmpFileName, "$directory/upstream/$file.json" ) ) {
				$this->error( "Could not write '$directory/upstream/$file.json'." );
				continue;
			}
			++$rebuilt;
		}
		file_put_contents( $resFile, "$rebuilt\n", LOCK_EX | FILE_APPEND );
	}

	protected function extensionFromPath( $path ) {
		$i = strrpos( $path, '.' );
		return strtolower( $i ? substr( $path, $i + 1 ) : '' );
	}

	protected function output( $s ) {
		print $s;
	}

	protected function error( $s, $die = 0 ) {
		fwrite( STDERR, $s . "\n" );
		$die = intval( $die );
		if ( $die > 0 ) {
			die( $die );
		}
	}
}
