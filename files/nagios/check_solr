#!/usr/bin/env python

import os, sys, urllib2
import xml.etree.ElementTree as ET
from optparse import OptionParser

cmd_parser = OptionParser(version = "%prog 1.0")
cmd_parser.add_option("-q", "--qps", action = "store", dest = "qps", help = "Check requests per second")
cmd_parser.add_option("-r", "--requesttime", action = "store", dest = "request_time", help = "Check average request time")
cmd_parser.add_option("-H", "--host", type = "string", action = "store", dest = "solr_host", help = "Solr host", default = "localhost")
cmd_parser.add_option("-p", "--port", type = "string", action = "store", dest = "solr_port", help = "Solr port", default = '8983')
cmd_parser.add_option("-t", "--timeout", type = "int", action = "store", dest = "timeout", help = "Timeout in seconds", default = 3)
(cmd_options, cmd_args) = cmd_parser.parse_args()

errors = []
warnings = []
unknowns = []

def http_get(path):
	url = 'http://' + cmd_options.solr_host + ':' + cmd_options.solr_port + '/solr/' + path
	return urllib2.urlopen(url, None, cmd_options.timeout).read()

def check_value(value, limits, message):
	value = float(value)
	limits = limits.split(':')
	if value > float(limits[0]):
		errors.append(message % (value, limits[0]))
	elif len(limits) > 1 and value > float(limits[1]):
		warnings.append(message % (value, limits[1]))

def check_stat(entry, stat, limits, stat_name):
	if limits == None: return
	node = entry.find(".//stats/stat[name='%s']" % stat)
	if node != None:
		check_value(node.text, limits, stat_name + ' is %s (gt %s)')
	else:
		unknowns.append('Parameter "%s" not found in response' % stat)

def check_select(entry):
	check_stat(entry, 'avgTimePerRequest', cmd_options.request_time, 'Average request time')
	check_stat(entry, 'avgRequestsPerSecond', cmd_options.request_time, 'Average requests per second')

def check_all_stats():
	text = http_get('admin/stats.jsp')
	xml = ET.fromstring(text)

	for entry in xml.iter('entry'):
		name = entry.find('name').text.strip()
		ET.dump(entry)
		if name == '/select':
			check_select(entry)
			break

def process_results():
	if len(errors):
		print 'Solr CRITICAL: ' + '\n'.join(errors)
		return 2
	elif len(unknowns):
		print 'Solr UNKNOWN: ' + '\n'.join(unknowns)
		return 3
	elif len(warnings):
		print 'Solr UNKNOWN: ' + '\n'.join(warnings)
		return 1

	return 0

check_all_stats()
exit(process_results())

