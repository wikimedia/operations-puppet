#!/usr/bin/env python

# export grafana dashboard JSON description for revision control
# pretty printing and sorting the JSON representation should minimise
# differences when code-reviewing changes

import StringIO
import argparse
import json
import logging
import sys

import requests

DEFAULT_URL = 'https://grafana.wikimedia.org/api/dashboards/db/%s'

log = logging.getLogger(__name__)


def dump_dashboard(url):
    if not url.startswith('http'):
        name = url
        url = DEFAULT_URL % url
    else:
        name = url.split('/')[-1]

    req = requests.get(url)
    req.raise_for_status()

    dashboard = req.json()['dashboard']

    if 'source:puppet.git' not in dashboard['tags']:
        dashboard['tags'].append('source:puppet.git')

    log.info('dumping %s into %s', url, name)
    with open(name, 'w') as f:
        json.dump(dashboard, f, sort_keys=True,
                  separators=(',', ': '), indent=2)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('dashboard', help='URL or dashboard name to act on',
                        action='append', nargs='+')
    args = parser.parse_args()

    logging.basicConfig(level=logging.INFO)

    for url in args.dashboard[0]:
        dump_dashboard(url)


if __name__ == '__main__':
    sys.exit(main())
