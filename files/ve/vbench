#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
  vbench - VisualEditor benchmarking tool
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  usage: vbench [-h] [--host HOST] [--port PORT] [--reps N] [--write] url

  positional arguments:
    url          URL to load

  optional arguments:
    -h, --help    show this help message and exit
    --host HOST   Chromium host (default: 'localhost')
    --port PORT   Chromium port (default: 9222)
    --reps N      repetitions (default: 20)
    --warmups N   warm-up loops (default: 2)
    --write       save profiling data as .cpuprofile files.

  Copyright 2015 Ori Livneh <ori@wikimedia.org>

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

"""
import sys
reload(sys)
sys.setdefaultencoding('utf-8')

import argparse
import inspect
import itertools
import json
import logging
import socket
import string
import time
import urllib2

from twisted.internet import reactor
from twisted.python import log

from numpy import mean, median, std

from autobahn.twisted.websocket import (WebSocketClientProtocol,
                                        WebSocketClientFactory)


JS = '''
    window.onload = function () {
        mw.trackSubscribe( 'event.Edit', function ( topic, event ) {
            switch ( event.action ) {
            case 'init':
                console.profile();
                break;
            case 'ready':
                console.profileEnd();
                break;
            }
        } );
        setTimeout( function () {
              $('#ca-ve-edit').click();
        }, 0 );
    };
'''

YELLOW, WHITE, RESET = '\033[93m', '\033[1;37m', '\033[0m'

logging.basicConfig(format='[%s%%(asctime)s%s] %%(message)s' % (YELLOW, RESET),
                    datefmt='%I:%M:%S', level=logging.DEBUG)


measures = (min, max, mean, median, std)


def summarize(series):
    return [(f.__name__, f(series)) for f in measures]


def highlight(*args):
    return WHITE + ''.join(map(str, args)) + RESET


def format_summary(summary):
    items = ('%s: %s' % (k, highlight(round(v, 2), 'ms')) for k, v in summary)
    return ''.join(string.ljust(item, 30) for item in items)


def apply_safe(f, kwargs):
    """Apply a function with only those arguments that it would accept."""
    # If the function takes a '**' arg, all keyword args are safe.
    # If it doesn't, we have to remove any arguments that are not
    # present in the function's signature.
    sig = inspect.getargspec(f)
    sig_args = sig.args[1:] if f.__self__ else sig.args
    if sig.keywords is None:
        kwargs = {k: v for k, v in kwargs.items() if k in sig_args}
    if sig.defaults is not None:
        args = [kwargs.pop(k) for k in sig_args[:-len(sig.defaults)]]
    else:
        args = [kwargs.pop(k) for k in sig_args]
    return f(*args, **kwargs)


class ChromeCPUProfile(object):

    def __init__(self, data):
        self.data = data
        self.cpu_time = self.get_cpu_time()
        self.wall_time = self.get_wall_time()

    def grep(self, function_name, root=None):
        matches = []
        root = root or self.data['head']
        if root.get('functionName') == function_name:
            matches.append(root)
        for child in root.get('children', ()):
            matches.extend(self.grep(function_name, child))
        return matches

    def get_cpu_time(self):
        idle = self.grep('(idle)')[0]
        idle_samples = idle['hitCount']
        all_samples = len(self.data['samples'])
        percent_active = 100.0 * (all_samples - idle_samples) / all_samples
        total_time = self.data['timestamps'][-1] - self.data['timestamps'][0]
        return (percent_active * total_time) / 1e5

    def get_wall_time(self):
        return (self.data['endTime'] - self.data['startTime']) * 1e3


class ChromeRemoteDebuggingProtocol(WebSocketClientProtocol):

    def sendCommand(self, method, callback=None, **params):
        id = next(self.message_ids)
        if callback is not None:
            self.callbacks[id] = callback
        command = {'id': id, 'method': method, 'params': params}
        self.sendMessage(json.dumps(command))

    def onConnect(self, response):
        self.message_ids = itertools.count()
        self.requests = {}
        self.callbacks = {}
        self.cpu_times = []
        self.wall_times = []

    def onOpen(self):
        logging.info('Loading %s', highlight(self.factory.target_url))
        self.sendCommand('Page.enable')
        self.sendCommand('Page.addScriptToEvaluateOnLoad', scriptSource=JS)
        if self.factory.hidpi:
            self.sendCommand('Page.setDeviceMetricsOverride', width=1280,
                             height=800, deviceScaleFactor=2,
                             emulateViewport=False, fitWindow=False,
                             mobile=False)
        self.sendCommand('Network.enable')
        if self.factory.latency:
            self.sendCommand('Network.emulateNetworkConditions', offline=False,
                             latency=100, downloadThroughput=262144,
                             uploadThroughput=262144)
        self.sendCommand('Profiler.enable')
        self.sendCommand('Profiler.setSamplingInterval',
                         interval=100,
                         callback=self.onProfilerReady)

    def onNetworkRequestServedFromCache(self, requestId):
        del self.requests[requestId]

    def onNetworkRequestWillBeSent(self, requestId, request):
        self.requests[requestId] = request

    def onProfilerReady(self):
        self.sendCommand('Network.clearBrowserCache')
        self.sendCommand('Page.navigate', url=self.factory.target_url)

    def writeProfilerData(self, data):
        name = '%s.%d.cpuprofile' % (data.get('title', 'profile'), time.time())
        with open(name, 'w') as f:
            json.dump(data, f)

    def onProfilerConsoleProfileStarted(self):
        self.requests.clear()

    def onProfilerConsoleProfileFinished(self, profile):
        profile = ChromeCPUProfile(profile)

        if self.factory.write:
            self.writeProfilerData(data)

        if self.factory.show_uncached_requests:
            for req in self.requests.values():
                logging.info('[%s] %s', highlight(req['method']), req['url'])

        if self.factory.warmups:
            self.factory.warmups -= 1
        else:
            self.cpu_times.append(profile.cpu_time)
            self.wall_times.append(profile.wall_time)

        reps = len(self.cpu_times)
        logging.info('{:02d}/{:02d}: CPU: {: >7.2f}  Wall: {: >7.2f}'.format(
            reps, self.factory.reps, profile.cpu_time, profile.wall_time))
        if reps < self.factory.reps:
            self.onProfilerReady()
        else:
            reactor.stop()
            self.showSummary()

    def getMethodHandler(self, method):
        object, method = method.split('.')
        # Munge strings with format 'Object.Event' to 'onObjectEvent'.
        handler = 'on' + object + method[0].upper() + method[1:]
        return getattr(self, handler, None)

    def onMessage(self, payload, isBinary):
        message = json.loads(payload.decode('utf-8'))

        error = message.get('error')
        if error is not None:
            return self.onError(error)

        id = message.get('id')
        if id in self.callbacks:
            callback = self.callbacks.pop(id)
            response = message.get('response', {})
            return apply_safe(callback, response)

        method = message.get('method')
        if method is not None:
            handler = self.getMethodHandler(method)
            if handler is not None:
                params = message.get('params', {})
                return apply_safe(handler, params)

    def showSummary(self):
        logging.info('CPU:  %s', format_summary(summarize(self.cpu_times)))
        logging.info('Wall: %s', format_summary(summarize(self.wall_times)))

    def onError(self, error):
        logging.error(error)


class ChromeRemoteDebuggingFactory(WebSocketClientFactory):

    def __init__(self, url, host='localhost', port=9222, reps=20,
                 warmups=0, write=False, show_uncached_requests=False,
                 hidpi=False, latency=False):
        self.host = host
        self.port = port
        self.reps = reps
        self.warmups = warmups
        self.target_url = url.replace('https://', 'http://', 1)  # force HTTP
        self.write = write
        self.show_uncached_requests = show_uncached_requests
        self.hidpi = hidpi
        self.latency = latency
        tab_url = next(tab['webSocketDebuggerUrl'] for tab in self.getTabs()
                       if 'webSocketDebuggerUrl' in tab)
        WebSocketClientFactory.__init__(self, tab_url)
        self.protocol = ChromeRemoteDebuggingProtocol

    def getTabs(self):
        req = urllib2.urlopen('http://%s:%s/json' % (self.host, self.port))
        return json.load(req)


ap = argparse.ArgumentParser(fromfile_prefix_chars='@')
ap.add_argument('--host', default='localhost', help='Chromium host')
ap.add_argument('--port', default=9222, type=int, help='Chromium port')
ap.add_argument('--reps', default=20, metavar='N', type=int,
                help='repetitions')
ap.add_argument('--warmups', default=2, metavar='N', type=int,
                help='warm-up loops')
ap.add_argument('--show-uncached-requests', action='store_true', default=False,
                help='log uncached network requests')
ap.add_argument('--write', action='store_true', default=False,
                help='save profiling data as .cpuprofile files.')
ap.add_argument('--hidpi', action='store_true', default=False,
                help='force high DPI')
ap.add_argument('--latency', action='store_true', default=False,
                help='simulate realistic network conditions')
ap.add_argument('url', help='URL to load')
args = ap.parse_args()


if __name__ == '__main__':
    observer = log.PythonLoggingObserver()
    observer.start()
    factory = ChromeRemoteDebuggingFactory(**vars(args))
    reactor.connectTCP(args.host, args.port, factory)
    reactor.run()
