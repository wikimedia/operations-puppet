#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
  vbench - VisualEditor benchmarking tool
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  usage: vbench [-h] [--host HOST] [--port PORT] [--reps N] [--write] url

  positional arguments:
    url          URL to load

  optional arguments:
    -h, --help    show this help message and exit
    --host HOST   Chromium host (default: 'localhost')
    --port PORT   Chromium port (default: 9222)
    --reps N      repetitions (default: 20)
    --warmups N   warm-up loops (default: 2)
    --write       save profiling data as .cpuprofile files.

  Copyright 2015 Ori Livneh <ori@wikimedia.org>

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

"""
import sys
reload(sys)
sys.setdefaultencoding('utf-8')

import argparse
import itertools
import json
import logging
import socket
import string
import time
import urllib2

from twisted.internet import reactor
from twisted.python import log

from numpy import mean, median, std

from autobahn.twisted.websocket import (WebSocketClientProtocol,
                                        WebSocketClientFactory)


JS = '''
    window.onload = function () {
        mw.trackSubscribe( 'event.Edit', function ( topic, event ) {
            switch ( event.action ) {
            case 'init':
                console.profile();
                break;
            case 'ready':
                console.profileEnd();
                break;
            }
        } );
        setTimeout( function () {
              $('#ca-ve-edit').click();
        }, 0 );
    };
'''

YELLOW, WHITE, RESET = '\033[93m', '\033[1;37m', '\033[0m'

logging.basicConfig(format='[%s%%(asctime)s%s] %%(message)s' % (YELLOW, RESET),
                    datefmt='%I:%M:%S', level=logging.INFO)


measures = (min, max, mean, median, std)


def summarize(series):
    return [(f.__name__, f(series)) for f in measures]


def highlight(*args):
    return WHITE + ''.join(map(str, args)) + RESET


def format_summary(summary):
    items = ('%s: %s' % (k, highlight(round(v, 2), 'ms')) for k, v in summary)
    return ''.join(string.ljust(item, 30) for item in items)


def find_function(root, func='(program)'):
    """Breadth-first search for a function."""
    if root['functionName'] == func:
        return root
    for child in root['children']:
        result = find_function(child, func)
        if result is not None:
            return result


def get_program_time_ms(profile):
    """Get time spent executing JavaScript, in ms."""
    total_samples = len(profile['samples'])
    program = find_function(profile['head'])
    program_samples = program['hitCount']
    percent_in_program = program_samples / float(total_samples)
    total_time = profile['timestamps'][-1] - profile['timestamps'][0]
    time_in_program = (percent_in_program * total_time) / 1000.0
    return time_in_program


def get_total_time_ms(profile):
    return 1000.0 * (profile['endTime'] - profile['startTime'])


class ChromeRemoteDebuggingProtocol(WebSocketClientProtocol):

    def sendCommand(self, method, callback=None, **params):
        id = next(self.message_ids)
        if callback is not None:
            self.callbacks[id] = callback
        command = {'id': id, 'method': method, 'params': params}
        self.sendMessage(json.dumps(command))

    def onConnect(self, response):
        self.message_ids = itertools.count()
        self.callbacks = {}
        self.durations = []
        self.total_durations = []

    def onOpen(self):
        logging.info('Loading %s', highlight(self.factory.target_url))
        self.sendCommand('Page.enable')
        self.sendCommand('Page.addScriptToEvaluateOnLoad', scriptSource=JS)
        self.sendCommand('Network.enable')

        if self.factory.disable_cache:
            self.sendCommand('Network.setCacheDisabled', cacheDisabled=True)

        self.sendCommand('Profiler.enable')
        self.sendCommand('Profiler.setSamplingInterval',
                         interval=100,
                         callback=self.onProfilerReady)

    def onProfilerReady(self, params=None):
        self.sendCommand('Network.clearBrowserCache')
        self.sendCommand('Page.navigate', url=self.factory.target_url)

    def writeProfilerData(self, data):
        name = '%s.%d.cpuprofile' % (data.get('title', 'profile'), time.time())
        with open(name, 'w') as f:
            json.dump(data, f)

    def onProfilerConsoleProfileFinished(self, params=None):
        data = params['profile']

        if self.factory.write:
            self.writeProfilerData(data)

        total_duration_ms = get_total_time_ms(data)
        duration_ms = get_program_time_ms(data)
        if self.factory.warmups:
            self.factory.warmups -= 1
            logging.info('(warm-up) Program: %.2fms Total: %.2fms',
                         duration_ms, total_duration_ms)
            return self.onProfilerReady()
        self.durations.append(duration_ms)
        self.total_durations.append(total_duration_ms)
        logging.info('%s of %s: Program: %.2fms Total: %.2fms',
                     len(self.durations), self.factory.reps, duration_ms,
                     total_duration_ms)
        if len(self.durations) < self.factory.reps:
            self.onProfilerReady()
        else:
            logging.info('Program: %s',
                         format_summary(summarize(self.durations)))
            logging.info('Total:   %s',
                         format_summary(summarize(self.total_durations)))
            reactor.stop()  # Shut down.

    def getMethodHandler(self, method):
        object, method = method.split('.')
        # Munge strings with format 'Object.Event' to 'onObjectEvent'.
        handler = 'on' + object + method[0].upper() + method[1:]
        return getattr(self, handler, None)

    def onMessage(self, payload, isBinary):
        message = json.loads(payload.decode('utf-8'))

        error = message.get('error')
        if error is not None:
            return self.onError(error)

        id = message.get('id')
        if id in self.callbacks:
            callback = self.callbacks.pop(id)
            return callback(message.get('response'))

        method = message.get('method')
        if method is not None:
            handler = self.getMethodHandler(method)
            if handler is not None:
                return handler(message.get('params'))

    def onError(self, error):
        logging.error(error)


class ChromeRemoteDebuggingFactory(WebSocketClientFactory):

    def __init__(self, url, host='localhost', port=9222, reps=20,
                 warmups=0, write=False, disable_cache=False):
        self.host = host
        self.port = port
        self.reps = reps
        self.warmups = warmups
        self.target_url = url.replace('https://', 'http://', 1)  # force HTTP
        self.write = write
        self.disable_cache = disable_cache
        tab_url = next(tab['webSocketDebuggerUrl'] for tab in self.getTabs()
                       if 'webSocketDebuggerUrl' in tab)
        WebSocketClientFactory.__init__(self, tab_url)
        self.protocol = ChromeRemoteDebuggingProtocol

    def getTabs(self):
        req = urllib2.urlopen('http://%s:%s/json' % (self.host, self.port))
        return json.load(req)


ap = argparse.ArgumentParser(fromfile_prefix_chars='@')
ap.add_argument('--host', default='localhost', help='Chromium host')
ap.add_argument('--port', default=9222, type=int, help='Chromium port')
ap.add_argument('--reps', default=20, metavar='N', type=int,
                help='repetitions')
ap.add_argument('--warmups', default=2, metavar='N', type=int,
                help='warm-up loops')
ap.add_argument('--disable-cache', action='store_true', default=False,
                help='disable the network cache')
ap.add_argument('--write', action='store_true', default=False,
                help='save profiling data as .cpuprofile files.')
ap.add_argument('url', help='URL to load')
args = ap.parse_args()


if __name__ == '__main__':
    factory = ChromeRemoteDebuggingFactory(**vars(args))
    reactor.connectTCP(args.host, args.port, factory)
    reactor.run()
