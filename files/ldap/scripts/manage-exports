#!/usr/bin/python

#####################################################################
### THIS FILE IS MANAGED BY PUPPET
### puppet:///files/ldap/scripts/manage-exports
#####################################################################


import sys
import traceback
import ldapsupportlib
import os
import homedirectorymanager
import datetime
from optparse import OptionParser

try:
    import ldap
    import ldap.modlist
except ImportError:
    sys.stderr.write("Unable to import LDAP library.\n")

NONE = 0
INFO = 10
DEBUG = 20


class ExportManager:
    def __init__(self):
        self.keysdir = "/mnt/keys/"
        self.loglevel = INFO
        self.logfile = None

    def run(self):
        parser = OptionParser(conflict_handler="resolve")
        parser.set_usage('manage-exports [options]')

        ldapSupportLib = ldapsupportlib.LDAPSupportLib()
        ldapSupportLib.addParserOptions(parser)

        parser.add_option("--logfile", dest="logfile", help="Write output to the specified log file. (default: stdin)")
        parser.add_option("--loglevel", dest="loglevel", help="Change level of logging; NONE, INFO, DEBUG (default: INFO)")
        (options, args) = parser.parse_args()
        ldapSupportLib.setBindInfoByOptions(options, parser)

        if options.logfile:
            self.logfile = options.logfile
        if options.loglevel:
            self.loglevel = options.loglevel

        base = ldapSupportLib.getBase()
        ds = ldapSupportLib.connect()

        # w00t We're in!
        try:

            # Grab keys
            usersdata = ldapSupportLib.getUsers(ds, '*')
            if not usersdata:
                raise ldap.NO_SUCH_OBJECT()

            # Make sure we have the volume mounted and the dirs are set up properly.
            if not os.path.exists(self.keysdir):
                self.log("Creating a mountpoint")
                os.mkdir(self.keysdir, 0755)
            if not os.path.ismount(self.keysdir):
                os.system("mount -t glusterfs labstore2.pmtpa.wmnet:/keys %s" % self.keysdir)
                if not os.path.ismount(self.keysdir):
                    self.log("Failed to mount the key volume %s" % self.keysdir)
                    raise Exception('mount failure')
            if not os.path.exists(self.keysdir + '/autofs_check'):
                os.mkdir(self.keysdir + '/autofs_check', 0755)
            if not os.path.exists(self.keysdir + '/SAVE'):
                os.mkdir(self.keysdir + '/SAVE', 0755)

            # Hand off the job of writing out keys to homedirectorymanager.py
            hdm = homedirectorymanager.HomeDirectoryManager()
            if options.logfile:
                hdm.logfile = options.logfile
            if options.loglevel:
                hdm.loglevel = options.loglevel
            hdm.setUsersData(usersdata)
            hdm.basedir = self.keysdir
            hdm.run()
        except ldap.NO_SUCH_OBJECT:
            sys.stderr.write("The key search returned no entries.\n")
            ds.unbind()
            return 1
        except ldap.PROTOCOL_ERROR:
            sys.stderr.write("There was an LDAP protocol error; see traceback.\n")
            traceback.print_exc(file=sys.stderr)
            ds.unbind()
            return 1
        except Exception:
            try:
                sys.stderr.write("There was a general error, this is unexpected; see traceback.\n")
                traceback.print_exc(file=sys.stderr)
                ds.unbind()
            except Exception:
                sys.stderr.write("Also failed to unbind.\n")
                traceback.print_exc(file=sys.stderr)
            return 1

        ds.unbind()
        return 0

    def log(self, logstring):
        if self.loglevel >= INFO:
            log = datetime.datetime.now().strftime("%m/%d/%Y - %H:%M:%S - ") + logstring + "\n"
            if self.logfile:
                lf = open(self.logfile, 'a')
                lf.write(log)
                lf.close()
            else:
                print log


def main():
    export_manager = ExportManager()
    export_manager.run()

if __name__ == "__main__":
    main()
