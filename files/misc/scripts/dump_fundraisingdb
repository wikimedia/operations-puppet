#!/usr/bin/perl
use strict;
use Sys::Syslog;
use IPC::Open3;
use IO::Select;

my $conf = {
	'LOCALDIR' => '/a/archive/database_dumps',
	'KEEPDAYS' => {
		'db1025' => 7,
		'db1013' => 7,
	},
	'SENDER' => 'root@wikimedia.org',
	'SUCCESS-RECIPIENT' => 'jgreen@wikimedia.org',
	'FAILURE-RECIPIENT' => 'jgreen@wikimedia.org',
	'DB' => {
		'civicrm' => 'civicrm --single_transaction',
		'dev_civicrm' => 'dev_civicrm --single_transaction',
		'dev_drupal' => 'dev_drupal --single_transaction',
		'dev_fundraising'  => 'dev_fundraising --single_transaction',
		'drupal' => 'drupal --single_transaction',
		'fundraisingwiki' => 'fundraisingwiki --single_transaction',
		'pgehres' => 'pgehres --single_transaction',
	},
	'IDENT' => ($0 =~ /([^\/]+)$/) ? $1 : $0,
	'HOSTNAME' => `hostname --short`,
};

chomp $conf->{'HOSTNAME'};

# invoking user chooses specific db's from the list
my ($e,@requested_dbs);
if (defined @ARGV[0]) {
	for (@ARGV) {
		chomp;
		if (defined $conf->{'DB'}->{$_}) {
			push @requested_dbs, $_;
		} else {
			printlog("no database '$_' configured in $conf->{'IDENT'}");
			$e->{'report'} .= "no database '$_' configured in $conf->{'IDENT'}\n";
			$e->{'errors'}++;
		}
	}
} else {
	@requested_dbs = keys %{$conf->{'DB'}};	
}

printlog('start!');

# purge old files if KEEPDAYS is set
if ($conf->{'KEEPDAYS'}->{$conf->{'HOSTNAME'}} =~ /^(\d+)$/) {
	$e->{'report'} .= "purge files in $conf->{'LOCALDIR'} older than $conf->{'KEEPDAYS'}->{$conf->{'HOSTNAME'}} days\n";
	opendir DIR, $conf->{'LOCALDIR'} or die "can't open $conf->{'LOCALDIR'}: $!";
	for my $file (sort readdir DIR) {
		next if $file =~ /^\./;
		my $file_date = (stat("$conf->{'LOCALDIR'}/$file"))[9];
		if ( (time - $file_date)/86400 > $conf->{'KEEPDAYS'}->{$conf->{'HOSTNAME'}}) {
			printlog("rm $conf->{'LOCALDIR'}/$file");
			unlink "$conf->{'LOCALDIR'}/$file";
		}	
	}	
	close DIR;
}

# cycle through db's and dump-compress them
for my $db (@requested_dbs) {
	my $date = `date +%Y%m%d-%H%M%S`;
	chomp $date;
	printlog("start $conf->{'LOCALDIR'}/$db.$date.$conf->{'HOSTNAME'}.sql.gz");
	$e->{'report'} .= "start dump $db to $conf->{'LOCALDIR'}/$db.$date.$conf->{'HOSTNAME'}.sql.gz\n";
	# use .tmp suffix on uncompressed and in-progress .gz so we can ignore them for rsync jobs
	monitor_shell_call("mysqldump $conf->{'DB'}->{$db} > $conf->{'LOCALDIR'}/$db.$date.$conf->{'HOSTNAME'}.sql.tmp");
	if (-e "$conf->{'LOCALDIR'}/$db.$date.$conf->{'HOSTNAME'}.sql.tmp") {
		monitor_shell_call("gzip --suffix .gz.tmp $conf->{'LOCALDIR'}/$db.$date.$conf->{'HOSTNAME'}.sql.tmp");
		rename "$conf->{'LOCALDIR'}/$db.$date.$conf->{'HOSTNAME'}.sql.tmp.gz.tmp", "$conf->{'LOCALDIR'}/$db.$date.$conf->{'HOSTNAME'}.sql.gz";
	} else {
		printlog("no $conf->{'LOCALDIR'}/$db.$date.$conf->{'HOSTNAME'}.sql.tmp to gzip?");
		$e->{'report'} .= "no $conf->{'LOCALDIR'}/$db.$date.$conf->{'HOSTNAME'}.sql.tmp to gzip?\n";
		$e->{'errors'}++;
	}
}

# set the subject line according to the outcome
if ($e->{'errors'}) {
	$e->{'subject'} = "FAILURE: $conf->{'HOSTNAME'} $conf->{'IDENT'} dump had errors";
	$conf->{'RECIPIENT'} = $conf->{'FAILURE-RECIPIENT'};
} else {
	$e->{'subject'} = "SUCCESS: $conf->{'HOSTNAME'} $conf->{'IDENT'} ran without errors";
	$conf->{'RECIPIENT'} = $conf->{'SUCCESS-RECIPIENT'};
}

# send message
open MAILER, "|/usr/sbin/exim -i $conf->{'RECIPIENT'}";
print MAILER "From: $conf->{'SENDER'}\n" .
		"To: $conf->{'RECIPIENT'}\n" .
		"Subject: $e->{'subject'}\n\n" .
		"$e->{'report'}";
close MAILER;

printlog('done!');

exit;

#         _                 _   _			 
# ____  _| |__ _ _ ___ _  _| |_(_)_ _  ___ ___
#(_-< || | '_ \ '_/ _ \ || |  _| | ' \/ -_|_-<
#/__/\_,_|_.__/_| \___/\_,_|\__|_|_||_\___/__/
#   

sub monitor_shell_call {

	my $command = shift;

	# open system call using open3 so we can cleanly address stderr vs stdout
	my $child_pid = open3(*W, *R, *E, $command);
	close (W); # don't need the write handle at all, so we close that

	# use IO::Select to step through the output of open3
	my ($selector) = IO::Select->new();
	$selector->add (*R, *E);

	# keep looping through open3 filehandles until there is no more output on any of them
	while (1) {
		last if scalar ($selector->handles) == 0;
		my @ready = $selector->can_read (1);
		for my $fh (@ready) {
			my $ffh = fileno($fh);  # identify which handle we're dealing with
			if (eof ($fh)) {	# close the filehandle if we reach the end of output
				$selector->remove ($fh);
				next;
			}
			my $line = scalar <$fh>; # this is the output itself from the current filehandle
			chomp $line;
			if ($ffh == fileno(R)) { # output on stdout
				printlog($line);
				$e->{'report'} .= "$line\n";
			} elsif ($ffh == fileno (E)) { # output on stderr
				printlog($line,'warning');
				$e->{'report'} .= "$line\n";
				$e->{'errors'}++;
			}
		}
	}
	close(R);
	close(E);

}


sub printlog {
	my $msg = $_[0] ? $_[0] : '';
	my $severity = $_[1] ? $_[1] : 'info'; # notice warning error etc.
	Sys::Syslog::setlogsock('unix');
	Sys::Syslog::openlog($conf->{'IDENT'},'ndelay,pid','user');
	Sys::Syslog::syslog($severity,$msg);
	Sys::Syslog::closelog();
}
