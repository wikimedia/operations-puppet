#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
  usage: mwgrep [-h] [--max-results N] [--timeout N] [--user | --module] term

  Grep for Lua or CSS and JS code fragments on (per default) MediaWiki wiki pages

  positional arguments:
    term             text to search for

  optional arguments:
    -h, --help       show this help message and exit
    --max-results N  show at most this many results (default: 100)
    --timeout N      abort search after this many seconds (default: 30)
    --user           search NS_USER rather than NS_MEDIAWIKI
    --module         search NS_MODULE rather than NS_MEDIAWIKI

  mwgrep will grep the MediaWiki namespace across Wikimedia wikis. specify
  --user to search the user namespace instead.

"""
import sys
reload(sys)
sys.setdefaultencoding('utf-8')

import argparse
import json
import urllib
import urllib2


TIMEOUT = 30
BASE_URI = 'http://search.svc.eqiad.wmnet:9200/_all/page/_search'
NS_MEDIAWIKI = 8
NS_USER = 2
NS_MODULE = 828

ap = argparse.ArgumentParser(
    prog='mwgrep',
    description='Grep for CSS and JS code fragments in MediaWiki wiki pages',
    epilog='mwgrep will grep the MediaWiki namespace across Wikimedia wikis. '
           'specify --user to search the user namespace instead.'
)
ap.add_argument('term', help='text to search for')

ap.add_argument(
    '--max-results',
    metavar='N',
    type=int, default=100,
    help='show at most this many results (default: 100)'
)

ap.add_argument(
    '--timeout',
    metavar='N',
    type='{0}s'.format,
    default='30',
    help='abort search after this many seconds (default: 30)'
)

ns_group = ap.add_mutually_exclusive_group()
ns_group.add_argument(
    '--user',
    action='store_const',
    const=NS_USER,
    default=NS_MEDIAWIKI,
    dest='ns',
    help='search NS_USER rather than NS_MEDIAWIKI'
)

ns_group.add_argument(
    '--module',
    action='store_const',
    const=NS_MODULE,
    default=NS_MEDIAWIKI,
    dest='ns',
    help='search NS_MODULE rather than NS_MEDIAWIKI'
)

args = ap.parse_args()

filters = [
    {'term': {'namespace': str(args.ns)}},
    {'script': {'script': "_source['text'].contains('%s')" % args.term}},
]

if args.ns == NS_USER or args.ns == NS_MEDIAWIKI:
    filters.append( {'regexp': {'title.keyword': '.*\\.(js|css)'}} )

search = {
    'size': args.max_results,
    '_source': ['namespace', 'title'],
    'query': {'filtered': {'filter': {'bool': {'must': filters}}}},
}

query = {
    'timeout': args.timeout,
}

uri = BASE_URI + '?' + urllib.urlencode(query)
req = urllib2.urlopen(uri, json.dumps(search))
result = json.load(req)['hits']

for hit in result['hits']:
    db = hit['_index'].rsplit('_', 2)[0]
    title = hit['_source']['title']
    print('{:<20}{}'.format(db, title))

print('(total: %s, shown: %s)' % (result['total'], len(result['hits'])))
