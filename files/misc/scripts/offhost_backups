#!/usr/bin/perl
use strict;
use IPC::Open3;
use IO::Select;
use Sys::Syslog;

# this is a lame little script to do some simple cron-based backup maintenance
# jgreen 20111221

my ($mirror,$email);

# general conf
my $conf = {
	'SENDER' => 'root@wikimedia.org',
	'SUCCESS-RECIPIENT' => 'jgreen@wikimedia.org', # this recip gets only SUCCESS notices
	'FAILURE-RECIPIENT' => 'jgreen@wikimedia.org', # this recip gets only FAILURE notices
	'HOSTNAME' => `hostname --short`,
	'IDENT' => ($0 =~ /([^\/]+)$/) ? $1 : $0,
	'DATE' => `/bin/date "+%Y%m%d-%H%M%S"`,
};
chomp $conf->{'HOSTNAME'};
chomp $conf->{'DATE'};

# jobs, keep 'em numbered in the order you want them to happen
if ($conf->{'HOSTNAME'} eq 'storage3') {

	# copy collected backups from individual hosts to tridge
	$mirror->{'1'} = 'rsync -ar /archive/storage3/ fundraising@tridge.wikimedia.org:storage3/';
	$mirror->{'2'} = 'rsync -ar /archive/aluminium/ fundraising@tridge.wikimedia.org:aluminium/';
	$mirror->{'3'} = 'rsync -ar /archive/grosley/ fundraising@tridge.wikimedia.org:grosley/';
	$mirror->{'4'} = 'rsync -ar /archive/loudon/ fundraising@tridge.wikimedia.org:loudon/';

	# copy db dumps to tridge
	$mirror->{'5'} = 'rsync -ar /archive/database_dumps/ fundraising@tridge.wikimedia.org:database_dumps/';

} elsif ($conf->{'HOSTNAME'} eq 'db1025') {

	# copy db dumps to tridge
	$mirror->{'1'} = 'rsync -ar /a/archive/database_dumps/ fundraising@tridge.wikimedia.org:database_dumps/';

} elsif ($conf->{'HOSTNAME'} =~ /^(aluminium|grosley)/) {

	# archived jenkins builds
	$mirror->{'1'} = "rsync -ar /archive/jenkins_builds/ fundraising\@tridge.wikimedia.org:$conf->{'HOSTNAME'}/jenkins_builds/";

	# syslog-type stuff from paypal etc.
	$mirror->{'2'} = "rsync -ar --exclude *log /var/log/fundraising/ fundraising\@tridge.wikimedia.org:$conf->{'HOSTNAME'}/logs/";

	# hacky backup strategy for hacky hacking dir
	$mirror->{'3'} = "tar --rsh-command=/usr/bin/ssh -zcf fundraising\@tridge.wikimedia.org:$conf->{'HOSTNAME'}/backups/br.$conf->{'DATE'}.tgz -- /srv/br";

}


for my $m (sort {$a<=>$b} keys %{$mirror}) {

	printlog($mirror->{$m});
	$email->{'report'} .= "$mirror->{$m}\n";

	# open system call using open3 so we can cleanly address stderr vs stdout
	my $child_pid = open3(*W, *R, *E, $mirror->{$m});

	close (W); # don't need the write handle at all, so we close that

	# use IO::Select to step through the output of open3
	my ($selector) = IO::Select->new();
	$selector->add (*R, *E);

	# keep looping through open3 filehandles until there is no more output on any of them
	while (1) {
		last if scalar ($selector->handles) == 0;
		my @ready = $selector->can_read (1);
		for my $fh (@ready) {
			my $ffh = fileno($fh);  # identify which handle we're dealing with
			if (eof ($fh)) {	# close the filehandle if we reach the end of output
				$selector->remove ($fh);
				next;
			}
			my $line = scalar <$fh>; # this is the output itself from the current filehandle
			chomp $line;
			if ($ffh == fileno(R)) { # output on stdout
				printlog($line);
				$email->{'report'} .= "$line\n";
			} elsif ($ffh == fileno (E)) { # output on stderr
				printlog($line,'warning');
				next if $line =~ /^tar: Removing leading/;
				$email->{'report'} .= "$line\n";
				$email->{'errors'}++;
			}
		}
	}

	close (R);
	close (E);

}

# set the subject line according to the outcome
if ($email->{'errors'}) {
	$email->{'subject'} = "FAILURE: $conf->{'HOSTNAME'} $conf->{'IDENT'} had errors";
	$email->{'recipient'} = $conf->{'FAILURE-RECIPIENT'};
} else {
	$email->{'subject'} = "SUCCESS: $conf->{'HOSTNAME'} $conf->{'IDENT'} ran without errors";
	$email->{'recipient'} = $conf->{'SUCCESS-RECIPIENT'};
}

# send message
open MAILER, "|/usr/sbin/exim -i $email->{'recipient'}";
print MAILER "From: $conf->{'SENDER'}\n" .
	"To: $email->{'recipient'}\n" .
	"Subject: $email->{'subject'}\n\n" .
	"$email->{'report'}";
close MAILER;

printlog('done!');

exit;


#         _                 _   _             
# ____  _| |__ _ _ ___ _  _| |_(_)_ _  ___ ___
#(_-< || | '_ \ '_/ _ \ || |  _| | ' \/ -_|_-<
#/__/\_,_|_.__/_| \___/\_,_|\__|_|_||_\___/__/
#                                             

sub printlog {
	my $msg = $_[0] ? $_[0] : '';
	my $severity = $_[1] ? $_[1] : 'info'; # notice warning error etc.
	Sys::Syslog::setlogsock('unix');
	Sys::Syslog::openlog($conf->{'IDENT'},'ndelay,pid','user');
	Sys::Syslog::syslog($severity,$msg);
	Sys::Syslog::closelog();
}
