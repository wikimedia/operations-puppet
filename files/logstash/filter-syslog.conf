# vim:set sw=2 ts=2 sts=2 et
# Parse syslog input
filter {
  if [type] == "syslog" {
    # General syslog message cleanup
    mutate {
      replace => [
        "type",  "%{program}",
        "host", "%{logsource}"
      ]
      add_field => { "level" => "%{severity_label}" }
      # "\n" newline notation in substitution results in "\\n" in output.
      # Using a string with a literal newline works as desired.
      gsub => [ "message", "#012", '
' ]
      add_tag => [ "syslog", "es" ]
    }

    # Strip "message repeated" preamble
    if [message] =~ /^message repeated \d+ times:/ {
      grok {
        match => [
          "message",
          "^message repeated %{NUMBER:repeated} times: \[\s*%{GREEDYDATA:message}\]$"
        ]
        overwrite => [ "message" ]
        named_captures_only => true
      }
    }

    # Mark kernel messages forwarded because of hhvm as hhvm messages
    if [type] == "kernel" and [message] =~ /hhvm/ {
      mutate {
        replace => [ "type",  "hhvm" ]
      }
    }

    # Strip leading newline from hhvm messages
    if [type] == "hhvm" {
      mutate {
        strip => [ "message" ]
      }
    }

    if [type] == "hhvm-fatal" {
      # Join sequential lines into a single event
      multiline {
        pattern => "^Host: "
        negate => true
        what => "previous"
      }
    }

    if [type] == "apache2" {
      # Ignore known mod_proxy_fcgi bugs
      if [message] =~ /AH01070: Error parsing script headers/ {
        drop {}
      }
      if [message] =~ /AH01068: Got bogus version \d/ {
        drop {}
      }

      # Parse typical apache error format:
      # [channel:level] [pid N] MSG? [client HOST:PORT] MSG, referer: URL
      grok {
        match => [
          "message",
          "^\[(%{WORD:channel}:)?%{LOGLEVEL:level}\]\s+(\[pid %{POSINT}\]\s+)?(?<message_prefix>[^\[]+)?(\[client %{IP:clientip}(:%{POSINT:clientport})?\]\s+)?%{DATA:message}(,\s+referer:\s+%{NOTSPACE:referrer})?$"
        ]
        overwrite => [ "message", "level" ]
        named_captures_only => true
      }

      if [message_prefix] {
        mutate {
          "replace" => [ "message", "%{message_prefix}%{message}" ]
          "remove_field" => [ "message_prefix" ]
        }
      }

    } #end [type] == "apache2"
  }
}
