# vim:set sw=2 ts=2 sts=2 et
# Parse log events relayed using the udp2log/log2udp protocol
filter {

  if [type] == "udp2log" {
    # Parse a udp2log relay packet
    # Capture sequence_id and channel from packet and trim from message body
    grok {
      match => [
        "message",
        "^%{NUMBER:sequence_id} %{NOTSPACE:channel} %{GREEDYDATA:message}$"
      ]
      overwrite => [ "message" ]
      named_captures_only => true
    }

    # Explode message body on newlines
    split {
      add_tag => [ "split" ]
    }

    # Change message type to be channel name and discard
    mutate {
      replace => [ "type", "%{channel}" ]
      add_tag => [ "udp2log" ]
      remove_field => [ "channel" ]
    }

    # Hang on to the UDP packet sender in case later rules figure out another
    # host to attribute the message to
    mutate {
      add_field => [ "udp_sender", "%{host}" ]
    }

    # NOTE: `add_tag => [ "es" ]` is not done here, so by default none of the
    # events created by this initial parse phase will be added to
    # Elasticsearch. Individual types should be tagged below. This is intended
    # to keep spammy events out of the serach index.
  } # end [type] == "udp2log"


  if "udp2log" in [tags] {

    if [type] == "iegreview" {
      # Parse message as json and put elements in event
      json {
        source => "message"
        add_tag => [ "json", "es" ]
      }
    } # end [type] == "iegreview"


    if [type] == "scap" {
      # Parse message as json and put elements in event
      json {
        source => "message"
        add_tag => [ "json", "es" ]
      }
    } # end [type] == "scap"


    if [type] == "scholarships" {
      # Parse message as json and put elements in event
      json {
        source => "message"
        add_tag => [ "json", "es" ]
      }
    } # end [type] == "scholarships"

  } # end "udp2log" in [tags]

}
